var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.271,1,3.02]],["body/controllers/AppController.html",[0,2.183,1,5.185,2,1.887,3,0.194,4,0.169,5,0.169,6,4.789,7,0.46,8,2.096,9,6.435,10,0.942,11,0.016,12,0.52,13,5.529,14,1.738,15,0.741,16,0.233,17,1.026,18,5.095,19,5.529,20,0.194,21,0.302,22,2.053,23,3.937,24,1.738,25,5.529,26,0.013,27,0.013]],["title/modules/AppModule.html",[28,1.039,29,2.764]],["body/modules/AppModule.html",[3,0.149,4,0.13,5,0.13,11,0.016,16,0.268,17,0.789,20,0.149,21,0.232,26,0.011,27,0.011,28,1.696,29,5.721,30,1.802,31,1.802,32,1.981,33,1.981,34,1.802,35,1.981,36,1.981,37,3.682,38,3.682,39,4.76,40,4.76,41,4.76,42,4.76,43,4.76,44,4.76,45,4.76,46,4.76,47,4.76,48,2.63,49,1.981,50,1.802,51,4.252,52,4.888,53,4.252,54,4.252,55,4.252,56,4.252,57,2.803,58,2.803,59,4.252,60,4.252,61,4.252,62,4.252,63,4.252]],["title/injectables/AppService.html",[18,2.764,64,0.959]],["body/injectables/AppService.html",[3,0.2,4,0.175,5,0.175,7,0.475,8,2.135,9,6.501,11,0.015,12,0.536,14,1.793,15,0.755,16,0.2,17,1.058,18,4.834,20,0.2,21,0.311,24,1.793,26,0.013,27,0.013,64,1.678,65,2.417,66,4.938,67,5.702,68,5.702,69,5.702]],["title/classes/AssignTaskDto.html",[21,0.212,70,1.724]],["body/classes/AssignTaskDto.html",[3,0.151,4,0.132,5,0.132,7,0.359,10,1.086,11,0.016,12,0.6,15,0.844,16,0.223,20,0.199,21,0.385,26,0.011,27,0.011,28,1.153,70,2.528,71,0.982,72,4.829,73,2.489,74,1.298,75,2.583,76,1.102,77,2.367,78,3.012,79,0.763,80,2.306,81,2.306,82,3.012,83,4.306,84,4.306,85,2.306,86,3.504,87,4.306,88,4.306,89,4.65,90,2.839,91,4.306,92,3.066,93,3.73,94,2.865,95,1.47,96,3.123,97,4.204,98,2.788,99,2.788,100,1.789,101,1.3,102,1.826,103,2.619,104,2.109,105,2.109,106,0.672,107,2.109,108,1.354,109,1.912,110,2.651,111,2.222,112,1.826,113,1.41,114,2.109,115,2.839,116,1.064]],["title/classes/AssignTaskDto-1.html",[21,0.177,70,1.438,117,2.305]],["body/classes/AssignTaskDto-1.html",[3,0.136,4,0.119,5,0.119,7,0.323,10,1.031,11,0.016,12,0.569,15,0.782,16,0.212,20,0.238,21,0.384,26,0.01,27,0.01,70,2.357,71,0.885,74,1.21,75,2.451,76,1.027,77,2.246,78,3.024,79,0.741,80,1.573,82,3.024,85,2.151,90,2.559,92,2.763,94,2.881,95,1.325,96,2.6,98,2.6,99,2.6,100,1.669,101,1.172,102,1.645,103,2.72,104,1.901,105,1.901,106,0.606,107,1.901,108,1.22,114,1.901,116,1.494,118,4.002,119,2.389,120,2.473,121,3.881,122,3.881,123,3.019,124,3.881,125,3.881,126,4.191,127,2.003,128,1.669,129,3.779,130,3.881,131,3.881,132,3.779,133,2.725,134,2.116,135,3.267,136,2.116,137,2.389,138,2.389,139,2.763,140,2.357,141,3.723,142,2.756,143,2.818,144,2.818,145,2.116,146,2.003,147,2.763,148,2.559,149,2.763,150,1.441,151,2.116,152,2.003,153,2.763]],["title/classes/AssignTaskResponseDto.html",[21,0.212,110,2.39]],["body/classes/AssignTaskResponseDto.html",[3,0.157,4,0.138,5,0.138,7,0.374,10,0.997,11,0.016,12,0.55,15,0.83,16,0.228,20,0.205,21,0.39,26,0.011,27,0.011,28,1.202,70,1.994,71,1.024,72,4.632,73,2.595,74,1.334,75,1.819,77,1.667,78,2.889,79,0.753,80,2.37,81,1.819,82,2.598,85,1.819,86,2.764,89,4.545,94,2.894,95,1.532,96,3.187,97,4.29,98,2.865,99,2.865,100,1.839,101,1.355,102,1.903,103,2.654,104,2.199,105,2.199,106,0.701,107,2.199,108,1.411,109,1.994,110,3.601,111,3.019,112,2.48,113,2.131,114,2.865,115,4.29,116,1.445,154,4.49,155,4.49]],["title/controllers/AuthController.html",[0,1.271,156,2.764]],["body/controllers/AuthController.html",[0,1.165,2,1.214,3,0.125,4,0.109,5,0.109,7,0.296,8,1.571,10,0.984,11,0.016,12,0.543,14,1.816,15,0.396,16,0.231,17,0.66,20,0.125,21,0.194,22,1.321,23,2.533,24,1.969,26,0.01,27,0.01,50,1.508,76,1.118,79,0.608,81,2.34,106,0.901,108,1.969,112,2.118,113,2.051,117,2.533,156,3.558,157,3.081,158,1.94,159,3.558,160,4.997,161,2.138,162,5.425,163,4.997,164,3.558,165,4.13,166,3.558,167,3.558,168,1.971,169,4.493,170,3.558,171,4.13,172,7.027,173,7.027,174,3.558,175,3.558,176,5.776,177,1.321,178,3.558,179,3.558,180,3.558,181,2.724,182,1.94,183,3.558,184,3.081,185,2.346,186,3.555,187,3.081,188,3.558,189,2.346,190,2.533,191,3.558,192,3.558,193,3.558,194,2.19,195,2.98,196,3.558,197,3.558,198,4.997,199,3.558,200,4.997,201,2.691,202,3.558,203,3.558,204,4.328,205,3.558,206,3.558,207,4.997,208,4.997,209,4.997,210,4.328,211,4.997,212,4.997,213,3.558,214,3.558,215,4.997,216,3.558,217,3.558,218,3.558,219,3.558,220,3.558,221,3.558,222,3.558,223,3.081,224,3.558,225,3.558,226,2.533,227,2.533,228,2.533,229,2.19,230,2.767,231,2.767,232,2.346,233,3.558,234,3.558]],["title/guards/AuthGuard.html",[189,2.56,235,3.02]],["body/guards/AuthGuard.html",[3,0.163,4,0.143,5,0.143,7,0.388,8,1.883,11,0.016,12,0.438,14,1.464,16,0.232,17,0.864,20,0.163,21,0.254,24,1.464,26,0.012,27,0.012,64,1.48,76,0.901,79,0.491,81,1.887,106,0.727,108,1.464,117,3.315,165,4.608,168,1.589,185,3.07,189,3.949,201,3.257,236,4.656,237,4.033,238,6.989,239,5.989,240,6.989,241,4.656,242,4.656,243,5.989,244,5.187,245,3.622,246,4.656,247,4.656,248,4.656,249,5.989,250,4.656,251,4.656,252,3.091,253,2.791,254,4.656,255,4.656,256,4.033,257,4.656,258,6.621,259,4.656,260,4.656,261,5.989,262,4.656,263,4.656,264,4.656,265,4.033,266,4.656,267,4.656,268,4.656,269,4.656,270,4.033,271,4.656]],["title/modules/AuthModule.html",[28,1.039,39,2.56]],["body/modules/AuthModule.html",[2,2.066,3,0.166,4,0.145,5,0.145,11,0.016,16,0.26,17,0.879,20,0.166,21,0.259,26,0.012,27,0.012,28,1.786,30,2.007,31,2.007,32,2.206,33,2.206,34,2.007,35,3.109,36,2.206,39,5.045,48,2.82,49,2.206,50,2.007,52,5.242,156,4.75,161,1.615,186,4.576,187,4.099,265,4.099,272,4.099,273,4.099,274,4.901,275,4.733,276,4.733,277,4.733,278,3.682,279,4.733,280,6.052,281,5.779,282,3.682,283,4.733,284,4.733,285,4.733,286,4.099,287,4.099,288,4.733,289,4.099,290,4.733,291,4.099,292,4.733]],["title/injectables/AuthService.html",[64,0.959,186,2.39]],["body/injectables/AuthService.html",[3,0.123,4,0.108,5,0.108,7,0.293,8,1.559,11,0.016,12,0.586,14,1.805,15,0.809,16,0.218,17,0.653,20,0.123,21,0.192,24,1.96,26,0.01,27,0.01,64,1.225,65,1.492,76,1.207,79,0.718,81,2.839,106,1.026,109,1.563,161,2.516,162,4.296,168,2.128,177,2.132,186,3.053,194,2.167,195,3.392,201,3.177,204,4.296,244,3.049,252,2.56,253,2.311,270,3.049,278,2.738,289,3.049,291,3.049,293,3.049,294,4.96,295,2.429,296,1.919,297,2.643,298,7.006,299,3.52,300,2.56,301,4.96,302,2.56,303,3.52,304,4.96,305,3.52,306,4.96,307,3.838,308,3.52,309,3.392,310,1.919,311,3.858,312,3.52,313,4.96,314,3.52,315,4.296,316,3.52,317,2.035,318,3.049,319,1.365,320,3.52,321,3.52,322,2.963,323,3.52,324,2.434,325,4.96,326,4.296,327,3.52,328,3.52,329,3.52,330,3.049,331,3.049,332,3.52,333,3.52,334,3.52,335,5.743,336,3.52,337,1.919,338,3.049,339,1.919]],["title/classes/CostAllocationDto.html",[21,0.212,340,2.56]],["body/classes/CostAllocationDto.html",[3,0.134,4,0.117,5,0.117,7,0.318,10,1.023,11,0.016,12,0.564,15,0.875,16,0.184,20,0.184,21,0.37,26,0.01,27,0.01,71,0.871,74,1.197,76,1.017,79,0.737,98,3.317,99,2.939,100,2.43,101,1.154,102,1.62,106,0.82,107,3.164,108,2.031,111,2.71,113,2.292,116,1.804,120,1.781,128,2.129,133,2.997,150,1.95,229,4.168,340,4.613,341,2.721,342,3.468,343,3.495,344,3.734,345,3.822,346,3.822,347,2.209,348,3.822,349,3.495,350,2.973,351,2.52,352,3.739,353,3.739,354,3.739,355,4.6,356,4.085,357,3.739,358,3.739,359,2.721,360,2.721,361,3.739,362,2.52]],["title/classes/CreateExpenseDto.html",[21,0.212,363,2.39]],["body/classes/CreateExpenseDto.html",[3,0.107,4,0.094,5,0.094,7,0.254,10,1.261,11,0.016,12,0.696,15,0.876,16,0.157,20,0.157,21,0.319,26,0.009,27,0.009,71,0.696,74,1.021,75,2.366,76,1.444,77,2.168,79,0.813,100,2.435,101,0.922,102,1.295,113,2.128,116,1.88,133,2.95,140,1.356,142,1.898,150,2.168,343,3.465,344,3.756,347,3.594,349,3.014,363,2.757,364,2.174,365,4.627,366,3.184,367,3.014,368,4.542,369,4.542,370,3.85,371,4.542,372,4.542,373,5.628,374,4.627,375,4.478,376,3.054,377,3.054,378,3.054,379,3.054,380,3.054,381,3.054,382,3.054,383,3.054,384,3.054,385,3.054,386,3.054,387,2.645,388,3.878,389,3.054,390,4.542,391,2.645,392,3.054,393,3.054,394,3.775,395,2.645,396,4.592,397,3.483,398,3.483,399,3.878,400,1.88]],["title/classes/CreateMilestoneDto.html",[21,0.212,401,2.39]],["body/classes/CreateMilestoneDto.html",[3,0.155,4,0.135,5,0.135,7,0.368,10,1.244,11,0.016,12,0.687,15,0.883,16,0.155,20,0.203,21,0.353,26,0.011,27,0.011,71,1.008,74,1.32,76,1.121,77,2.544,79,0.769,100,2.372,101,1.335,106,1.069,116,1.595,128,2.154,133,2.985,349,3.766,394,4.878,401,3.564,402,3.438,403,4.878,404,4.878,405,4.878,406,3.147,407,4.42,408,4.42,409,4.42,410,4.42,411,4.42,412,4.42,413,3.828,414,2.915,415,2.721]],["title/classes/CreateProductDto.html",[21,0.212,416,2.39]],["body/classes/CreateProductDto.html",[3,0.168,4,0.147,5,0.147,7,0.399,10,1.204,11,0.016,12,0.664,15,0.829,16,0.214,20,0.214,21,0.367,26,0.012,27,0.012,71,1.092,74,1.39,76,1.367,79,0.744,100,2.109,101,1.446,106,1.047,113,1.997,116,1.745,128,2.109,133,2.891,342,3.878,343,3.147,344,3.525,347,2.769,416,3.754,417,3.726,418,5.674,419,4.148,420,4.79,421,4.79,422,4.79,423,4.79,424,4.148,425,3.726,426,3.726,427,2.948,428,3.158,429,4.148]],["title/classes/CreateProjectWithAllocationsDto.html",[21,0.212,351,2.56]],["body/classes/CreateProjectWithAllocationsDto.html",[3,0.117,4,0.102,5,0.102,7,0.278,10,1.225,11,0.016,12,0.676,15,0.875,16,0.167,20,0.167,21,0.352,26,0.009,27,0.009,71,0.763,74,1.09,76,1.298,79,0.785,92,2.381,98,3.157,99,2.734,100,2.381,101,1.01,102,1.418,106,0.951,107,2.984,108,2.026,111,2.468,113,2.312,116,1.744,120,2.228,128,2.026,133,2.937,150,2.262,229,2.944,340,4.421,341,2.381,342,1.933,343,3.326,344,3.522,347,3.227,349,3.562,350,2.601,351,3.153,352,4.338,353,4.338,354,4.338,355,4.915,356,3.72,357,4.338,358,4.338,359,3.405,360,3.405,361,4.338,362,2.205,430,3.344,431,3.344,432,4.782,433,3.344,434,3.344,435,3.344,436,3.344,437,3.344,438,3.344,439,3.344,440,3.344,441,3.344]],["title/classes/CreateUserDto.html",[21,0.212,442,2.56]],["body/classes/CreateUserDto.html",[3,0.091,4,0.08,5,0.08,7,0.217,10,1.256,11,0.016,12,0.693,15,0.864,16,0.139,20,0.091,21,0.217,26,0.008,27,0.008,71,0.594,74,0.907,76,1.186,79,0.776,80,2.904,81,2.186,82,1.766,86,4.759,94,2.808,95,0.889,96,3.51,97,2.622,100,1.696,101,0.787,103,2.773,108,2.253,116,0.983,123,2.027,127,1.345,133,2.609,134,1.421,135,3.321,137,2.448,140,1.157,307,2.968,309,2.488,317,2.299,322,2.488,343,2.052,349,2.488,367,2.488,414,1.718,442,2.622,443,6.428,444,1.855,445,3.433,446,3.433,447,3.433,448,2.968,449,3.433,450,3.179,451,2.968,452,3.433,453,3.433,454,2.968,455,3.433,456,3.433,457,3.444,458,3.444,459,6.125,460,2.606,461,3.444,462,2.606,463,2.257,464,3.444,465,3.444,466,3.444,467,3.444,468,2.257,469,2.257,470,3.444,471,4.764,472,2.606,473,2.606,474,3.977,475,2.606,476,2.606,477,3.093,478,2.606,479,3.444,480,2.606,481,2.606,482,3.444,483,3.444,484,2.606,485,3.444,486,2.606,487,3.977,488,2.606,489,2.257,490,3.444,491,2.606,492,2.606,493,3.444,494,2.606,495,2.606,496,2.257,497,2.257,498,3.831,499,2.257,500,2.257,501,2.257,502,3.444,503,2.606,504,2.606,505,3.444,506,2.606,507,2.831,508,2.257,509,2.257,510,2.257,511,2.606,512,2.606,513,2.257,514,1.855,515,2.257,516,2.257]],["title/classes/DashboardCountsDto.html",[21,0.212,517,2.39]],["body/classes/DashboardCountsDto.html",[3,0.145,4,0.127,5,0.127,7,0.344,10,1.247,11,0.016,12,0.688,16,0.145,20,0.145,21,0.303,26,0.011,27,0.011,71,0.943,74,1.264,79,0.783,80,2.903,90,2.728,94,2.975,95,1.412,103,2.796,116,1.94,142,1.754,143,1.928,144,1.928,152,2.135,317,2.392,517,3.412,518,5.784,519,3.218,520,4.861,521,4.861,522,3.847,523,4.861,524,4.861,525,4.861,526,4.861,527,4.8,528,4.138,529,4.8,530,4.138,531,4.955,532,4.138,533,4.8,534,4.138,535,4.8,536,4.138,537,3.946,538,4.138,539,3.946,540,4.138,541,3.584]],["title/classes/DeleteUserResponseDto.html",[21,0.212,542,2.56]],["body/classes/DeleteUserResponseDto.html",[3,0.196,4,0.171,5,0.171,7,0.465,10,0.953,11,0.015,12,0.526,15,0.746,16,0.196,20,0.196,21,0.305,26,0.013,27,0.013,71,1.275,74,1.53,79,0.589,80,2.265,81,2.719,94,2.602,95,1.908,103,2.076,112,2.845,113,2.355,444,3.98,542,4.425,543,5.812,544,3.463,545,5.591]],["title/controllers/DepartmentsController.html",[0,1.271,546,2.764]],["body/controllers/DepartmentsController.html",[0,1.274,2,1.327,3,0.136,4,0.119,5,0.119,7,0.324,8,1.671,10,1.161,11,0.016,12,0.641,14,2.142,15,0.844,16,0.186,17,0.722,20,0.136,21,0.212,22,1.444,23,2.769,24,2.142,26,0.01,27,0.01,76,1.26,79,0.772,106,1.098,158,2.12,161,2.659,168,2.221,177,2.53,181,2.898,182,2.12,184,3.368,223,3.368,302,3.358,319,2.727,367,3.63,546,3.784,547,3.368,548,3.889,549,2.898,550,3.358,551,3.072,552,3.072,553,2.966,554,2.394,555,3.504,556,3.889,557,3.889,558,3.889,559,5.315,560,3.889,561,3.889,562,5.315,563,3.889,564,3.889,565,5.315,566,3.889,567,2.248,568,2.248,569,2.769,570,2.248,571,3.727,572,3.368,573,3.889,574,3.889,575,3.889,576,3.889,577,2.394,578,3.889,579,3.889,580,3.889,581,3.889,582,3.889]],["title/modules/DepartmentsModule.html",[28,1.039,40,2.56]],["body/modules/DepartmentsModule.html",[2,2.238,3,0.188,4,0.165,5,0.165,11,0.015,16,0.248,17,0.999,20,0.188,21,0.294,26,0.013,27,0.013,28,1.893,30,2.281,31,2.281,32,2.507,33,2.507,34,2.281,35,3.295,36,2.507,40,5.061,48,3.055,49,2.507,50,2.281,546,5.035,571,4.724,572,4.66,583,4.66,584,4.66,585,5.381,586,5.381]],["title/injectables/DepartmentsService.html",[64,0.959,571,2.39]],["body/injectables/DepartmentsService.html",[3,0.106,4,0.093,5,0.093,7,0.253,8,1.402,11,0.016,12,0.61,14,1.95,15,0.793,16,0.156,17,0.563,20,0.106,21,0.166,22,1.127,24,1.95,26,0.009,27,0.009,64,1.102,65,1.287,76,1.201,79,0.706,106,1.179,108,0.954,109,2.754,112,2.24,113,1.73,161,2.562,168,2.117,195,3.548,201,3.269,252,3.201,253,3.021,295,1.487,296,1.655,297,2.468,300,2.301,302,2.301,310,1.655,319,2.72,324,2.629,337,3.535,339,3.175,366,1.655,367,3.62,544,1.566,550,3.005,553,1.487,571,2.744,587,2.629,588,4.458,589,4.458,590,4.458,591,5.284,592,3.036,593,4.458,594,3.036,595,4.39,596,4.458,597,3.036,598,3.036,599,4.458,600,3.036,601,3.036,602,3.036,603,3.054,604,1.755,605,4.458,606,3.036,607,5.747,608,4.458,609,3.036,610,6.484,611,4.458,612,3.036,613,2.001,614,3.036,615,3.861,616,3.036,617,4.458,618,2.001]],["title/controllers/ExpenseCategoryController.html",[0,1.271,619,2.764]],["body/controllers/ExpenseCategoryController.html",[0,1.249,2,1.302,3,0.134,4,0.117,5,0.117,7,0.318,8,1.649,10,1.153,11,0.016,12,0.637,14,2.128,15,0.841,16,0.184,17,0.708,20,0.134,21,0.208,22,1.417,24,2.128,26,0.01,27,0.01,57,2.515,58,4.611,76,1.25,79,0.769,106,1.091,158,2.08,161,2.652,168,2.203,177,2.513,181,2.86,182,2.08,302,3.331,319,2.711,549,2.86,550,3.331,551,3.032,552,3.032,553,2.936,554,2.348,555,3.458,567,2.205,568,2.205,570,2.205,577,2.348,619,3.734,620,4.979,621,3.304,622,3.815,623,5.245,624,3.815,625,3.815,626,3.304,627,4.543,628,3.815,629,4.979,630,3.304,631,4.543,632,3.815,633,3.304,634,4.543,635,3.815,636,3.69,637,3.304,638,3.815,639,3.815,640,3.304,641,3.815,642,3.815,643,3.815,644,3.815,645,3.304,646,3.815]],["title/modules/ExpenseCategoryModule.html",[28,1.039,41,2.56]],["body/modules/ExpenseCategoryModule.html",[2,2.223,3,0.186,4,0.163,5,0.163,11,0.015,16,0.246,17,0.988,20,0.186,21,0.291,26,0.013,27,0.013,28,1.884,30,2.257,31,2.257,32,2.481,33,2.481,34,2.257,35,3.28,36,2.481,41,5.048,48,3.035,49,2.481,50,2.257,57,4.295,58,3.51,619,5.012,620,3.79,636,4.712,637,4.611,647,4.611,648,4.611,649,5.324,650,5.324]],["title/injectables/ExpenseCategoryService.html",[64,0.959,636,2.39]],["body/injectables/ExpenseCategoryService.html",[3,0.103,4,0.09,5,0.09,7,0.245,8,1.371,11,0.016,12,0.603,14,1.926,15,0.799,16,0.182,17,0.547,20,0.103,21,0.161,22,1.094,24,1.926,26,0.008,27,0.008,57,3.424,58,4.377,64,1.078,65,1.249,76,1.186,79,0.733,106,1.166,108,0.926,109,2.849,112,1.249,113,0.965,161,2.55,168,2.091,177,1.094,195,3.518,201,3.244,232,1.943,252,3.162,253,2.989,295,1.443,296,1.606,297,2.433,300,2.251,302,2.962,310,1.606,319,2.699,324,2.597,337,3.619,339,2.831,366,1.606,544,1.52,553,1.443,595,4.196,603,3.001,604,1.703,613,1.943,618,1.943,620,4.726,629,4.956,636,2.685,651,2.552,652,4.361,653,4.361,654,5.739,655,4.361,656,5.193,657,2.946,658,4.361,659,2.946,660,4.361,661,2.946,662,2.946,663,4.361,664,2.946,665,2.946,666,2.946,667,4.497,668,1.703,669,4.361,670,2.946,671,6.127,672,5.739,673,2.552,674,4.567,675,6.415,676,2.946,677,2.946,678,3.777,679,4.361]],["title/controllers/ExpensesController.html",[0,1.271,680,2.764]],["body/controllers/ExpensesController.html",[0,1.139,2,1.187,3,0.122,4,0.107,5,0.107,7,0.29,8,1.546,10,1.215,11,0.016,12,0.671,14,2.242,15,0.835,16,0.2,17,0.646,20,0.122,21,0.19,22,1.291,24,2.242,26,0.01,27,0.01,75,1.992,76,1.266,79,0.689,106,1.021,158,1.896,161,2.705,168,2.233,177,2.648,181,2.681,182,1.896,319,2.85,363,3.817,400,2.141,549,2.681,550,3.2,551,2.842,552,2.842,553,2.409,554,2.141,555,3.242,567,2.01,568,2.01,569,2.476,570,2.01,577,2.141,626,3.012,627,4.259,629,4.835,630,3.012,631,4.259,633,3.012,634,4.259,640,3.012,645,3.012,680,3.501,681,3.012,682,3.478,683,4.259,684,5.37,685,6.201,686,3.012,687,4.917,688,3.478,689,4.917,690,3.478,691,3.478,692,3.478,693,3.478,694,4.917,695,3.478,696,3.478,697,3.478,698,3.511,699,3.012,700,3.012,701,3.478,702,3.478,703,3.478,704,3.478,705,3.478,706,3.478,707,3.478,708,3.478,709,3.478,710,3.478,711,3.478]],["title/modules/ExpensesModule.html",[28,1.039,42,2.56]],["body/modules/ExpensesModule.html",[2,2.238,3,0.188,4,0.165,5,0.165,11,0.015,16,0.248,17,0.999,20,0.188,21,0.294,26,0.013,27,0.013,28,1.893,30,2.281,31,2.281,32,2.507,33,2.507,34,2.281,35,3.295,36,2.507,42,5.061,48,3.055,49,2.507,50,2.281,680,5.035,698,4.724,699,4.66,712,4.66,713,4.66,714,5.381,715,5.381]],["title/injectables/ExpensesService.html",[64,0.959,698,2.39]],["body/injectables/ExpensesService.html",[3,0.069,4,0.061,5,0.061,7,0.165,8,1.009,11,0.016,12,0.581,14,1.88,15,0.735,16,0.163,17,0.368,20,0.069,21,0.108,22,0.737,24,1.88,26,0.006,27,0.006,57,4.36,64,0.793,65,0.841,75,2.066,76,1.056,79,0.575,106,1.077,108,2.336,109,2.743,112,0.841,113,0.65,120,1.883,161,2.524,165,1.308,168,1.862,177,2.22,195,3.273,201,3.389,226,1.413,227,1.413,228,1.413,252,2.396,253,2.542,295,0.972,296,1.082,297,1.968,300,1.656,309,1.024,310,1.082,319,2.394,324,2.618,337,3.458,339,2.204,363,2.858,365,2.877,366,3.131,367,2.086,368,3.966,369,3.144,370,2.665,371,3.144,372,3.144,374,4.256,400,1.221,414,1.308,448,2.488,451,2.488,544,1.024,603,1.147,604,1.147,607,4.244,618,1.308,629,4.256,667,2.78,673,1.719,674,2.285,678,3.5,683,2.78,684,4.021,686,2.78,698,1.976,700,1.719,716,1.719,717,4.643,718,3.21,719,3.21,720,4.643,721,3.21,722,4.643,723,3.21,724,1.984,725,1.984,726,1.984,727,3.21,728,1.984,729,3.21,730,1.984,731,1.984,732,3.21,733,1.984,734,1.984,735,3.21,736,1.984,737,1.984,738,1.719,739,5.978,740,4.643,741,2.665,742,4.553,743,1.719,744,4.021,745,3.21,746,3.21,747,1.855,748,1.984,749,1.984,750,4.042,751,3.21,752,1.984,753,1.984,754,1.984,755,1.984,756,1.984,757,1.984,758,1.984,759,1.984,760,1.984,761,1.984,762,1.984,763,1.984,764,1.984,765,1.984,766,1.984,767,1.984,768,1.984,769,1.984,770,1.544,771,1.984,772,1.719,773,1.984,774,1.984,775,1.984,776,1.984,777,1.984,778,1.984,779,1.984,780,3.21,781,4.042,782,2.116,783,3.21,784,1.984,785,1.984,786,3.21,787,1.984,788,1.984,789,1.984,790,4.042,791,1.984]],["title/injectables/JwtAuthGuard.html",[64,0.959,792,3.02]],["body/injectables/JwtAuthGuard.html",[3,0.204,4,0.179,5,0.179,11,0.015,16,0.241,17,1.083,20,0.204,21,0.319,26,0.013,27,0.013,64,1.701,65,2.473,189,3.847,190,4.154,428,4.538,792,5.354,793,5.053,794,5.053,795,6.883]],["title/injectables/JwtStrategy.html",[64,0.959,274,2.56]],["body/injectables/JwtStrategy.html",[3,0.163,4,0.143,5,0.143,7,0.388,8,1.883,11,0.016,12,0.563,14,1.464,15,0.736,16,0.253,17,0.864,20,0.163,21,0.254,24,1.464,26,0.012,27,0.012,64,1.48,65,1.974,76,1.159,79,0.736,106,0.935,161,2.26,165,3.949,168,2.044,169,3.622,177,1.729,185,3.07,190,3.315,245,3.622,274,3.949,281,6.053,282,3.622,286,4.033,287,4.033,295,2.281,302,3.091,309,3.091,322,3.091,330,4.033,331,5.187,428,3.949,796,4.033,797,5.989,798,5.989,799,5.989,800,4.656,801,5.989,802,4.656,803,4.656,804,4.656,805,4.656,806,4.033,807,4.033,808,4.656,809,4.656,810,4.656,811,4.656,812,4.656,813,4.656,814,4.656]],["title/classes/LoginDto.html",[21,0.212,171,2.56]],["body/classes/LoginDto.html",[3,0.182,4,0.159,5,0.159,7,0.432,10,1.092,11,0.015,12,0.603,15,0.857,16,0.182,20,0.224,21,0.38,26,0.012,27,0.012,71,1.182,74,1.462,79,0.675,81,2.101,96,3.658,100,2.015,101,1.566,106,0.809,134,2.828,171,4.227,194,3.192,307,4.474,309,3.751,322,2.676,498,4.227,507,5.175,514,3.692,815,4.034,816,5.186,817,5.186]],["title/controllers/MilestonesController.html",[0,1.271,818,2.764]],["body/controllers/MilestonesController.html",[0,1.169,2,1.219,3,0.125,4,0.109,5,0.109,7,0.297,8,1.575,10,1.199,11,0.016,12,0.662,14,2.211,15,0.839,16,0.203,17,0.663,20,0.125,21,0.195,22,1.326,24,2.211,26,0.01,27,0.01,76,1.279,77,1.86,79,0.696,106,1.031,158,1.947,161,2.691,168,2.255,177,2.612,181,2.731,182,3.155,319,2.656,401,3.862,415,3.862,549,2.731,550,3.237,552,2.896,553,2.834,554,2.198,567,2.064,568,2.064,569,2.542,570,2.064,577,2.198,818,3.566,819,3.092,820,3.571,821,5.009,822,5.009,823,6.274,824,3.571,825,3.571,826,3.571,827,5.009,828,5.009,829,3.571,830,5.932,831,3.571,832,4.338,833,3.571,834,5.009,835,5.009,836,3.571,837,3.571,838,5.009,839,3.571,840,3.571,841,5.009,842,3.571,843,3.562,844,3.092,845,3.092,846,3.571,847,3.571,848,3.571,849,3.571,850,3.571,851,3.571,852,3.571,853,3.571,854,3.571,855,3.571,856,3.571,857,3.571]],["title/modules/MilestonesModule.html",[28,1.039,43,2.56]],["body/modules/MilestonesModule.html",[2,2.238,3,0.188,4,0.165,5,0.165,11,0.015,16,0.248,17,0.999,20,0.188,21,0.294,26,0.013,27,0.013,28,1.893,30,2.281,31,2.281,32,2.507,33,2.507,34,2.281,35,3.295,36,2.507,43,5.061,48,3.055,49,2.507,50,2.281,818,5.035,843,4.724,844,4.66,858,4.66,859,4.66,860,5.381,861,5.381]],["title/injectables/MilestonesService.html",[64,0.959,843,2.39]],["body/injectables/MilestonesService.html",[3,0.072,4,0.063,5,0.063,7,0.172,8,1.044,11,0.016,12,0.571,14,1.837,15,0.744,16,0.167,17,0.384,20,0.072,21,0.113,22,0.769,24,1.909,26,0.006,27,0.006,64,0.821,65,0.878,76,1.076,77,2.387,79,0.586,85,2.539,106,1.075,108,1.97,109,2.917,112,0.878,113,0.678,128,1.308,161,2.5,165,1.365,168,1.898,177,1.233,195,3.507,201,3.369,232,3.138,252,3.134,253,2.83,295,1.014,296,1.129,297,2.017,300,1.714,310,1.129,319,2.429,324,2.656,337,3.647,339,1.129,374,2.961,401,2.929,403,3.388,404,4.324,405,2.961,415,2.929,537,3.709,544,1.714,549,1.129,553,1.014,595,3.957,603,2.751,604,1.197,613,1.365,668,1.197,741,2.742,742,3.138,747,1.197,782,3.138,830,5.567,843,2.044,845,1.793,862,1.793,863,3.321,864,3.321,865,3.321,866,4.759,867,3.321,868,4.759,869,4.159,870,2.07,871,3.321,872,2.07,873,3.321,874,2.07,875,3.321,876,2.07,877,2.07,878,3.321,879,2.07,880,2.07,881,2.07,882,2.07,883,6.972,884,5.26,885,4.122,886,4.759,887,4.159,888,1.793,889,1.793,890,2.07,891,2.07,892,1.474,893,3.321,894,1.793,895,2.07,896,2.07,897,4.159,898,2.07,899,4.122,900,3.602,901,3.602,902,3.321,903,2.07,904,3.321,905,2.07,906,4.159,907,2.07,908,2.07,909,2.07,910,2.07,911,2.07,912,3.321,913,4.159,914,2.07,915,3.321,916,3.321,917,2.07,918,2.07,919,2.07,920,2.07,921,2.07,922,2.07,923,2.07,924,2.07,925,2.07,926,3.602,927,1.793,928,2.07,929,2.07,930,2.07,931,2.07,932,2.07,933,2.07,934,2.877,935,2.07,936,4.159,937,2.07,938,2.07,939,1.793,940,2.07,941,2.07,942,1.793,943,2.07,944,1.793,945,2.07]],["title/modules/PrismaModule.html",[28,1.039,44,2.56]],["body/modules/PrismaModule.html",[3,0.186,4,0.163,5,0.163,11,0.015,16,0.228,17,0.986,20,0.186,21,0.29,26,0.013,27,0.013,28,1.882,30,2.251,31,2.251,32,2.474,33,2.474,34,2.251,35,3.276,36,3.276,44,5.109,48,3.03,49,2.474,50,2.251,297,3.393,946,4.599,947,4.599,948,4.599,949,5.31,950,6.504,951,5.31]],["title/injectables/PrismaService.html",[64,0.959,297,1.646]],["body/injectables/PrismaService.html",[3,0.2,4,0.175,5,0.175,11,0.016,12,0.538,16,0.238,17,1.061,20,0.2,21,0.312,26,0.013,27,0.013,64,1.681,65,2.424,295,3.556,297,2.883,428,4.485,668,3.305,807,4.953,952,4.953,953,7.26,954,5.718]],["title/controllers/ProductsController.html",[0,1.271,955,2.764]],["body/controllers/ProductsController.html",[0,1.296,2,1.351,3,0.139,4,0.121,5,0.121,7,0.33,8,1.691,10,1.168,11,0.016,12,0.645,14,2.155,15,0.83,16,0.214,17,0.735,20,0.139,21,0.216,22,1.47,24,2.155,26,0.01,27,0.01,76,1.269,79,0.691,106,1.023,158,2.158,161,2.665,168,2.237,177,2.545,181,2.933,182,2.158,319,2.741,370,4.662,416,4.035,427,4.035,549,2.933,550,3.383,551,3.109,552,3.109,553,2.993,554,2.436,555,3.547,567,2.288,568,2.288,570,2.288,577,2.436,955,3.83,956,3.428,957,3.958,958,3.958,959,3.958,960,3.958,961,5.379,962,3.958,963,3.958,964,5.379,965,3.958,966,3.958,967,5.379,968,3.958,969,3.761,970,3.428,971,3.428,972,3.958,973,3.958,974,3.958,975,3.958,976,3.958,977,3.958,978,3.958,979,3.958,980,3.958]],["title/modules/ProductsModule.html",[28,1.039,45,2.56]],["body/modules/ProductsModule.html",[2,2.238,3,0.188,4,0.165,5,0.165,11,0.015,16,0.248,17,0.999,20,0.188,21,0.294,26,0.013,27,0.013,28,1.893,30,2.281,31,2.281,32,2.507,33,2.507,34,2.281,35,3.295,36,2.507,45,5.061,48,3.055,49,2.507,50,2.281,955,5.035,969,4.724,970,4.66,981,4.66,982,4.66,983,5.381,984,5.381]],["title/injectables/ProductsService.html",[64,0.959,969,2.39]],["body/injectables/ProductsService.html",[3,0.102,4,0.089,5,0.089,7,0.241,8,1.355,11,0.016,12,0.6,14,1.913,15,0.771,16,0.199,17,0.538,20,0.102,21,0.158,22,1.077,24,1.913,26,0.008,27,0.008,64,1.065,65,1.229,76,1.178,79,0.641,106,1.143,108,1.355,109,2.832,112,1.229,113,0.95,128,1.913,161,2.543,168,2.077,177,1.6,195,3.501,201,3.287,252,2.939,253,2.836,295,1.42,296,1.581,297,2.414,300,2.224,310,1.581,319,2.688,324,2.58,337,3.601,339,3.105,342,3.518,366,1.581,370,4.571,416,3.505,418,4.001,427,3.505,544,1.496,595,3.926,603,1.676,604,1.676,613,1.912,618,1.912,668,1.676,674,2.064,741,1.912,742,1.912,744,6.11,747,1.676,969,2.653,971,2.511,985,2.511,986,4.31,987,4.31,988,5.695,989,4.31,990,5.144,991,2.9,992,4.31,993,2.9,994,4.31,995,2.9,996,2.9,997,4.31,998,2.9,999,2.9,1000,2.9,1001,4.31,1002,2.9,1003,4.31,1004,2.9,1005,2.9,1006,2.9,1007,5.695,1008,5.144,1009,2.9,1010,5.695,1011,2.9,1012,2.9,1013,4.31,1014,4.31,1015,2.9,1016,2.9,1017,2.9,1018,2.9]],["title/controllers/ProjectsController.html",[0,1.271,1019,2.764]],["body/controllers/ProjectsController.html",[0,1.224,2,1.275,3,0.131,4,0.114,5,0.114,7,0.311,8,1.626,10,1.184,11,0.016,12,0.654,14,2.185,15,0.851,16,0.181,17,0.694,20,0.131,21,0.204,22,1.387,24,2.185,26,0.01,27,0.01,76,1.3,77,2.696,79,0.75,106,1.048,150,2.376,158,2.037,161,2.678,168,2.293,177,2.58,181,2.819,182,2.037,302,2.668,319,2.893,549,2.819,550,3.302,551,2.989,552,2.989,553,2.533,554,2.3,555,3.409,567,2.16,568,2.16,570,2.16,577,2.3,832,4.478,1019,3.681,1020,3.236,1021,3.737,1022,3.737,1023,3.737,1024,3.236,1025,3.737,1026,3.737,1027,5.171,1028,3.737,1029,3.737,1030,5.171,1031,3.737,1032,3.737,1033,5.171,1034,3.737,1035,3.65,1036,3.236,1037,3.737,1038,3.737,1039,3.737,1040,3.737,1041,3.737,1042,3.737,1043,3.737,1044,3.737,1045,3.737,1046,3.737,1047,3.737]],["title/modules/ProjectsModule.html",[28,1.039,46,2.56]],["body/modules/ProjectsModule.html",[2,2.238,3,0.188,4,0.165,5,0.165,11,0.015,16,0.248,17,0.999,20,0.188,21,0.294,26,0.013,27,0.013,28,1.893,30,2.281,31,2.281,32,2.507,33,2.507,34,2.281,35,3.295,36,2.507,46,5.061,48,3.055,49,2.507,50,2.281,1019,5.035,1035,4.724,1036,4.66,1048,4.66,1049,4.66,1050,5.381,1051,5.381]],["title/injectables/ProjectsService.html",[64,0.959,1035,2.39]],["body/injectables/ProjectsService.html",[3,0.06,4,0.053,5,0.053,7,0.143,8,0.899,11,0.016,12,0.508,14,1.604,15,0.832,16,0.1,17,0.32,20,0.06,21,0.094,22,0.64,24,1.902,26,0.006,27,0.006,64,0.707,65,0.731,75,1.728,76,0.988,77,2.631,79,0.596,85,2.664,106,1.041,108,2.258,109,2.4,111,1.476,112,0.731,113,0.564,116,1.054,120,1.332,127,0.889,128,1.995,150,2.305,161,2.357,168,1.741,177,1.894,195,3.683,201,3.347,226,1.227,227,1.227,228,1.227,229,3.14,230,1.341,231,1.341,232,1.136,252,2.633,253,2.819,295,0.844,296,0.94,297,1.808,300,1.476,302,1.476,310,0.94,319,2.726,322,1.476,324,2.565,337,3.299,339,1.559,342,2.466,352,3.848,353,3.848,354,3.848,355,3.848,357,2.036,358,3.037,359,1.227,360,1.227,361,3.368,403,2.036,404,1.227,405,1.227,448,1.061,450,1.136,451,1.061,454,1.061,537,1.227,544,0.889,551,1.653,603,1.653,604,0.996,674,1.227,741,1.885,742,3.563,770,1.341,782,3.729,884,2.477,885,1.493,888,3.694,889,3.694,892,2.036,899,3.694,900,2.477,901,2.477,926,1.493,927,1.493,934,3.694,939,1.493,942,3.694,944,1.493,1024,2.477,1035,1.76,1052,1.493,1053,2.86,1054,2.86,1055,4.266,1056,2.86,1057,2.86,1058,1.724,1059,2.86,1060,1.724,1061,2.86,1062,1.724,1063,1.724,1064,1.724,1065,2.86,1066,1.724,1067,2.86,1068,1.724,1069,2.477,1070,2.86,1071,4.097,1072,1.724,1073,2.86,1074,2.86,1075,3.665,1076,2.86,1077,1.724,1078,1.724,1079,2.86,1080,1.724,1081,1.724,1082,2.86,1083,1.724,1084,3.665,1085,3.665,1086,1.724,1087,2.86,1088,2.86,1089,2.86,1090,2.86,1091,2.86,1092,2.86,1093,1.724,1094,2.86,1095,1.724,1096,1.724,1097,1.724,1098,2.86,1099,2.86,1100,1.724,1101,1.724,1102,1.724,1103,1.724,1104,1.724,1105,1.724,1106,3.665,1107,1.724,1108,3.665,1109,1.724,1110,1.724,1111,1.724,1112,1.724,1113,1.724,1114,2.86,1115,2.86,1116,1.724,1117,2.86,1118,1.724,1119,1.724,1120,1.724,1121,1.724,1122,1.724]],["title/classes/RegisterDto.html",[21,0.212,194,2.39]],["body/classes/RegisterDto.html",[3,0.171,4,0.149,5,0.149,7,0.406,10,1.211,11,0.016,12,0.669,15,0.856,16,0.171,20,0.216,21,0.369,26,0.012,27,0.012,71,1.111,74,1.405,76,1.193,79,0.749,81,2.498,96,3.668,100,1.938,101,1.471,106,1.055,134,2.656,171,3.212,194,3.794,307,4.375,309,3.668,322,3.49,498,4.686,507,5.06,514,3.468,815,3.789,1123,4.871,1124,4.871,1125,4.871,1126,4.871,1127,4.871]],["title/classes/TaskDto.html",[21,0.212,1128,2.56]],["body/classes/TaskDto.html",[3,0.148,4,0.13,5,0.13,7,0.352,10,1.148,11,0.016,12,0.634,15,0.818,16,0.148,20,0.221,21,0.345,26,0.011,27,0.011,71,0.965,73,2.447,74,1.283,78,1.88,79,0.76,80,2.561,82,2.499,85,2.922,90,2.791,94,2.897,95,1.445,103,2.604,104,2.757,105,2.757,106,1.051,114,2.074,116,1.562,127,2.185,128,1.769,136,3.068,140,2.499,142,2.973,143,2.946,144,2.946,146,2.904,150,2.347,152,2.185,324,2.68,522,2.606,747,3.253,1128,4.442,1129,4.993,1130,4.234,1131,4.234,1132,4.624,1133,4.378,1134,4.234,1135,4.234,1136,3.293,1137,2.606,1138,3.293]],["title/classes/TaskInput.html",[21,0.212,89,2.56]],["body/classes/TaskInput.html",[3,0.162,4,0.141,5,0.141,7,0.384,10,0.786,11,0.016,12,0.434,15,0.835,16,0.231,20,0.208,21,0.394,26,0.012,27,0.012,28,1.235,70,2.049,71,1.052,72,4.239,73,2.667,74,1.357,75,1.869,77,1.713,78,2.644,79,0.734,80,1.869,81,1.869,82,2.644,85,1.869,86,2.84,89,4.754,94,2.912,95,1.575,96,3.229,97,4.346,98,2.916,99,2.916,100,1.872,101,1.393,102,1.956,103,2.677,104,2.916,105,2.916,106,1.029,107,2.26,108,1.45,109,2.049,110,2.84,111,2.381,112,1.956,113,1.511,114,2.26,115,3.042,116,1.14,1139,4.614,1140,4.614]],["title/classes/TaskNameDto.html",[21,0.212,126,2.39]],["body/classes/TaskNameDto.html",[3,0.145,4,0.127,5,0.127,7,0.345,10,0.707,11,0.016,12,0.39,15,0.774,16,0.219,20,0.244,21,0.392,26,0.011,27,0.011,70,1.841,71,0.945,74,1.265,75,1.68,77,1.539,78,2.465,79,0.704,80,1.68,82,2.778,85,1.68,94,2.921,95,1.415,96,2.718,98,2.718,99,2.718,100,1.745,101,1.252,102,1.758,103,2.762,104,2.718,105,2.031,106,0.976,107,2.031,108,1.304,114,2.031,116,1.546,118,3.416,119,2.552,120,1.932,126,4.287,128,1.304,129,2.952,132,3.951,133,2.779,134,2.261,135,3.416,136,3.026,137,2.552,138,2.552,139,2.952,140,2.465,141,3.851,142,2.832,143,2.915,144,2.915,145,2.261,146,2.14,147,2.952,148,2.734,149,2.952,150,1.539,151,2.261,152,2.14,153,2.952,1141,4.146,1142,4.146]],["title/classes/TaskProjectDto.html",[21,0.212,1132,2.56]],["body/classes/TaskProjectDto.html",[3,0.164,4,0.143,5,0.143,7,0.389,10,0.797,11,0.016,12,0.44,15,0.805,16,0.164,20,0.232,21,0.362,26,0.012,27,0.012,71,1.067,73,2.704,74,1.37,78,2.078,79,0.699,80,1.895,82,2.078,85,2.837,94,2.959,95,1.597,103,2.689,104,2.291,105,2.291,106,1.093,114,2.291,116,1.639,128,1.471,136,2.551,140,2.078,142,2.968,143,3.092,144,3.092,146,2.414,150,1.737,152,2.414,324,1.983,522,2.88,747,2.704,1128,4.375,1129,4.277,1132,4.617,1133,3.639,1136,4.673,1137,2.88,1138,3.639,1143,4.678]],["title/classes/TaskStatusCountDto.html",[21,0.212,151,2.117]],["body/classes/TaskStatusCountDto.html",[3,0.139,4,0.122,5,0.122,7,0.33,10,1.042,11,0.016,12,0.575,15,0.729,16,0.214,20,0.24,21,0.386,26,0.01,27,0.01,70,1.761,71,0.904,74,1.228,75,1.607,77,1.473,78,2.392,79,0.745,80,2.478,82,2.716,85,1.607,94,2.894,95,1.354,96,2.638,98,2.638,99,2.638,100,1.693,101,1.197,102,1.681,103,2.734,104,1.943,105,1.943,106,0.619,107,1.943,108,1.247,114,2.638,116,1.748,118,4.038,119,2.441,120,1.848,126,4.038,128,1.247,129,2.824,132,3.835,133,2.743,134,2.162,135,3.315,136,2.162,137,2.441,138,2.441,139,2.824,140,2.392,141,3.765,142,2.999,143,3.196,144,3.196,145,2.162,146,2.047,147,2.824,148,2.615,149,2.824,150,1.473,151,2.937,152,2.779,153,3.835,1144,3.966,1145,3.966,1146,3.966]],["title/classes/TaskStatusCountsDto.html",[21,0.212,531,2.764]],["body/classes/TaskStatusCountsDto.html",[3,0.161,4,0.141,5,0.141,7,0.382,10,1.121,11,0.016,12,0.619,16,0.161,20,0.161,21,0.324,26,0.011,27,0.011,71,1.047,74,1.353,79,0.732,80,2.665,94,3.026,95,1.567,103,2.853,116,1.94,142,2.788,143,3.065,144,3.065,152,3.063,317,3.431,517,2.827,518,5.408,519,3.572,520,3.572,521,3.572,522,2.827,523,3.572,524,3.572,525,3.572,526,3.572,527,3.977,529,3.977,531,4.95,533,3.977,535,3.977,537,3.27,539,3.27,541,5.141,1147,4.592,1148,4.592,1149,4.592]],["title/classes/UpdateExpenseDto.html",[21,0.212,400,2.39]],["body/classes/UpdateExpenseDto.html",[3,0.107,4,0.094,5,0.094,7,0.254,10,1.261,11,0.016,12,0.696,15,0.876,16,0.157,20,0.157,21,0.319,26,0.009,27,0.009,71,0.696,74,1.021,75,2.366,76,1.522,77,2.168,79,0.813,100,2.435,101,0.922,102,1.295,113,1.737,116,1.88,133,2.914,140,1.356,142,1.898,150,2.168,343,3.209,344,3.065,347,3.881,349,2.736,363,1.88,364,2.174,365,4.427,366,3.184,367,3.014,368,4.542,369,4.542,370,3.85,371,4.542,372,4.542,373,5.385,374,4.427,387,2.645,388,2.645,390,4.542,391,2.645,394,3.775,395,2.645,396,4.592,397,3.483,398,3.483,399,3.878,400,2.757,406,2.174,1150,4.478,1151,3.054,1152,3.054,1153,3.054,1154,3.054,1155,3.054,1156,3.054,1157,3.054,1158,3.054,1159,3.054,1160,3.054,1161,3.054,1162,3.054,1163,3.054,1164,3.054]],["title/classes/UpdateMilestoneDto.html",[21,0.212,415,2.39]],["body/classes/UpdateMilestoneDto.html",[3,0.151,4,0.133,5,0.133,7,0.36,10,1.236,11,0.016,12,0.682,15,0.881,16,0.151,20,0.2,21,0.349,26,0.011,27,0.011,71,0.986,74,1.301,76,1.506,77,2.523,79,0.764,100,2.361,101,1.306,106,1.06,116,1.579,128,2.136,133,2.868,347,3.693,349,3.645,394,4.549,401,2.662,402,3.364,403,4.837,404,4.837,405,4.837,406,4.064,413,3.746,414,2.852,415,3.513,1165,4.325,1166,4.325,1167,4.325,1168,4.325,1169,4.325,1170,4.325,1171,4.325]],["title/classes/UpdateProductDto.html",[21,0.212,427,2.39]],["body/classes/UpdateProductDto.html",[3,0.19,4,0.166,5,0.166,11,0.015,15,0.789,16,0.231,20,0.231,21,0.388,26,0.013,27,0.013,71,1.237,100,2.231,101,1.638,106,0.846,113,1.777,116,1.628,128,1.705,133,2.862,342,3.136,343,3.4,344,3.136,416,3.339,417,4.22,418,5.125,424,4.698,425,4.22,426,4.22,427,4.056,428,4.345,429,5.707]],["title/classes/UpdateProjectDto.html",[21,0.212,362,2.56]],["body/classes/UpdateProjectDto.html",[3,0.117,4,0.102,5,0.102,7,0.277,10,1.223,11,0.016,12,0.675,15,0.875,16,0.167,20,0.167,21,0.351,26,0.009,27,0.009,71,0.759,74,1.087,76,1.498,79,0.784,92,2.369,98,3.151,99,2.727,100,2.379,101,1.005,102,1.411,106,0.949,107,2.977,108,2.023,111,2.459,113,2.192,116,1.742,120,1.551,128,2.023,133,2.912,150,2.257,229,2.933,340,4.413,341,2.369,342,1.923,343,3.137,344,3.514,347,3.514,349,3.32,350,2.588,351,2.194,352,4.328,353,4.328,354,4.328,355,4.907,356,3.707,357,3.393,358,4.328,359,2.369,360,2.369,361,4.328,362,3.142,406,3.393,419,2.882,1172,3.328,1173,3.328,1174,3.328,1175,3.328,1176,3.328,1177,3.328,1178,3.328,1179,3.328,1180,3.328,1181,3.328,1182,3.328]],["title/classes/UpdateTaskStatusDto.html",[21,0.212,145,2.117]],["body/classes/UpdateTaskStatusDto.html",[3,0.141,4,0.123,5,0.123,7,0.335,10,0.928,11,0.016,12,0.512,15,0.767,16,0.216,20,0.241,21,0.388,26,0.011,27,0.011,70,1.79,71,0.919,74,1.241,75,1.633,77,1.496,78,2.418,79,0.727,80,2.206,82,2.933,85,1.633,94,2.904,95,1.375,96,2.667,98,2.667,99,2.667,100,1.712,101,1.217,102,1.708,103,2.744,104,1.974,105,1.974,106,0.629,107,1.974,108,1.267,114,1.974,116,1.524,118,3.796,119,2.48,120,1.878,126,4.065,128,1.267,129,2.869,132,3.876,133,2.756,134,2.197,135,3.351,136,2.197,137,2.48,138,2.48,139,2.869,140,2.738,141,4.065,142,2.924,143,2.873,144,2.873,145,2.968,146,2.81,147,2.869,148,4.066,149,2.869,150,2.29,151,2.197,152,2.079,153,2.869,1183,4.03,1184,4.03,1185,4.03,1186,4.03]],["title/classes/UpdateUserDto.html",[21,0.212,1187,2.56]],["body/classes/UpdateUserDto.html",[3,0.095,4,0.083,5,0.083,7,0.226,10,1.264,11,0.016,12,0.698,15,0.868,16,0.143,20,0.095,21,0.224,26,0.008,27,0.008,71,0.618,74,0.934,76,1.524,79,0.782,81,2.231,82,1.82,95,0.925,97,2.702,100,2.349,101,0.819,103,2.791,116,1.013,123,5.677,127,1.399,133,2.639,134,1.478,135,4.598,137,2.523,140,1.204,307,3.041,309,2.55,317,2.369,322,2.55,343,2.115,349,2.55,367,2.55,414,1.788,444,1.93,445,3.518,446,3.518,447,3.518,448,3.041,449,3.518,450,3.258,451,3.041,452,3.518,453,3.518,454,3.041,455,3.518,456,3.518,457,3.55,458,2.348,461,2.348,463,2.348,464,3.55,465,3.55,466,3.55,467,3.55,468,2.348,469,2.348,470,3.55,471,4.284,477,2.109,479,3.55,482,3.55,483,2.348,485,2.348,489,2.348,490,2.348,493,2.348,496,2.348,497,2.348,498,3.899,499,2.348,500,2.348,501,2.348,502,2.348,505,2.348,507,2.918,508,2.348,509,2.348,510,2.348,513,2.348,514,1.93,515,2.348,516,2.348,1187,2.702,1188,6.47,1189,2.711,1190,2.711,1191,2.711,1192,2.711,1193,4.098,1194,2.711,1195,2.711,1196,2.711,1197,2.711,1198,2.711,1199,2.711,1200,2.711,1201,2.711,1202,2.711,1203,2.711,1204,2.711,1205,2.711,1206,2.711,1207,2.711,1208,2.711,1209,2.711,1210,2.711,1211,2.711,1212,2.711,1213,2.711,1214,2.711]],["title/classes/UserResponseDto.html",[21,0.212,1215,2.56]],["body/classes/UserResponseDto.html",[3,0.121,4,0.106,5,0.106,7,0.287,10,1.312,11,0.016,12,0.724,15,0.887,16,0.121,20,0.121,21,0.188,26,0.009,27,0.009,71,0.786,74,1.114,76,1.196,79,0.811,81,2.3,86,3.008,94,3.105,95,1.177,109,2.743,116,1.208,127,1.779,140,1.531,309,2.93,322,2.93,324,2.407,367,2.93,445,4.042,446,4.042,447,4.042,448,3.495,449,4.042,450,3.743,451,3.495,452,4.042,453,4.042,454,3.495,455,4.042,456,4.042,498,3.743,1215,3.222,1216,6.702,1217,2.986,1218,3.448,1219,3.448,1220,4.887,1221,3.448,1222,3.448,1223,3.448,1224,3.448,1225,3.448,1226,3.448,1227,3.448,1228,3.448,1229,3.448,1230,3.448,1231,3.448,1232,3.448,1233,3.448,1234,3.448,1235,3.448]],["title/controllers/UsersController.html",[0,1.271,1236,2.764]],["body/controllers/UsersController.html",[0,0.607,2,1.036,3,0.065,4,0.057,5,0.137,7,0.154,8,0.954,10,1.057,11,0.016,12,0.583,14,1.95,15,0.813,16,0.241,17,0.344,20,0.065,21,0.101,22,0.688,23,1.319,24,1.95,26,0.006,27,0.006,70,2.184,75,2.359,76,1.127,78,2.754,79,0.771,81,2.867,95,0.632,106,0.991,110,2.373,111,2.3,112,2.629,115,2.542,120,1.414,127,1.989,128,2.312,138,2.373,145,2.43,146,3.11,150,1.962,151,2.102,158,1.01,161,2.562,168,1.987,169,1.441,177,1.962,181,2.88,182,1.655,185,2.542,201,1.414,253,1.414,319,1.728,324,2.914,442,3.839,454,1.14,517,2.373,542,2.542,544,1.566,549,2.682,550,2.3,551,1.754,552,1.754,553,2.588,567,2.577,568,1.071,569,1.319,570,1.071,595,3.584,615,2.628,668,1.071,770,2.361,892,2.745,1137,2.373,1187,3.839,1215,2.939,1236,2.161,1237,1.604,1238,1.852,1239,4.458,1240,2.628,1241,3.035,1242,3.339,1243,3.855,1244,3.035,1245,1.852,1246,1.852,1247,3.035,1248,6.599,1249,4.458,1250,1.852,1251,1.852,1252,3.035,1253,1.852,1254,1.852,1255,1.852,1256,1.852,1257,1.852,1258,3.855,1259,1.852,1260,1.852,1261,4.458,1262,1.852,1263,3.035,1264,3.035,1265,1.852,1266,1.852,1267,1.852,1268,1.852,1269,3.035,1270,3.339,1271,1.852,1272,1.852,1273,1.852,1274,1.852,1275,1.852,1276,1.852,1277,1.852,1278,1.852,1279,3.035,1280,1.852,1281,1.852,1282,4.458,1283,1.852,1284,1.852,1285,1.852,1286,1.852,1287,1.852,1288,1.852,1289,1.852,1290,1.852,1291,1.852,1292,1.604,1293,3.035,1294,1.852,1295,1.852,1296,1.852,1297,3.035,1298,1.852,1299,1.852,1300,3.035,1301,1.852,1302,3.035,1303,1.852,1304,3.035,1305,1.852,1306,1.852,1307,3.035,1308,3.035,1309,2.373,1310,1.604,1311,1.604,1312,3.339,1313,1.604,1314,1.604,1315,1.604,1316,1.852,1317,1.604,1318,3.035,1319,1.604,1320,1.852,1321,1.852,1322,1.852,1323,3.035,1324,3.035,1325,5.822,1326,6.484,1327,4.458,1328,4.458,1329,1.604,1330,1.604,1331,1.604,1332,1.604,1333,1.604,1334,1.852,1335,3.035,1336,1.852,1337,1.852,1338,1.852,1339,1.852,1340,1.852,1341,1.852,1342,1.852,1343,1.852,1344,1.852,1345,1.852,1346,1.852,1347,1.852,1348,1.852,1349,1.852,1350,1.852,1351,3.035,1352,1.852,1353,1.852,1354,1.852,1355,1.852,1356,1.852,1357,1.852,1358,1.852,1359,1.852,1360,1.852,1361,1.852,1362,1.852,1363,1.852,1364,1.852,1365,1.852,1366,1.852,1367,1.852,1368,1.852,1369,3.035,1370,1.852,1371,1.852,1372,1.852,1373,1.852,1374,1.852,1375,1.852]],["title/modules/UsersModule.html",[28,1.039,47,2.56]],["body/modules/UsersModule.html",[2,2.195,3,0.183,4,0.16,5,0.16,11,0.016,16,0.244,17,0.968,20,0.183,21,0.285,26,0.012,27,0.012,28,1.867,30,2.21,31,2.21,32,2.429,33,2.429,34,2.21,35,3.249,36,3.249,47,5.089,48,2.996,49,2.429,50,2.21,1236,4.965,1309,4.915,1310,4.515,1376,4.515,1377,4.515,1378,4.515,1379,5.213,1380,5.213]],["title/injectables/UsersService.html",[64,0.959,1309,2.39]],["body/injectables/UsersService.html",[3,0.051,4,0.044,5,0.044,7,0.121,8,0.778,11,0.016,12,0.55,14,1.785,15,0.737,16,0.199,17,0.269,20,0.051,21,0.079,22,0.539,24,1.785,26,0.005,27,0.005,64,0.612,65,0.615,70,1.698,75,2.578,76,1.061,77,1.419,78,2.074,79,0.577,81,2.618,85,0.588,86,0.894,106,0.936,108,1.568,109,2.977,111,0.749,112,1.049,113,0.811,115,2.133,116,0.359,120,0.676,127,1.277,138,1.523,141,1.523,142,1.62,143,1.781,144,1.781,145,2.084,146,1.277,148,2.133,150,2.515,151,0.791,161,2.47,168,1.87,177,0.539,195,3.421,201,3.322,226,1.033,227,1.033,228,1.033,229,0.894,230,1.129,231,1.129,232,2.52,252,2.828,253,3.089,256,1.257,295,0.711,296,0.791,297,1.62,300,1.277,307,1.523,309,1.67,310,0.791,311,1.925,315,2.144,317,1.431,318,1.257,319,2.467,322,2.573,324,2.544,326,2.802,337,3.692,338,3.715,339,0.791,365,1.033,366,1.349,367,1.277,442,2.52,445,1.762,446,1.762,447,1.762,448,1.523,449,1.762,450,1.632,451,1.523,452,1.762,453,1.762,454,0.894,455,1.762,456,1.762,471,1.129,517,0.894,520,1.925,521,1.925,522,1.523,523,1.129,524,1.925,525,1.925,526,1.925,539,1.033,542,0.957,544,0.749,550,1.973,595,4.081,603,0.839,604,0.839,607,1.129,613,0.957,618,0.957,668,0.839,741,1.632,742,2.133,743,2.802,747,1.87,772,1.257,782,3.613,892,2.721,1069,1.257,1071,2.144,1187,2.52,1215,0.957,1240,2.144,1242,2.802,1270,2.144,1292,1.257,1309,1.523,1311,1.257,1312,2.802,1313,1.257,1314,1.257,1315,1.257,1329,1.257,1330,1.257,1331,1.257,1332,1.257,1333,1.257,1381,1.257,1382,2.475,1383,2.475,1384,2.475,1385,3.823,1386,2.475,1387,2.475,1388,2.475,1389,1.452,1390,2.475,1391,1.452,1392,2.475,1393,2.475,1394,1.452,1395,2.475,1396,1.452,1397,1.452,1398,2.475,1399,1.452,1400,1.452,1401,2.475,1402,1.452,1403,1.452,1404,2.475,1405,1.452,1406,2.475,1407,1.452,1408,3.823,1409,3.235,1410,1.452,1411,2.475,1412,3.823,1413,2.475,1414,1.452,1415,1.452,1416,2.475,1417,2.475,1418,2.475,1419,2.475,1420,2.475,1421,2.475,1422,2.475,1423,2.475,1424,2.475,1425,2.475,1426,2.475,1427,1.452,1428,2.475,1429,2.475,1430,1.452,1431,1.452,1432,3.235,1433,1.452,1434,1.452,1435,1.257,1436,1.452,1437,1.452,1438,1.452,1439,2.475,1440,1.452,1441,1.452,1442,1.452,1443,1.452,1444,1.452,1445,1.452,1446,1.452,1447,1.452,1448,1.452,1449,1.452,1450,1.452,1451,1.452,1452,1.452,1453,1.452,1454,1.452,1455,1.452,1456,1.452,1457,1.452,1458,1.452,1459,2.475,1460,1.452,1461,1.452,1462,1.452,1463,2.475,1464,1.452,1465,1.452,1466,1.452,1467,1.452,1468,1.452,1469,1.452,1470,1.452,1471,1.452,1472,2.475,1473,2.475,1474,2.475,1475,3.235,1476,2.475,1477,1.452,1478,1.452,1479,3.235,1480,2.475,1481,1.452,1482,1.452,1483,2.475,1484,1.452,1485,2.475,1486,3.823,1487,4.29,1488,1.452,1489,1.452,1490,1.452,1491,1.452,1492,1.452,1493,2.475,1494,2.475,1495,1.452,1496,2.475,1497,1.452,1498,1.452,1499,1.452,1500,1.452,1501,1.452,1502,1.452,1503,1.452,1504,1.452,1505,1.452,1506,1.452,1507,1.452,1508,1.452,1509,1.452,1510,1.452,1511,1.452,1512,1.452,1513,1.452,1514,1.452]],["title/classes/ViewAssignedTaskResponseDto.html",[21,0.212,1137,2.39]],["body/classes/ViewAssignedTaskResponseDto.html",[3,0.159,4,0.139,5,0.139,7,0.379,10,1.006,11,0.016,12,0.555,15,0.77,16,0.159,20,0.229,21,0.358,26,0.011,27,0.011,71,1.038,73,2.63,74,1.345,78,2.908,79,0.756,80,1.844,82,2.021,85,2.653,90,3.001,93,3.941,94,2.943,95,1.553,103,2.666,104,2.229,105,2.229,106,0.921,114,2.229,116,1.618,127,3.045,128,1.431,136,2.481,140,2.021,142,2.937,143,3.051,144,3.051,146,2.348,150,1.69,152,2.348,302,2.348,324,1.929,522,4.031,747,2.63,1128,4.569,1129,4.662,1132,4.318,1133,3.54,1136,3.54,1137,3.632,1138,3.54,1515,4.551]],["title/coverage.html",[1516,4.129]],["body/coverage.html",[0,2.31,1,2.412,5,0.095,6,2.686,11,0.016,18,2.208,21,0.431,26,0.009,27,0.009,34,1.315,58,2.986,64,1.815,66,2.686,70,2.011,72,3.809,73,3.777,79,0.327,89,2.045,110,1.909,118,3.621,119,3.621,126,1.909,145,1.691,151,1.691,156,2.208,157,2.686,171,2.045,186,1.909,189,2.045,194,1.909,235,2.412,237,2.686,253,1.445,274,2.045,293,2.686,297,1.315,340,2.045,341,3.809,351,2.045,362,2.045,363,1.909,364,3.224,400,1.909,401,1.909,402,3.523,415,1.909,416,1.909,417,3.523,427,1.909,442,2.045,443,2.686,444,3.809,517,1.909,518,3.523,519,3.523,531,2.208,542,2.045,543,2.686,546,2.208,547,2.686,571,1.909,587,2.686,619,2.208,620,3.224,621,2.686,636,1.909,651,2.686,680,2.208,681,2.686,698,1.909,716,2.686,782,5.346,792,2.412,793,2.686,794,2.686,796,2.686,815,3.523,818,2.208,819,2.686,843,1.909,862,2.686,952,2.686,955,2.208,956,2.686,969,1.909,985,2.686,1019,2.208,1020,2.686,1035,1.909,1052,2.686,1128,2.045,1129,3.809,1132,2.045,1137,1.909,1187,2.045,1188,2.686,1215,2.045,1216,2.686,1217,2.686,1236,2.208,1237,2.686,1309,1.909,1381,2.686,1516,2.412,1517,2.686,1518,3.101,1519,3.101,1520,6.916,1521,6.534,1522,5.883,1523,6.257,1524,5.349,1525,5.349,1526,6.534,1527,4.529,1528,4.529,1529,5.349,1530,2.686,1531,3.101,1532,5.349,1533,5.349,1534,3.101,1535,3.101,1536,3.101,1537,3.101,1538,3.101]],["title/dependencies.html",[31,1.98,1539,2.804]],["body/dependencies.html",[11,0.016,17,0.953,21,0.348,26,0.012,27,0.012,31,2.176,95,1.752,101,1.55,102,2.176,136,2.799,185,4.2,190,3.655,245,3.993,278,3.993,282,3.993,300,2.649,311,3.993,366,2.799,425,3.993,426,3.993,668,2.967,738,4.446,806,5.516,1317,4.446,1319,4.446,1540,6.37,1541,5.133,1542,5.133,1543,5.133,1544,5.133,1545,5.133,1546,5.133,1547,5.133,1548,6.37,1549,5.133,1550,5.133,1551,5.133,1552,5.133,1553,5.133,1554,5.133,1555,5.133,1556,5.133,1557,5.133,1558,5.133,1559,5.133,1560,5.133,1561,5.133,1562,5.133,1563,5.133,1564,5.133,1565,5.133]],["title/miscellaneous/enumerations.html",[1566,2.305,1567,4.046]],["body/miscellaneous/enumerations.html",[7,0.472,11,0.015,26,0.013,27,0.013,118,3.49,119,4.165,141,4.165,142,3.176,143,3.153,144,3.153,364,4.037,390,5.264,397,5.264,398,5.264,1566,4.037,1567,4.911,1568,5.67,1569,5.67,1570,7.769]],["title/miscellaneous/functions.html",[1566,2.305,1571,4.046]],["body/miscellaneous/functions.html",[7,0.514,11,0.014,26,0.014,27,0.014,34,3.177,1530,5.349,1566,4.397,1571,5.349,1572,6.176]],["title/index.html",[7,0.269,1573,3.237,1574,3.237]],["body/index.html",[4,0.111,11,0.015,26,0.01,27,0.01,50,2.914,85,2.554,103,2.34,128,1.135,210,4.371,477,2.807,894,5.953,1435,3.126,1516,2.807,1517,4.371,1575,3.609,1576,3.609,1577,5.82,1578,5.047,1579,3.609,1580,3.609,1581,3.609,1582,3.609,1583,5.047,1584,5.82,1585,3.609,1586,3.609,1587,3.609,1588,3.609,1589,7.199,1590,3.609,1591,7.055,1592,3.609,1593,3.609,1594,3.609,1595,5.047,1596,3.609,1597,3.609,1598,5.82,1599,3.609,1600,5.047,1601,3.609,1602,3.609,1603,3.609,1604,3.609,1605,3.609,1606,6.303,1607,7.199,1608,6.873,1609,3.609,1610,5.047,1611,3.609,1612,3.609,1613,3.609,1614,3.609,1615,3.609,1616,5.047,1617,6.303,1618,3.609,1619,5.047,1620,3.609,1621,3.609,1622,5.047,1623,6.633,1624,6.303,1625,3.609,1626,5.047,1627,3.609,1628,3.609,1629,3.609,1630,3.609,1631,6.303,1632,3.609,1633,3.609,1634,3.609,1635,3.609,1636,3.609,1637,5.047,1638,3.609,1639,3.609,1640,3.609,1641,3.609,1642,3.609,1643,5.047,1644,3.609,1645,3.609,1646,3.609,1647,5.047,1648,3.609,1649,3.609,1650,5.459,1651,5.047,1652,3.609,1653,3.609,1654,3.609,1655,3.609,1656,3.609,1657,3.609,1658,3.609,1659,3.609,1660,5.047,1661,3.609,1662,3.609,1663,3.609,1664,3.609,1665,5.82,1666,3.609,1667,3.609,1668,3.609,1669,3.609,1670,3.609,1671,3.609,1672,5.047,1673,3.609,1674,3.609,1675,3.609,1676,3.609,1677,5.047,1678,3.609,1679,3.609,1680,3.609,1681,5.047,1682,5.047,1683,3.609,1684,3.609,1685,3.609,1686,3.609,1687,3.609,1688,3.609,1689,3.609,1690,3.609,1691,3.609,1692,3.609,1693,3.609,1694,3.126,1695,3.609,1696,3.609,1697,3.609,1698,3.609,1699,3.126]],["title/modules.html",[30,2.25]],["body/modules.html",[11,0.013,26,0.013,27,0.013,29,3.883,30,2.312,39,3.596,40,3.596,41,3.596,42,3.596,43,3.596,44,3.596,45,3.596,46,3.596,47,3.596,1650,6.896,1700,7.962,1701,7.962,1702,7.962]],["title/overview.html",[1703,4.597]],["body/overview.html",[2,1.401,11,0.016,26,0.011,27,0.011,28,1.098,29,5.677,30,1.74,31,1.74,32,1.912,33,1.912,34,1.74,35,1.912,36,1.912,37,3.554,38,3.554,39,4.814,40,4.576,41,4.576,42,4.576,43,4.576,44,4.712,45,4.576,46,4.576,47,4.712,48,2.568,49,1.912,50,1.74,65,1.74,71,0.936,117,2.922,186,3.831,235,3.192,272,3.554,273,3.554,274,4.104,297,3.095,317,2.372,539,2.922,571,3.831,583,3.554,584,3.554,636,3.831,647,3.554,648,3.554,698,3.831,712,3.554,713,3.554,843,3.831,858,3.554,859,3.554,946,3.554,947,3.554,948,3.554,969,3.831,981,3.554,982,3.554,1035,3.831,1048,3.554,1049,3.554,1309,4.494,1376,3.554,1377,3.554,1378,3.554,1703,3.554,1704,4.104,1705,4.104]],["title/properties.html",[74,1.065,1539,2.804]],["body/properties.html",[11,0.015,26,0.014,27,0.014,74,1.395,128,1.924,1694,5.3,1699,5.3,1706,6.12,1707,6.12,1708,6.12]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AssignTaskDto.html":{},"classes/AssignTaskDto-1.html":{},"classes/AssignTaskResponseDto.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CostAllocationDto.html":{},"classes/CreateExpenseDto.html":{},"classes/CreateMilestoneDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateProjectWithAllocationsDto.html":{},"classes/CreateUserDto.html":{},"classes/DashboardCountsDto.html":{},"classes/DeleteUserResponseDto.html":{},"controllers/DepartmentsController.html":{},"modules/DepartmentsModule.html":{},"injectables/DepartmentsService.html":{},"controllers/ExpenseCategoryController.html":{},"modules/ExpenseCategoryModule.html":{},"injectables/ExpenseCategoryService.html":{},"controllers/ExpensesController.html":{},"modules/ExpensesModule.html":{},"injectables/ExpensesService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"controllers/MilestonesController.html":{},"modules/MilestonesModule.html":{},"injectables/MilestonesService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"injectables/ProjectsService.html":{},"classes/RegisterDto.html":{},"classes/TaskDto.html":{},"classes/TaskInput.html":{},"classes/TaskNameDto.html":{},"classes/TaskProjectDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/TaskStatusCountsDto.html":{},"classes/UpdateExpenseDto.html":{},"classes/UpdateMilestoneDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ViewAssignedTaskResponseDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":782,"title":{},"body":{"injectables/ExpensesService.html":{},"injectables/MilestonesService.html":{},"injectables/ProjectsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1707,"title":{},"body":{"properties.html":{}}}],["0.14.2",{"_index":1551,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":1561,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1550,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":1557,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1524,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1529,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1534,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":1527,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":1533,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1520,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1523,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1521,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1522,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1525,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1526,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1532,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1528,"title":{},"body":{"coverage.html":{}}}],["01",{"_index":471,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UsersService.html":{}}}],["01'})@isoptional()@isdatestring",{"_index":1193,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["01t00:00:00.000z",{"_index":1495,"title":{},"body":{"injectables/UsersService.html":{}}}],["1",{"_index":117,"title":{"classes/AssignTaskDto-1.html":{}},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"overview.html":{}}}],["1.4.7",{"_index":1554,"title":{},"body":{"dependencies.html":{}}}],["1/12",{"_index":1536,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/DashboardCountsDto.html":{},"classes/TaskStatusCountsDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["100",{"_index":537,"title":{},"body":{"classes/DashboardCountsDto.html":{},"injectables/MilestonesService.html":{},"injectables/ProjectsService.html":{},"classes/TaskStatusCountsDto.html":{}}}],["1000",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{}}}],["11.0.0",{"_index":1543,"title":{},"body":{"dependencies.html":{}}}],["11.0.1",{"_index":1540,"title":{},"body":{"dependencies.html":{}}}],["11.0.5",{"_index":1545,"title":{},"body":{"dependencies.html":{}}}],["11.1.1",{"_index":1546,"title":{},"body":{"dependencies.html":{}}}],["11.2.0",{"_index":1547,"title":{},"body":{"dependencies.html":{}}}],["1111",{"_index":1415,"title":{},"body":{"injectables/UsersService.html":{}}}],["12",{"_index":539,"title":{},"body":{"classes/DashboardCountsDto.html":{},"classes/TaskStatusCountsDto.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["123",{"_index":137,"title":{},"body":{"classes/AssignTaskDto-1.html":{},"classes/CreateUserDto.html":{},"classes/TaskNameDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{}}}],["123'})@isstring",{"_index":121,"title":{},"body":{"classes/AssignTaskDto-1.html":{}}}],["15",{"_index":541,"title":{},"body":{"classes/DashboardCountsDto.html":{},"classes/TaskStatusCountsDto.html":{}}}],["1d",{"_index":291,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["1e9",{"_index":1348,"title":{},"body":{"controllers/UsersController.html":{}}}],["2",{"_index":1138,"title":{},"body":{"classes/TaskDto.html":{},"classes/TaskProjectDto.html":{},"classes/ViewAssignedTaskResponseDto.html":{}}}],["2.0.0",{"_index":1556,"title":{},"body":{"dependencies.html":{}}}],["2.1.0",{"_index":1544,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":529,"title":{},"body":{"classes/DashboardCountsDto.html":{},"classes/TaskStatusCountsDto.html":{}}}],["2000",{"_index":470,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["201",{"_index":1261,"title":{},"body":{"controllers/UsersController.html":{}}}],["2023",{"_index":479,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["24",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{}}}],["27",{"_index":1705,"title":{},"body":{"overview.html":{}}}],["3",{"_index":114,"title":{},"body":{"classes/AssignTaskDto.html":{},"classes/AssignTaskDto-1.html":{},"classes/AssignTaskResponseDto.html":{},"classes/TaskDto.html":{},"classes/TaskInput.html":{},"classes/TaskNameDto.html":{},"classes/TaskProjectDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/ViewAssignedTaskResponseDto.html":{}}}],["31t23:59:59.999z",{"_index":1497,"title":{},"body":{"injectables/UsersService.html":{}}}],["4",{"_index":535,"title":{},"body":{"classes/DashboardCountsDto.html":{},"classes/TaskStatusCountsDto.html":{}}}],["4.0.1",{"_index":1558,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":1541,"title":{},"body":{"dependencies.html":{}}}],["4.1.0",{"_index":1555,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":1263,"title":{},"body":{"controllers/UsersController.html":{}}}],["422101",{"_index":493,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["422101'})@isoptional()@ispostalcode('in",{"_index":1208,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["456",{"_index":139,"title":{},"body":{"classes/AssignTaskDto-1.html":{},"classes/TaskNameDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/UpdateTaskStatusDto.html":{}}}],["456'})@isoptional()@isstring",{"_index":124,"title":{},"body":{"classes/AssignTaskDto-1.html":{}}}],["4d2f",{"_index":466,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["5",{"_index":152,"title":{},"body":{"classes/AssignTaskDto-1.html":{},"classes/DashboardCountsDto.html":{},"classes/TaskDto.html":{},"classes/TaskNameDto.html":{},"classes/TaskProjectDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/TaskStatusCountsDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/ViewAssignedTaskResponseDto.html":{}}}],["5.0.1",{"_index":1565,"title":{},"body":{"dependencies.html":{}}}],["50000",{"_index":502,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["500000",{"_index":533,"title":{},"body":{"classes/DashboardCountsDto.html":{},"classes/TaskStatusCountsDto.html":{}}}],["50000})@isoptional()@isnumber",{"_index":1209,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["5c63",{"_index":465,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["6.0.0",{"_index":1549,"title":{},"body":{"dependencies.html":{}}}],["6.8.2",{"_index":1548,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{}}}],["7",{"_index":153,"title":{},"body":{"classes/AssignTaskDto-1.html":{},"classes/TaskNameDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/UpdateTaskStatusDto.html":{}}}],["7.8.1",{"_index":1563,"title":{},"body":{"dependencies.html":{}}}],["789",{"_index":147,"title":{},"body":{"classes/AssignTaskDto-1.html":{},"classes/TaskNameDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/UpdateTaskStatusDto.html":{}}}],["789'})@isstring()@isnotempty",{"_index":1185,"title":{},"body":{"classes/UpdateTaskStatusDto.html":{}}}],["8",{"_index":1535,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":527,"title":{},"body":{"classes/DashboardCountsDto.html":{},"classes/TaskStatusCountsDto.html":{}}}],["9",{"_index":1704,"title":{},"body":{"overview.html":{}}}],["9898989898",{"_index":490,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["9898989898'})@isoptional()@isstring()@isphonenumber('in",{"_index":1206,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["_count",{"_index":1486,"title":{},"body":{"injectables/UsersService.html":{}}}],["_count.status",{"_index":1513,"title":{},"body":{"injectables/UsersService.html":{}}}],["_sum",{"_index":1503,"title":{},"body":{"injectables/UsersService.html":{}}}],["a649",{"_index":467,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["a65fa2c0",{"_index":464,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["acc",{"_index":899,"title":{},"body":{"injectables/MilestonesService.html":{},"injectables/ProjectsService.html":{}}}],["accesstoken",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["achieved",{"_index":931,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["achieveddate",{"_index":403,"title":{},"body":{"classes/CreateMilestoneDto.html":{},"injectables/MilestonesService.html":{},"injectables/ProjectsService.html":{},"classes/UpdateMilestoneDto.html":{}}}],["achievedpercentage",{"_index":936,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["active",{"_index":1500,"title":{},"body":{"injectables/UsersService.html":{}}}],["activeemployees",{"_index":520,"title":{},"body":{"classes/DashboardCountsDto.html":{},"classes/TaskStatusCountsDto.html":{},"injectables/UsersService.html":{}}}],["address",{"_index":445,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{},"injectables/UsersService.html":{}}}],["admin",{"_index":498,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["allcounts",{"_index":1239,"title":{},"body":{"controllers/UsersController.html":{}}}],["allemployeeexpenses",{"_index":683,"title":{},"body":{"controllers/ExpensesController.html":{},"injectables/ExpensesService.html":{}}}],["allemployeeexpenses(@param('employeeid",{"_index":706,"title":{},"body":{"controllers/ExpensesController.html":{}}}],["allemployeeexpenses(employeeid",{"_index":686,"title":{},"body":{"controllers/ExpensesController.html":{},"injectables/ExpensesService.html":{}}}],["alloc.allocatedamount",{"_index":1096,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["alloc.categoryid",{"_index":1095,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["alloc.description",{"_index":1097,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["allocatedamount",{"_index":229,"title":{},"body":{"controllers/AuthController.html":{},"classes/CostAllocationDto.html":{},"classes/CreateProjectWithAllocationsDto.html":{},"injectables/ProjectsService.html":{},"classes/UpdateProjectDto.html":{},"injectables/UsersService.html":{}}}],["allocation",{"_index":360,"title":{},"body":{"classes/CostAllocationDto.html":{},"classes/CreateProjectWithAllocationsDto.html":{},"injectables/ProjectsService.html":{},"classes/UpdateProjectDto.html":{}}}],["allocations",{"_index":1092,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["allowing",{"_index":1638,"title":{},"body":{"index.html":{}}}],["already",{"_index":613,"title":{},"body":{"injectables/DepartmentsService.html":{},"injectables/ExpenseCategoryService.html":{},"injectables/MilestonesService.html":{},"injectables/ProductsService.html":{},"injectables/UsersService.html":{}}}],["always",{"_index":231,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ProjectsService.html":{},"injectables/UsersService.html":{}}}],["amazing",{"_index":1687,"title":{},"body":{"index.html":{}}}],["amount",{"_index":365,"title":{},"body":{"classes/CreateExpenseDto.html":{},"injectables/ExpensesService.html":{},"classes/UpdateExpenseDto.html":{},"injectables/UsersService.html":{}}}],["annualrevenueresult",{"_index":1499,"title":{},"body":{"injectables/UsersService.html":{}}}],["annualrevenueresult._sum.amount",{"_index":1514,"title":{},"body":{"injectables/UsersService.html":{}}}],["any).user",{"_index":266,"title":{},"body":{"guards/AuthGuard.html":{}}}],["api/departments",{"_index":548,"title":{},"body":{"controllers/DepartmentsController.html":{}}}],["api/expense",{"_index":622,"title":{},"body":{"controllers/ExpenseCategoryController.html":{}}}],["api/expenses",{"_index":682,"title":{},"body":{"controllers/ExpensesController.html":{}}}],["api/milestones",{"_index":820,"title":{},"body":{"controllers/MilestonesController.html":{}}}],["api/products",{"_index":957,"title":{},"body":{"controllers/ProductsController.html":{}}}],["api/projects",{"_index":1021,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["api/users",{"_index":1238,"title":{},"body":{"controllers/UsersController.html":{}}}],["apibody",{"_index":1323,"title":{},"body":{"controllers/UsersController.html":{}}}],["apinotfoundresponse",{"_index":1324,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiokresponse",{"_index":1325,"title":{},"body":{"controllers/UsersController.html":{}}}],["apioperation",{"_index":1326,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiparam",{"_index":1327,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiproperty",{"_index":94,"title":{},"body":{"classes/AssignTaskDto.html":{},"classes/AssignTaskDto-1.html":{},"classes/AssignTaskResponseDto.html":{},"classes/CreateUserDto.html":{},"classes/DashboardCountsDto.html":{},"classes/DeleteUserResponseDto.html":{},"classes/TaskDto.html":{},"classes/TaskInput.html":{},"classes/TaskNameDto.html":{},"classes/TaskProjectDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/TaskStatusCountsDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UserResponseDto.html":{},"classes/ViewAssignedTaskResponseDto.html":{}}}],["apiproperty({enum",{"_index":1232,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["apiproperty({example",{"_index":80,"title":{},"body":{"classes/AssignTaskDto.html":{},"classes/AssignTaskDto-1.html":{},"classes/AssignTaskResponseDto.html":{},"classes/CreateUserDto.html":{},"classes/DashboardCountsDto.html":{},"classes/DeleteUserResponseDto.html":{},"classes/TaskDto.html":{},"classes/TaskInput.html":{},"classes/TaskNameDto.html":{},"classes/TaskProjectDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/TaskStatusCountsDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/ViewAssignedTaskResponseDto.html":{}}}],["apiproperty({required",{"_index":1220,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["apiproperty({type",{"_index":90,"title":{},"body":{"classes/AssignTaskDto.html":{},"classes/AssignTaskDto-1.html":{},"classes/DashboardCountsDto.html":{},"classes/TaskDto.html":{},"classes/ViewAssignedTaskResponseDto.html":{}}}],["apipropertyoptional",{"_index":135,"title":{},"body":{"classes/AssignTaskDto-1.html":{},"classes/CreateUserDto.html":{},"classes/TaskNameDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{}}}],["apipropertyoptional({enum",{"_index":499,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["apipropertyoptional({example",{"_index":123,"title":{},"body":{"classes/AssignTaskDto-1.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["apipropertyoptional({format",{"_index":463,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["apiresponse",{"_index":1328,"title":{},"body":{"controllers/UsersController.html":{}}}],["apollo",{"_index":1136,"title":{},"body":{"classes/TaskDto.html":{},"classes/TaskProjectDto.html":{},"classes/ViewAssignedTaskResponseDto.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["application",{"_index":1608,"title":{},"body":{"index.html":{}}}],["applications",{"_index":1583,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["approved",{"_index":397,"title":{},"body":{"classes/CreateExpenseDto.html":{},"classes/UpdateExpenseDto.html":{},"miscellaneous/enumerations.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"coverage.html":{}}}],["area",{"_index":458,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["area'})@isoptional()@isstring",{"_index":1189,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["array",{"_index":129,"title":{},"body":{"classes/AssignTaskDto-1.html":{},"classes/TaskNameDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/UpdateTaskStatusDto.html":{}}}],["array.isarray(costallocations",{"_index":1082,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["array.isarray(employeeids",{"_index":1079,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["array.isarray(tasks",{"_index":1460,"title":{},"body":{"injectables/UsersService.html":{}}}],["arrayminsize",{"_index":350,"title":{},"body":{"classes/CostAllocationDto.html":{},"classes/CreateProjectWithAllocationsDto.html":{},"classes/UpdateProjectDto.html":{}}}],["arrayminsize(1",{"_index":356,"title":{},"body":{"classes/CostAllocationDto.html":{},"classes/CreateProjectWithAllocationsDto.html":{},"classes/UpdateProjectDto.html":{}}}],["arraynotempty",{"_index":132,"title":{},"body":{"classes/AssignTaskDto-1.html":{},"classes/TaskNameDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/UpdateTaskStatusDto.html":{}}}],["assign",{"_index":138,"title":{},"body":{"classes/AssignTaskDto-1.html":{},"classes/TaskNameDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/UpdateTaskStatusDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["assign'})@isarray()@arraynotempty()@validatenested({each",{"_index":130,"title":{},"body":{"classes/AssignTaskDto-1.html":{}}}],["assigned",{"_index":111,"title":{},"body":{"classes/AssignTaskDto.html":{},"classes/AssignTaskResponseDto.html":{},"classes/CostAllocationDto.html":{},"classes/CreateProjectWithAllocationsDto.html":{},"injectables/ProjectsService.html":{},"classes/TaskInput.html":{},"classes/UpdateProjectDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["assigned'})@isstring({each",{"_index":436,"title":{},"body":{"classes/CreateProjectWithAllocationsDto.html":{}}}],["assigned'})@validatenested({each",{"_index":433,"title":{},"body":{"classes/CreateProjectWithAllocationsDto.html":{}}}],["assignedat",{"_index":1078,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["assignedemployees",{"_index":1089,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["assignedemployeesdeleted",{"_index":1115,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["assigntask",{"_index":1240,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["assigntask(@body",{"_index":1366,"title":{},"body":{"controllers/UsersController.html":{}}}],["assigntask(body",{"_index":1251,"title":{},"body":{"controllers/UsersController.html":{}}}],["assigntask(data",{"_index":1390,"title":{},"body":{"injectables/UsersService.html":{}}}],["assigntaskdto",{"_index":70,"title":{"classes/AssignTaskDto.html":{},"classes/AssignTaskDto-1.html":{}},"body":{"classes/AssignTaskDto.html":{},"classes/AssignTaskDto-1.html":{},"classes/AssignTaskResponseDto.html":{},"classes/TaskInput.html":{},"classes/TaskNameDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/UpdateTaskStatusDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["assigntaskdto})@apiokresponse({type",{"_index":1255,"title":{},"body":{"controllers/UsersController.html":{}}}],["assigntaskresponsedto",{"_index":110,"title":{"classes/AssignTaskResponseDto.html":{}},"body":{"classes/AssignTaskDto.html":{},"classes/AssignTaskResponseDto.html":{},"classes/TaskInput.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["async",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/DepartmentsController.html":{},"injectables/DepartmentsService.html":{},"controllers/ExpenseCategoryController.html":{},"injectables/ExpenseCategoryService.html":{},"controllers/ExpensesController.html":{},"injectables/ExpensesService.html":{},"injectables/JwtStrategy.html":{},"controllers/MilestonesController.html":{},"injectables/MilestonesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/ProjectsController.html":{},"injectables/ProjectsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["attach",{"_index":267,"title":{},"body":{"guards/AuthGuard.html":{}}}],["auth",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":276,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard.ts",{"_index":794,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":156,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":189,"title":{"guards/AuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["authguard('jwt",{"_index":795,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authheader",{"_index":249,"title":{},"body":{"guards/AuthGuard.html":{}}}],["authheader.split",{"_index":259,"title":{},"body":{"guards/AuthGuard.html":{}}}],["authheader.startswith('bearer",{"_index":251,"title":{},"body":{"guards/AuthGuard.html":{}}}],["authmodule",{"_index":39,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1694,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authorization",{"_index":254,"title":{},"body":{"guards/AuthGuard.html":{}}}],["authservice",{"_index":186,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DepartmentsService.html":{},"injectables/ExpenseCategoryService.html":{},"injectables/ExpensesService.html":{},"injectables/MilestonesService.html":{},"injectables/ProductsService.html":{},"injectables/ProjectsService.html":{},"injectables/UsersService.html":{}}}],["aws",{"_index":1626,"title":{},"body":{"index.html":{}}}],["b9e3ad74f874",{"_index":515,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["b9e3ad74f874'})@isoptional()@isuuid",{"_index":468,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["backers",{"_index":1688,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":603,"title":{},"body":{"injectables/DepartmentsService.html":{},"injectables/ExpenseCategoryService.html":{},"injectables/ExpensesService.html":{},"injectables/MilestonesService.html":{},"injectables/ProductsService.html":{},"injectables/ProjectsService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('at",{"_index":1081,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["badrequestexception('department",{"_index":612,"title":{},"body":{"injectables/DepartmentsService.html":{}}}],["badrequestexception('employeeid",{"_index":1462,"title":{},"body":{"injectables/UsersService.html":{}}}],["badrequestexception('expense",{"_index":673,"title":{},"body":{"injectables/ExpenseCategoryService.html":{},"injectables/ExpensesService.html":{}}}],["badrequestexception('insert",{"_index":616,"title":{},"body":{"injectables/DepartmentsService.html":{}}}],["badrequestexception('product",{"_index":1011,"title":{},"body":{"injectables/ProductsService.html":{}}}],["based",{"_index":1621,"title":{},"body":{"index.html":{}}}],["basename",{"_index":1320,"title":{},"body":{"controllers/UsersController.html":{}}}],["basename(file.path",{"_index":1353,"title":{},"body":{"controllers/UsersController.html":{}}}],["baseprice",{"_index":418,"title":{},"body":{"classes/CreateProductDto.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductDto.html":{}}}],["bcrypt",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare(password",{"_index":327,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(data.password",{"_index":1411,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt.hash(dto.password",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{}}}],["board",{"_index":1680,"title":{},"body":{"index.html":{}}}],["body",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{},"controllers/DepartmentsController.html":{},"controllers/ExpenseCategoryController.html":{},"controllers/ExpensesController.html":{},"controllers/MilestonesController.html":{},"controllers/ProductsController.html":{},"controllers/ProjectsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":243,"title":{},"body":{"guards/AuthGuard.html":{}}}],["bootstrap",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DepartmentsModule.html":{},"modules/ExpenseCategoryModule.html":{},"modules/ExpensesModule.html":{},"modules/MilestonesModule.html":{},"modules/PrismaModule.html":{},"modules/ProductsModule.html":{},"modules/ProjectsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1702,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1700,"title":{},"body":{"modules.html":{}}}],["budget",{"_index":355,"title":{},"body":{"classes/CostAllocationDto.html":{},"classes/CreateProjectWithAllocationsDto.html":{},"injectables/ProjectsService.html":{},"classes/UpdateProjectDto.html":{}}}],["bugs",{"_index":105,"title":{},"body":{"classes/AssignTaskDto.html":{},"classes/AssignTaskDto-1.html":{},"classes/AssignTaskResponseDto.html":{},"classes/TaskDto.html":{},"classes/TaskInput.html":{},"classes/TaskNameDto.html":{},"classes/TaskProjectDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/ViewAssignedTaskResponseDto.html":{}}}],["bugs'})@isstring",{"_index":1141,"title":{},"body":{"classes/TaskNameDto.html":{}}}],["building",{"_index":1578,"title":{},"body":{"index.html":{}}}],["calculate",{"_index":930,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["canactivate",{"_index":238,"title":{},"body":{"guards/AuthGuard.html":{}}}],["canactivate(context",{"_index":239,"title":{},"body":{"guards/AuthGuard.html":{}}}],["case",{"_index":1510,"title":{},"body":{"injectables/UsersService.html":{}}}],["cat",{"_index":623,"title":{},"body":{"controllers/ExpenseCategoryController.html":{}}}],["catch",{"_index":268,"title":{},"body":{"guards/AuthGuard.html":{}}}],["categories",{"_index":786,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["category",{"_index":674,"title":{},"body":{"injectables/ExpenseCategoryService.html":{},"injectables/ExpensesService.html":{},"injectables/ProductsService.html":{},"injectables/ProjectsService.html":{}}}],["category.controller",{"_index":650,"title":{},"body":{"modules/ExpenseCategoryModule.html":{}}}],["category.controller.ts",{"_index":621,"title":{},"body":{"controllers/ExpenseCategoryController.html":{},"coverage.html":{}}}],["category.controller.ts:17",{"_index":625,"title":{},"body":{"controllers/ExpenseCategoryController.html":{}}}],["category.controller.ts:22",{"_index":628,"title":{},"body":{"controllers/ExpenseCategoryController.html":{}}}],["category.controller.ts:27",{"_index":624,"title":{},"body":{"controllers/ExpenseCategoryController.html":{}}}],["category.controller.ts:32",{"_index":635,"title":{},"body":{"controllers/ExpenseCategoryController.html":{}}}],["category.controller.ts:40",{"_index":632,"title":{},"body":{"controllers/ExpenseCategoryController.html":{}}}],["category.module",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["category.module.ts",{"_index":649,"title":{},"body":{"modules/ExpenseCategoryModule.html":{}}}],["category.service",{"_index":637,"title":{},"body":{"controllers/ExpenseCategoryController.html":{},"modules/ExpenseCategoryModule.html":{}}}],["category.service.ts",{"_index":651,"title":{},"body":{"injectables/ExpenseCategoryService.html":{},"coverage.html":{}}}],["category.service.ts:10",{"_index":657,"title":{},"body":{"injectables/ExpenseCategoryService.html":{}}}],["category.service.ts:13",{"_index":662,"title":{},"body":{"injectables/ExpenseCategoryService.html":{}}}],["category.service.ts:21",{"_index":664,"title":{},"body":{"injectables/ExpenseCategoryService.html":{}}}],["category.service.ts:33",{"_index":659,"title":{},"body":{"injectables/ExpenseCategoryService.html":{}}}],["category.service.ts:53",{"_index":666,"title":{},"body":{"injectables/ExpenseCategoryService.html":{}}}],["category.service.ts:81",{"_index":661,"title":{},"body":{"injectables/ExpenseCategoryService.html":{}}}],["category/expense",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"controllers/ExpenseCategoryController.html":{},"modules/ExpenseCategoryModule.html":{},"injectables/ExpenseCategoryService.html":{},"coverage.html":{}}}],["categoryid",{"_index":342,"title":{},"body":{"classes/CostAllocationDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateProjectWithAllocationsDto.html":{},"injectables/ProductsService.html":{},"injectables/ProjectsService.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProjectDto.html":{}}}],["categoryname",{"_index":1005,"title":{},"body":{"injectables/ProductsService.html":{}}}],["cb",{"_index":1344,"title":{},"body":{"controllers/UsersController.html":{}}}],["cb(null",{"_index":1349,"title":{},"body":{"controllers/UsersController.html":{}}}],["channel",{"_index":1653,"title":{},"body":{"index.html":{}}}],["chart",{"_index":835,"title":{},"body":{"controllers/MilestonesController.html":{}}}],["chartdata",{"_index":684,"title":{},"body":{"controllers/ExpensesController.html":{},"injectables/ExpensesService.html":{}}}],["chartdataexpenses",{"_index":717,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["check",{"_index":894,"title":{},"body":{"injectables/MilestonesService.html":{},"index.html":{}}}],["city",{"_index":446,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{},"injectables/UsersService.html":{}}}],["class",{"_index":21,"title":{"classes/AssignTaskDto.html":{},"classes/AssignTaskDto-1.html":{},"classes/AssignTaskResponseDto.html":{},"classes/CostAllocationDto.html":{},"classes/CreateExpenseDto.html":{},"classes/CreateMilestoneDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateProjectWithAllocationsDto.html":{},"classes/CreateUserDto.html":{},"classes/DashboardCountsDto.html":{},"classes/DeleteUserResponseDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/TaskDto.html":{},"classes/TaskInput.html":{},"classes/TaskNameDto.html":{},"classes/TaskProjectDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/TaskStatusCountsDto.html":{},"classes/UpdateExpenseDto.html":{},"classes/UpdateMilestoneDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{},"classes/ViewAssignedTaskResponseDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AssignTaskDto.html":{},"classes/AssignTaskDto-1.html":{},"classes/AssignTaskResponseDto.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CostAllocationDto.html":{},"classes/CreateExpenseDto.html":{},"classes/CreateMilestoneDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateProjectWithAllocationsDto.html":{},"classes/CreateUserDto.html":{},"classes/DashboardCountsDto.html":{},"classes/DeleteUserResponseDto.html":{},"controllers/DepartmentsController.html":{},"modules/DepartmentsModule.html":{},"injectables/DepartmentsService.html":{},"controllers/ExpenseCategoryController.html":{},"modules/ExpenseCategoryModule.html":{},"injectables/ExpenseCategoryService.html":{},"controllers/ExpensesController.html":{},"modules/ExpensesModule.html":{},"injectables/ExpensesService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"controllers/MilestonesController.html":{},"modules/MilestonesModule.html":{},"injectables/MilestonesService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"injectables/ProjectsService.html":{},"classes/RegisterDto.html":{},"classes/TaskDto.html":{},"classes/TaskInput.html":{},"classes/TaskNameDto.html":{},"classes/TaskProjectDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/TaskStatusCountsDto.html":{},"classes/UpdateExpenseDto.html":{},"classes/UpdateMilestoneDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ViewAssignedTaskResponseDto.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":71,"title":{},"body":{"classes/AssignTaskDto.html":{},"classes/AssignTaskDto-1.html":{},"classes/AssignTaskResponseDto.html":{},"classes/CostAllocationDto.html":{},"classes/CreateExpenseDto.html":{},"classes/CreateMilestoneDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateProjectWithAllocationsDto.html":{},"classes/CreateUserDto.html":{},"classes/DashboardCountsDto.html":{},"classes/DeleteUserResponseDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/TaskDto.html":{},"classes/TaskInput.html":{},"classes/TaskNameDto.html":{},"classes/TaskProjectDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/TaskStatusCountsDto.html":{},"classes/UpdateExpenseDto.html":{},"classes/UpdateMilestoneDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{},"classes/ViewAssignedTaskResponseDto.html":{},"overview.html":{}}}],["clicks",{"_index":1637,"title":{},"body":{"index.html":{}}}],["clientname",{"_index":352,"title":{},"body":{"classes/CostAllocationDto.html":{},"classes/CreateProjectWithAllocationsDto.html":{},"injectables/ProjectsService.html":{},"classes/UpdateProjectDto.html":{}}}],["cloud",{"_index":1620,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":272,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":273,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_departmentsmodule",{"_index":583,"title":{},"body":{"modules/DepartmentsModule.html":{},"overview.html":{}}}],["cluster_departmentsmodule_providers",{"_index":584,"title":{},"body":{"modules/DepartmentsModule.html":{},"overview.html":{}}}],["cluster_expensecategorymodule",{"_index":647,"title":{},"body":{"modules/ExpenseCategoryModule.html":{},"overview.html":{}}}],["cluster_expensecategorymodule_providers",{"_index":648,"title":{},"body":{"modules/ExpenseCategoryModule.html":{},"overview.html":{}}}],["cluster_expensesmodule",{"_index":712,"title":{},"body":{"modules/ExpensesModule.html":{},"overview.html":{}}}],["cluster_expensesmodule_providers",{"_index":713,"title":{},"body":{"modules/ExpensesModule.html":{},"overview.html":{}}}],["cluster_milestonesmodule",{"_index":858,"title":{},"body":{"modules/MilestonesModule.html":{},"overview.html":{}}}],["cluster_milestonesmodule_providers",{"_index":859,"title":{},"body":{"modules/MilestonesModule.html":{},"overview.html":{}}}],["cluster_prismamodule",{"_index":946,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":948,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_providers",{"_index":947,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_productsmodule",{"_index":981,"title":{},"body":{"modules/ProductsModule.html":{},"overview.html":{}}}],["cluster_productsmodule_providers",{"_index":982,"title":{},"body":{"modules/ProductsModule.html":{},"overview.html":{}}}],["cluster_projectsmodule",{"_index":1048,"title":{},"body":{"modules/ProjectsModule.html":{},"overview.html":{}}}],["cluster_projectsmodule_providers",{"_index":1049,"title":{},"body":{"modules/ProjectsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1376,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1377,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":1378,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":512,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["come",{"_index":1644,"title":{},"body":{"index.html":{}}}],["completed",{"_index":144,"title":{},"body":{"classes/AssignTaskDto-1.html":{},"classes/DashboardCountsDto.html":{},"classes/TaskDto.html":{},"classes/TaskNameDto.html":{},"classes/TaskProjectDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/TaskStatusCountsDto.html":{},"classes/UpdateTaskStatusDto.html":{},"injectables/UsersService.html":{},"classes/ViewAssignedTaskResponseDto.html":{},"miscellaneous/enumerations.html":{}}}],["completedat",{"_index":1483,"title":{},"body":{"injectables/UsersService.html":{}}}],["completedcount",{"_index":1474,"title":{},"body":{"injectables/UsersService.html":{}}}],["config",{"_index":286,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["config.get('jwt_expires_in",{"_index":290,"title":{},"body":{"modules/AuthModule.html":{}}}],["config.get('jwt_secret",{"_index":287,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configmodule",{"_index":280,"title":{},"body":{"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":283,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice",{"_index":281,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["console.log(data",{"_index":1009,"title":{},"body":{"injectables/ProductsService.html":{}}}],["const",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/DepartmentsService.html":{},"injectables/ExpenseCategoryService.html":{},"injectables/ExpensesService.html":{},"injectables/MilestonesService.html":{},"injectables/ProductsService.html":{},"injectables/ProjectsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constraint",{"_index":895,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["constructor",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DepartmentsService.html":{},"injectables/ExpenseCategoryService.html":{},"injectables/ExpensesService.html":{},"injectables/JwtStrategy.html":{},"injectables/MilestonesService.html":{},"injectables/PrismaService.html":{},"injectables/ProductsService.html":{},"injectables/ProjectsService.html":{},"injectables/UsersService.html":{}}}],["constructor(config",{"_index":799,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(prisma",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DepartmentsService.html":{},"injectables/ExpenseCategoryService.html":{},"injectables/ExpensesService.html":{},"injectables/MilestonesService.html":{},"injectables/ProductsService.html":{},"injectables/ProjectsService.html":{},"injectables/UsersService.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/DepartmentsController.html":{},"injectables/DepartmentsService.html":{},"controllers/ExpenseCategoryController.html":{},"injectables/ExpenseCategoryService.html":{},"controllers/ExpensesController.html":{},"injectables/ExpensesService.html":{},"controllers/MilestonesController.html":{},"injectables/MilestonesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/ProjectsController.html":{},"injectables/ProjectsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["context",{"_index":242,"title":{},"body":{"guards/AuthGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":248,"title":{},"body":{"guards/AuthGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/DepartmentsController.html":{},"controllers/ExpenseCategoryController.html":{},"controllers/ExpensesController.html":{},"controllers/MilestonesController.html":{},"controllers/ProductsController.html":{},"controllers/ProjectsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/DepartmentsController.html":{},"controllers/ExpenseCategoryController.html":{},"controllers/ExpensesController.html":{},"controllers/MilestonesController.html":{},"controllers/ProductsController.html":{},"controllers/ProjectsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('api/departments",{"_index":573,"title":{},"body":{"controllers/DepartmentsController.html":{}}}],["controller('api/expense",{"_index":638,"title":{},"body":{"controllers/ExpenseCategoryController.html":{}}}],["controller('api/expenses",{"_index":701,"title":{},"body":{"controllers/ExpensesController.html":{}}}],["controller('api/milestones",{"_index":846,"title":{},"body":{"controllers/MilestonesController.html":{}}}],["controller('api/products",{"_index":972,"title":{},"body":{"controllers/ProductsController.html":{}}}],["controller('api/projects",{"_index":1037,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["controller('api/users",{"_index":1337,"title":{},"body":{"controllers/UsersController.html":{}}}],["controller('auth",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/DepartmentsController.html":{},"modules/DepartmentsModule.html":{},"controllers/ExpenseCategoryController.html":{},"modules/ExpenseCategoryModule.html":{},"controllers/ExpensesController.html":{},"modules/ExpensesModule.html":{},"controllers/MilestonesController.html":{},"modules/MilestonesModule.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["cookie",{"_index":1552,"title":{},"body":{"dependencies.html":{}}}],["cost",{"_index":359,"title":{},"body":{"classes/CostAllocationDto.html":{},"classes/CreateProjectWithAllocationsDto.html":{},"injectables/ProjectsService.html":{},"classes/UpdateProjectDto.html":{}}}],["costallocation.allocatedamount",{"_index":1112,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["costallocation.categoryid",{"_index":1111,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["costallocation.description",{"_index":1113,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["costallocationdto",{"_index":340,"title":{"classes/CostAllocationDto.html":{}},"body":{"classes/CostAllocationDto.html":{},"classes/CreateProjectWithAllocationsDto.html":{},"classes/UpdateProjectDto.html":{},"coverage.html":{}}}],["costallocations",{"_index":361,"title":{},"body":{"classes/CostAllocationDto.html":{},"classes/CreateProjectWithAllocationsDto.html":{},"injectables/ProjectsService.html":{},"classes/UpdateProjectDto.html":{}}}],["costallocations.length",{"_index":1083,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["costallocations.map((alloc",{"_index":1093,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["costallocations.map((costallocation",{"_index":1110,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["costallocationsdeleted",{"_index":1117,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["count",{"_index":115,"title":{},"body":{"classes/AssignTaskDto.html":{},"classes/AssignTaskResponseDto.html":{},"classes/TaskInput.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["count'})@apiokresponse({type",{"_index":1281,"title":{},"body":{"controllers/UsersController.html":{}}}],["country",{"_index":511,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["counts",{"_index":1249,"title":{},"body":{"controllers/UsersController.html":{}}}],["counts')@apioperation({summary",{"_index":1245,"title":{},"body":{"controllers/UsersController.html":{}}}],["counts'})@apiokresponse({description",{"_index":1246,"title":{},"body":{"controllers/UsersController.html":{}}}],["counts.dto",{"_index":1332,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["counts.dto.ts",{"_index":519,"title":{},"body":{"classes/DashboardCountsDto.html":{},"classes/TaskStatusCountsDto.html":{},"coverage.html":{}}}],["counts.dto.ts:11",{"_index":1147,"title":{},"body":{"classes/TaskStatusCountsDto.html":{}}}],["counts.dto.ts:16",{"_index":538,"title":{},"body":{"classes/DashboardCountsDto.html":{}}}],["counts.dto.ts:19",{"_index":528,"title":{},"body":{"classes/DashboardCountsDto.html":{}}}],["counts.dto.ts:22",{"_index":530,"title":{},"body":{"classes/DashboardCountsDto.html":{}}}],["counts.dto.ts:25",{"_index":532,"title":{},"body":{"classes/DashboardCountsDto.html":{}}}],["counts.dto.ts:28",{"_index":534,"title":{},"body":{"classes/DashboardCountsDto.html":{}}}],["counts.dto.ts:31",{"_index":540,"title":{},"body":{"classes/DashboardCountsDto.html":{}}}],["counts.dto.ts:34",{"_index":536,"title":{},"body":{"classes/DashboardCountsDto.html":{}}}],["counts.dto.ts:5",{"_index":1149,"title":{},"body":{"classes/TaskStatusCountsDto.html":{}}}],["counts.dto.ts:8",{"_index":1148,"title":{},"body":{"classes/TaskStatusCountsDto.html":{}}}],["counts/:employeeid",{"_index":1373,"title":{},"body":{"controllers/UsersController.html":{}}}],["counts/:employeeid')@apioperation({summary",{"_index":1280,"title":{},"body":{"controllers/UsersController.html":{}}}],["courses",{"_index":1659,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":1516,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":549,"title":{},"body":{"controllers/DepartmentsController.html":{},"controllers/ExpenseCategoryController.html":{},"controllers/ExpensesController.html":{},"controllers/MilestonesController.html":{},"injectables/MilestonesService.html":{},"controllers/ProductsController.html":{},"controllers/ProjectsController.html":{},"controllers/UsersController.html":{}}}],["create(@body",{"_index":577,"title":{},"body":{"controllers/DepartmentsController.html":{},"controllers/ExpenseCategoryController.html":{},"controllers/ExpensesController.html":{},"controllers/MilestonesController.html":{},"controllers/ProductsController.html":{},"controllers/ProjectsController.html":{}}}],["create(data",{"_index":554,"title":{},"body":{"controllers/DepartmentsController.html":{},"controllers/ExpenseCategoryController.html":{},"controllers/ExpensesController.html":{},"controllers/MilestonesController.html":{},"controllers/ProductsController.html":{},"controllers/ProjectsController.html":{}}}],["create(file",{"_index":1257,"title":{},"body":{"controllers/UsersController.html":{}}}],["created",{"_index":615,"title":{},"body":{"injectables/DepartmentsService.html":{},"controllers/UsersController.html":{}}}],["createdat",{"_index":1504,"title":{},"body":{"injectables/UsersService.html":{}}}],["createdepartment",{"_index":588,"title":{},"body":{"injectables/DepartmentsService.html":{}}}],["createdepartment(data",{"_index":593,"title":{},"body":{"injectables/DepartmentsService.html":{}}}],["createdtasks",{"_index":1467,"title":{},"body":{"injectables/UsersService.html":{}}}],["createdtasks.count",{"_index":1469,"title":{},"body":{"injectables/UsersService.html":{}}}],["createexpense",{"_index":718,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["createexpense(data",{"_index":727,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["createexpensecat",{"_index":652,"title":{},"body":{"injectables/ExpenseCategoryService.html":{}}}],["createexpensecat(data",{"_index":658,"title":{},"body":{"injectables/ExpenseCategoryService.html":{}}}],["createexpensedto",{"_index":363,"title":{"classes/CreateExpenseDto.html":{}},"body":{"classes/CreateExpenseDto.html":{},"controllers/ExpensesController.html":{},"injectables/ExpensesService.html":{},"classes/UpdateExpenseDto.html":{},"coverage.html":{}}}],["createmilestone",{"_index":863,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["createmilestone(data",{"_index":871,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["createmilestonedto",{"_index":401,"title":{"classes/CreateMilestoneDto.html":{}},"body":{"classes/CreateMilestoneDto.html":{},"controllers/MilestonesController.html":{},"injectables/MilestonesService.html":{},"classes/UpdateMilestoneDto.html":{},"coverage.html":{}}}],["createproduct",{"_index":986,"title":{},"body":{"injectables/ProductsService.html":{}}}],["createproduct(data",{"_index":992,"title":{},"body":{"injectables/ProductsService.html":{}}}],["createproductdto",{"_index":416,"title":{"classes/CreateProductDto.html":{}},"body":{"classes/CreateProductDto.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["createproject",{"_index":1053,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["createproject(data",{"_index":1059,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["createprojectwithallocationsdto",{"_index":351,"title":{"classes/CreateProjectWithAllocationsDto.html":{}},"body":{"classes/CostAllocationDto.html":{},"classes/CreateProjectWithAllocationsDto.html":{},"classes/UpdateProjectDto.html":{},"coverage.html":{}}}],["createuser",{"_index":1382,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuser(data",{"_index":1393,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto",{"_index":442,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["credentials",{"_index":329,"title":{},"body":{"injectables/AuthService.html":{}}}],["current",{"_index":910,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["currently",{"_index":903,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["currentyear",{"_index":1491,"title":{},"body":{"injectables/UsersService.html":{}}}],["dashboard",{"_index":1247,"title":{},"body":{"controllers/UsersController.html":{}}}],["dashboardcountsdto",{"_index":517,"title":{"classes/DashboardCountsDto.html":{}},"body":{"classes/DashboardCountsDto.html":{},"classes/TaskStatusCountsDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["data",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{},"controllers/DepartmentsController.html":{},"injectables/DepartmentsService.html":{},"controllers/ExpenseCategoryController.html":{},"injectables/ExpenseCategoryService.html":{},"controllers/ExpensesController.html":{},"injectables/ExpensesService.html":{},"controllers/MilestonesController.html":{},"injectables/MilestonesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/ProjectsController.html":{},"injectables/ProjectsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["data.address",{"_index":1423,"title":{},"body":{"injectables/UsersService.html":{}}}],["data.city",{"_index":1425,"title":{},"body":{"injectables/UsersService.html":{}}}],["data.departmentid",{"_index":1428,"title":{},"body":{"injectables/UsersService.html":{}}}],["data.dob",{"_index":1445,"title":{},"body":{"injectables/UsersService.html":{}}}],["data.email",{"_index":1409,"title":{},"body":{"injectables/UsersService.html":{}}}],["data.firstname",{"_index":1416,"title":{},"body":{"injectables/UsersService.html":{}}}],["data.hiredate",{"_index":1450,"title":{},"body":{"injectables/UsersService.html":{}}}],["data.jobtitle",{"_index":1420,"title":{},"body":{"injectables/UsersService.html":{}}}],["data.lastname",{"_index":1417,"title":{},"body":{"injectables/UsersService.html":{}}}],["data.password",{"_index":1457,"title":{},"body":{"injectables/UsersService.html":{}}}],["data.phone",{"_index":1418,"title":{},"body":{"injectables/UsersService.html":{}}}],["data.pincode",{"_index":1426,"title":{},"body":{"injectables/UsersService.html":{}}}],["data.profileimage",{"_index":1427,"title":{},"body":{"injectables/UsersService.html":{}}}],["data.role",{"_index":1429,"title":{},"body":{"injectables/UsersService.html":{}}}],["data.salary",{"_index":1421,"title":{},"body":{"injectables/UsersService.html":{}}}],["data.state",{"_index":1424,"title":{},"body":{"injectables/UsersService.html":{}}}],["date",{"_index":366,"title":{},"body":{"classes/CreateExpenseDto.html":{},"injectables/DepartmentsService.html":{},"injectables/ExpenseCategoryService.html":{},"injectables/ExpensesService.html":{},"injectables/ProductsService.html":{},"classes/UpdateExpenseDto.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["date().getfullyear",{"_index":1492,"title":{},"body":{"injectables/UsersService.html":{}}}],["date(`${currentyear",{"_index":1494,"title":{},"body":{"injectables/UsersService.html":{}}}],["date(data.dob",{"_index":1419,"title":{},"body":{"injectables/UsersService.html":{}}}],["date(data.hiredate",{"_index":1422,"title":{},"body":{"injectables/UsersService.html":{}}}],["date(enddate",{"_index":1088,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["date(request.date",{"_index":766,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["date(startdate",{"_index":1087,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["date.now",{"_index":1346,"title":{},"body":{"controllers/UsersController.html":{}}}],["datekey",{"_index":773,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["day",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{}}}],["dd",{"_index":777,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["decimal",{"_index":784,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["declarations",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DepartmentsModule.html":{},"modules/ExpenseCategoryModule.html":{},"modules/ExpensesModule.html":{},"modules/MilestonesModule.html":{},"modules/PrismaModule.html":{},"modules/ProductsModule.html":{},"modules/ProjectsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decoded",{"_index":261,"title":{},"body":{"guards/AuthGuard.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"classes/AssignTaskDto.html":{},"classes/AssignTaskDto-1.html":{},"classes/AssignTaskResponseDto.html":{},"controllers/AuthController.html":{},"classes/CostAllocationDto.html":{},"classes/CreateExpenseDto.html":{},"classes/CreateMilestoneDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateProjectWithAllocationsDto.html":{},"classes/CreateUserDto.html":{},"classes/DashboardCountsDto.html":{},"classes/DeleteUserResponseDto.html":{},"controllers/DepartmentsController.html":{},"controllers/ExpenseCategoryController.html":{},"controllers/ExpensesController.html":{},"classes/LoginDto.html":{},"controllers/MilestonesController.html":{},"controllers/ProductsController.html":{},"controllers/ProjectsController.html":{},"classes/RegisterDto.html":{},"classes/TaskDto.html":{},"classes/TaskInput.html":{},"classes/TaskNameDto.html":{},"classes/TaskProjectDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/TaskStatusCountsDto.html":{},"classes/UpdateExpenseDto.html":{},"classes/UpdateMilestoneDto.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{},"controllers/UsersController.html":{},"classes/ViewAssignedTaskResponseDto.html":{}}}],["deeper",{"_index":1655,"title":{},"body":{"index.html":{}}}],["default",{"_index":264,"title":{},"body":{"guards/AuthGuard.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/AssignTaskDto.html":{},"classes/AssignTaskDto-1.html":{},"classes/AssignTaskResponseDto.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CostAllocationDto.html":{},"classes/CreateExpenseDto.html":{},"classes/CreateMilestoneDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateProjectWithAllocationsDto.html":{},"classes/CreateUserDto.html":{},"classes/DashboardCountsDto.html":{},"classes/DeleteUserResponseDto.html":{},"controllers/DepartmentsController.html":{},"injectables/DepartmentsService.html":{},"controllers/ExpenseCategoryController.html":{},"injectables/ExpenseCategoryService.html":{},"controllers/ExpensesController.html":{},"injectables/ExpensesService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"controllers/MilestonesController.html":{},"injectables/MilestonesService.html":{},"injectables/PrismaService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/ProjectsController.html":{},"injectables/ProjectsService.html":{},"classes/RegisterDto.html":{},"classes/TaskDto.html":{},"classes/TaskInput.html":{},"classes/TaskNameDto.html":{},"classes/TaskProjectDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/TaskStatusCountsDto.html":{},"classes/UpdateExpenseDto.html":{},"classes/UpdateMilestoneDto.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ViewAssignedTaskResponseDto.html":{}}}],["delete",{"_index":567,"title":{},"body":{"controllers/DepartmentsController.html":{},"controllers/ExpenseCategoryController.html":{},"controllers/ExpensesController.html":{},"controllers/MilestonesController.html":{},"controllers/ProductsController.html":{},"controllers/ProjectsController.html":{},"controllers/UsersController.html":{}}}],["delete'})@apiokresponse({type",{"_index":1287,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete('/delete/:departmentid",{"_index":562,"title":{},"body":{"controllers/DepartmentsController.html":{}}}],["delete('/delete/:expenseid",{"_index":631,"title":{},"body":{"controllers/ExpenseCategoryController.html":{},"controllers/ExpensesController.html":{}}}],["delete('/delete/:productid",{"_index":964,"title":{},"body":{"controllers/ProductsController.html":{}}}],["delete('/delete/:projectid",{"_index":1027,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["delete(':id",{"_index":1363,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(':id')@apioperation({summary",{"_index":1285,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(':milestoneid",{"_index":838,"title":{},"body":{"controllers/MilestonesController.html":{}}}],["deleted",{"_index":544,"title":{},"body":{"classes/DeleteUserResponseDto.html":{},"injectables/DepartmentsService.html":{},"injectables/ExpenseCategoryService.html":{},"injectables/ExpensesService.html":{},"injectables/MilestonesService.html":{},"injectables/ProductsService.html":{},"injectables/ProjectsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deletedat",{"_index":618,"title":{},"body":{"injectables/DepartmentsService.html":{},"injectables/ExpenseCategoryService.html":{},"injectables/ExpensesService.html":{},"injectables/ProductsService.html":{},"injectables/UsersService.html":{}}}],["deletedepartment",{"_index":589,"title":{},"body":{"injectables/DepartmentsService.html":{}}}],["deletedepartment(departmentid",{"_index":596,"title":{},"body":{"injectables/DepartmentsService.html":{}}}],["deleteexpense",{"_index":719,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["deleteexpense(expenseid",{"_index":729,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["deleteexpensecat",{"_index":653,"title":{},"body":{"injectables/ExpenseCategoryService.html":{}}}],["deleteexpensecat(expenseid",{"_index":660,"title":{},"body":{"injectables/ExpenseCategoryService.html":{}}}],["deletemilestone",{"_index":864,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["deletemilestone(milestoneid",{"_index":873,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["deleteproduct",{"_index":987,"title":{},"body":{"injectables/ProductsService.html":{}}}],["deleteproduct(productid",{"_index":994,"title":{},"body":{"injectables/ProductsService.html":{}}}],["deleteproject",{"_index":1054,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["deleteproject(projectid",{"_index":1061,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["deleteuser",{"_index":1383,"title":{},"body":{"injectables/UsersService.html":{}}}],["deleteuser(id",{"_index":1395,"title":{},"body":{"injectables/UsersService.html":{}}}],["deleteuserresponsedto",{"_index":542,"title":{"classes/DeleteUserResponseDto.html":{}},"body":{"classes/DeleteUserResponseDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["department",{"_index":607,"title":{},"body":{"injectables/DepartmentsService.html":{},"injectables/ExpensesService.html":{},"injectables/UsersService.html":{}}}],["departmentexist",{"_index":610,"title":{},"body":{"injectables/DepartmentsService.html":{}}}],["departmentid",{"_index":367,"title":{},"body":{"classes/CreateExpenseDto.html":{},"classes/CreateUserDto.html":{},"controllers/DepartmentsController.html":{},"injectables/DepartmentsService.html":{},"injectables/ExpensesService.html":{},"classes/UpdateExpenseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{},"injectables/UsersService.html":{}}}],["departments",{"_index":605,"title":{},"body":{"injectables/DepartmentsService.html":{}}}],["departments.controller",{"_index":586,"title":{},"body":{"modules/DepartmentsModule.html":{}}}],["departments.service",{"_index":572,"title":{},"body":{"controllers/DepartmentsController.html":{},"modules/DepartmentsModule.html":{}}}],["departments/departments.module",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["departmentscontroller",{"_index":546,"title":{"controllers/DepartmentsController.html":{}},"body":{"controllers/DepartmentsController.html":{},"modules/DepartmentsModule.html":{},"coverage.html":{}}}],["departmentsmodule",{"_index":40,"title":{"modules/DepartmentsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DepartmentsModule.html":{},"modules.html":{},"overview.html":{}}}],["departmentsservice",{"_index":571,"title":{"injectables/DepartmentsService.html":{}},"body":{"controllers/DepartmentsController.html":{},"modules/DepartmentsModule.html":{},"injectables/DepartmentsService.html":{},"coverage.html":{},"overview.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DepartmentsModule.html":{},"modules/ExpenseCategoryModule.html":{},"modules/ExpensesModule.html":{},"modules/MilestonesModule.html":{},"modules/PrismaModule.html":{},"modules/ProductsModule.html":{},"modules/ProjectsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":1606,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":1625,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":1616,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":1636,"title":{},"body":{"index.html":{}}}],["deptname",{"_index":788,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["description",{"_index":128,"title":{},"body":{"classes/AssignTaskDto-1.html":{},"classes/CostAllocationDto.html":{},"classes/CreateMilestoneDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateProjectWithAllocationsDto.html":{},"injectables/MilestonesService.html":{},"injectables/ProductsService.html":{},"injectables/ProjectsService.html":{},"classes/TaskDto.html":{},"classes/TaskNameDto.html":{},"classes/TaskProjectDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/UpdateMilestoneDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTaskStatusDto.html":{},"controllers/UsersController.html":{},"classes/ViewAssignedTaskResponseDto.html":{},"index.html":{},"properties.html":{}}}],["destination",{"_index":1341,"title":{},"body":{"controllers/UsersController.html":{}}}],["details",{"_index":1133,"title":{},"body":{"classes/TaskDto.html":{},"classes/TaskProjectDto.html":{},"classes/ViewAssignedTaskResponseDto.html":{}}}],["developer",{"_index":483,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["developer'})@isoptional()@isstring",{"_index":1200,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["development",{"_index":1592,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":1667,"title":{},"body":{"index.html":{}}}],["discord",{"_index":1652,"title":{},"body":{"index.html":{}}}],["diskstorage",{"_index":1318,"title":{},"body":{"controllers/UsersController.html":{}}}],["dive",{"_index":1654,"title":{},"body":{"index.html":{}}}],["dob",{"_index":447,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{},"injectables/UsersService.html":{}}}],["documentation",{"_index":1517,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dto",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto.dto",{"_index":1315,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto.dto.ts",{"_index":119,"title":{},"body":{"classes/AssignTaskDto-1.html":{},"classes/TaskNameDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/UpdateTaskStatusDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["dto.dto.ts:16",{"_index":1142,"title":{},"body":{"classes/TaskNameDto.html":{}}}],["dto.dto.ts:22",{"_index":122,"title":{},"body":{"classes/AssignTaskDto-1.html":{}}}],["dto.dto.ts:29",{"_index":131,"title":{},"body":{"classes/AssignTaskDto-1.html":{}}}],["dto.dto.ts:34",{"_index":125,"title":{},"body":{"classes/AssignTaskDto-1.html":{}}}],["dto.dto.ts:47",{"_index":1186,"title":{},"body":{"classes/UpdateTaskStatusDto.html":{}}}],["dto.dto.ts:52",{"_index":1184,"title":{},"body":{"classes/UpdateTaskStatusDto.html":{}}}],["dto.dto.ts:57",{"_index":1146,"title":{},"body":{"classes/TaskStatusCountDto.html":{}}}],["dto.dto.ts:60",{"_index":1145,"title":{},"body":{"classes/TaskStatusCountDto.html":{}}}],["dto.dto.ts:63",{"_index":1144,"title":{},"body":{"classes/TaskStatusCountDto.html":{}}}],["dto.email",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto.name",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto.password",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto.role",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto/all",{"_index":1331,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/assign",{"_index":1334,"title":{},"body":{"controllers/UsersController.html":{}}}],["dto/auth.dto",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/create",{"_index":1313,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/delete",{"_index":1333,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/expense.dto",{"_index":700,"title":{},"body":{"controllers/ExpensesController.html":{},"injectables/ExpensesService.html":{}}}],["dto/milestone.dto",{"_index":845,"title":{},"body":{"controllers/MilestonesController.html":{},"injectables/MilestonesService.html":{}}}],["dto/products.dto",{"_index":971,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["dto/task",{"_index":1314,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/update",{"_index":1311,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/user",{"_index":1329,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/view",{"_index":1336,"title":{},"body":{"controllers/UsersController.html":{}}}],["e2e",{"_index":1601,"title":{},"body":{"index.html":{}}}],["each",{"_index":107,"title":{},"body":{"classes/AssignTaskDto.html":{},"classes/AssignTaskDto-1.html":{},"classes/AssignTaskResponseDto.html":{},"classes/CostAllocationDto.html":{},"classes/CreateProjectWithAllocationsDto.html":{},"classes/TaskInput.html":{},"classes/TaskNameDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTaskStatusDto.html":{}}}],["efficient",{"_index":1579,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":1614,"title":{},"body":{"index.html":{}}}],["email",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/ExpensesService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{},"injectables/UsersService.html":{}}}],["emp",{"_index":1414,"title":{},"body":{"injectables/UsersService.html":{}}}],["empid",{"_index":743,"title":{},"body":{"injectables/ExpensesService.html":{},"injectables/UsersService.html":{}}}],["employee",{"_index":120,"title":{},"body":{"classes/AssignTaskDto-1.html":{},"classes/CostAllocationDto.html":{},"classes/CreateProjectWithAllocationsDto.html":{},"injectables/ExpensesService.html":{},"injectables/ProjectsService.html":{},"classes/TaskNameDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTaskStatusDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["employeeid",{"_index":75,"title":{},"body":{"classes/AssignTaskDto.html":{},"classes/AssignTaskDto-1.html":{},"classes/AssignTaskResponseDto.html":{},"classes/CreateExpenseDto.html":{},"controllers/ExpensesController.html":{},"injectables/ExpensesService.html":{},"injectables/ProjectsService.html":{},"classes/TaskInput.html":{},"classes/TaskNameDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/UpdateExpenseDto.html":{},"classes/UpdateTaskStatusDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["employeeids",{"_index":358,"title":{},"body":{"classes/CostAllocationDto.html":{},"classes/CreateProjectWithAllocationsDto.html":{},"injectables/ProjectsService.html":{},"classes/UpdateProjectDto.html":{}}}],["employeeids.length",{"_index":1080,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["employeeids.map((employeeid",{"_index":1090,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["enddate",{"_index":354,"title":{},"body":{"classes/CostAllocationDto.html":{},"classes/CreateProjectWithAllocationsDto.html":{},"injectables/ProjectsService.html":{},"classes/UpdateProjectDto.html":{}}}],["endofyear",{"_index":1496,"title":{},"body":{"injectables/UsersService.html":{}}}],["ensure",{"_index":1612,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":1671,"title":{},"body":{"index.html":{}}}],["enum",{"_index":140,"title":{},"body":{"classes/AssignTaskDto-1.html":{},"classes/CreateExpenseDto.html":{},"classes/CreateUserDto.html":{},"classes/TaskDto.html":{},"classes/TaskNameDto.html":{},"classes/TaskProjectDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/UpdateExpenseDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{},"classes/ViewAssignedTaskResponseDto.html":{}}}],["enumerations",{"_index":1567,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["err",{"_index":269,"title":{},"body":{"guards/AuthGuard.html":{}}}],["error",{"_index":228,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ExpensesService.html":{},"injectables/ProjectsService.html":{},"injectables/UsersService.html":{}}}],["error('user",{"_index":1410,"title":{},"body":{"injectables/UsersService.html":{}}}],["example",{"_index":103,"title":{},"body":{"classes/AssignTaskDto.html":{},"classes/AssignTaskDto-1.html":{},"classes/AssignTaskResponseDto.html":{},"classes/CreateUserDto.html":{},"classes/DashboardCountsDto.html":{},"classes/DeleteUserResponseDto.html":{},"classes/TaskDto.html":{},"classes/TaskInput.html":{},"classes/TaskNameDto.html":{},"classes/TaskProjectDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/TaskStatusCountsDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"classes/ViewAssignedTaskResponseDto.html":{},"index.html":{}}}],["exceed",{"_index":902,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["excluding",{"_index":909,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["executioncontext",{"_index":240,"title":{},"body":{"guards/AuthGuard.html":{}}}],["exist",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ExpenseCategoryService.html":{},"injectables/MilestonesService.html":{},"injectables/ProjectsService.html":{},"injectables/UsersService.html":{}}}],["existing",{"_index":1437,"title":{},"body":{"injectables/UsersService.html":{}}}],["existingmilestones",{"_index":896,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["existingmilestones.reduce",{"_index":898,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["existingtask",{"_index":1476,"title":{},"body":{"injectables/UsersService.html":{}}}],["existinguser",{"_index":1408,"title":{},"body":{"injectables/UsersService.html":{}}}],["existinguser.address",{"_index":1452,"title":{},"body":{"injectables/UsersService.html":{}}}],["existinguser.city",{"_index":1454,"title":{},"body":{"injectables/UsersService.html":{}}}],["existinguser.departmentid",{"_index":1447,"title":{},"body":{"injectables/UsersService.html":{}}}],["existinguser.dob",{"_index":1446,"title":{},"body":{"injectables/UsersService.html":{}}}],["existinguser.email",{"_index":1443,"title":{},"body":{"injectables/UsersService.html":{}}}],["existinguser.empid",{"_index":1440,"title":{},"body":{"injectables/UsersService.html":{}}}],["existinguser.firstname",{"_index":1441,"title":{},"body":{"injectables/UsersService.html":{}}}],["existinguser.hiredate",{"_index":1451,"title":{},"body":{"injectables/UsersService.html":{}}}],["existinguser.jobtitle",{"_index":1448,"title":{},"body":{"injectables/UsersService.html":{}}}],["existinguser.lastname",{"_index":1442,"title":{},"body":{"injectables/UsersService.html":{}}}],["existinguser.password",{"_index":1458,"title":{},"body":{"injectables/UsersService.html":{}}}],["existinguser.phone",{"_index":1444,"title":{},"body":{"injectables/UsersService.html":{}}}],["existinguser.pincode",{"_index":1455,"title":{},"body":{"injectables/UsersService.html":{}}}],["existinguser.role",{"_index":1456,"title":{},"body":{"injectables/UsersService.html":{}}}],["existinguser.salary",{"_index":1449,"title":{},"body":{"injectables/UsersService.html":{}}}],["existinguser.state",{"_index":1453,"title":{},"body":{"injectables/UsersService.html":{}}}],["exists",{"_index":339,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DepartmentsService.html":{},"injectables/ExpenseCategoryService.html":{},"injectables/ExpensesService.html":{},"injectables/MilestonesService.html":{},"injectables/ProductsService.html":{},"injectables/ProjectsService.html":{},"injectables/UsersService.html":{}}}],["expect",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ExpensesService.html":{},"injectables/ProjectsService.html":{},"injectables/UsersService.html":{}}}],["expense",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"controllers/ExpenseCategoryController.html":{},"modules/ExpenseCategoryModule.html":{},"injectables/ExpenseCategoryService.html":{},"injectables/ExpensesService.html":{}}}],["expense.amount",{"_index":761,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["expense.date",{"_index":767,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["expense.department.name",{"_index":789,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["expense.departmentid",{"_index":753,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["expense.employeeid",{"_index":755,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["expense.expensecatid",{"_index":757,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["expense.notes",{"_index":769,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["expense.product?.category?.name",{"_index":778,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["expense.productid",{"_index":759,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["expense.quantity",{"_index":763,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["expense.total",{"_index":765,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["expensecat",{"_index":671,"title":{},"body":{"injectables/ExpenseCategoryService.html":{}}}],["expensecategories",{"_index":669,"title":{},"body":{"injectables/ExpenseCategoryService.html":{}}}],["expensecategory",{"_index":667,"title":{},"body":{"injectables/ExpenseCategoryService.html":{},"injectables/ExpensesService.html":{}}}],["expensecategorycontroller",{"_index":619,"title":{"controllers/ExpenseCategoryController.html":{}},"body":{"controllers/ExpenseCategoryController.html":{},"modules/ExpenseCategoryModule.html":{},"coverage.html":{}}}],["expensecategoryexist",{"_index":675,"title":{},"body":{"injectables/ExpenseCategoryService.html":{}}}],["expensecategorymodule",{"_index":41,"title":{"modules/ExpenseCategoryModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ExpenseCategoryModule.html":{},"modules.html":{},"overview.html":{}}}],["expensecategoryservice",{"_index":636,"title":{"injectables/ExpenseCategoryService.html":{}},"body":{"controllers/ExpenseCategoryController.html":{},"modules/ExpenseCategoryModule.html":{},"injectables/ExpenseCategoryService.html":{},"coverage.html":{},"overview.html":{}}}],["expensecatid",{"_index":368,"title":{},"body":{"classes/CreateExpenseDto.html":{},"injectables/ExpensesService.html":{},"classes/UpdateExpenseDto.html":{}}}],["expenseid",{"_index":629,"title":{},"body":{"controllers/ExpenseCategoryController.html":{},"injectables/ExpenseCategoryService.html":{},"controllers/ExpensesController.html":{},"injectables/ExpensesService.html":{}}}],["expenses",{"_index":739,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["expenses.controller",{"_index":715,"title":{},"body":{"modules/ExpensesModule.html":{}}}],["expenses.service",{"_index":699,"title":{},"body":{"controllers/ExpensesController.html":{},"modules/ExpensesModule.html":{}}}],["expenses/expenses.module",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["expensescontroller",{"_index":680,"title":{"controllers/ExpensesController.html":{}},"body":{"controllers/ExpensesController.html":{},"modules/ExpensesModule.html":{},"coverage.html":{}}}],["expensesmodule",{"_index":42,"title":{"modules/ExpensesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ExpensesModule.html":{},"modules.html":{},"overview.html":{}}}],["expensesservice",{"_index":698,"title":{"injectables/ExpensesService.html":{}},"body":{"controllers/ExpensesController.html":{},"modules/ExpensesModule.html":{},"injectables/ExpensesService.html":{},"coverage.html":{},"overview.html":{}}}],["expensestatus",{"_index":390,"title":{},"body":{"classes/CreateExpenseDto.html":{},"classes/UpdateExpenseDto.html":{},"miscellaneous/enumerations.html":{}}}],["experience",{"_index":1657,"title":{},"body":{"index.html":{}}}],["expired",{"_index":271,"title":{},"body":{"guards/AuthGuard.html":{}}}],["expiresin",{"_index":289,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AssignTaskDto.html":{},"classes/AssignTaskDto-1.html":{},"classes/AssignTaskResponseDto.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CostAllocationDto.html":{},"classes/CreateExpenseDto.html":{},"classes/CreateMilestoneDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateProjectWithAllocationsDto.html":{},"classes/CreateUserDto.html":{},"classes/DashboardCountsDto.html":{},"classes/DeleteUserResponseDto.html":{},"controllers/DepartmentsController.html":{},"modules/DepartmentsModule.html":{},"injectables/DepartmentsService.html":{},"controllers/ExpenseCategoryController.html":{},"modules/ExpenseCategoryModule.html":{},"injectables/ExpenseCategoryService.html":{},"controllers/ExpensesController.html":{},"modules/ExpensesModule.html":{},"injectables/ExpensesService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"controllers/MilestonesController.html":{},"modules/MilestonesModule.html":{},"injectables/MilestonesService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"injectables/ProjectsService.html":{},"classes/RegisterDto.html":{},"classes/TaskDto.html":{},"classes/TaskInput.html":{},"classes/TaskNameDto.html":{},"classes/TaskProjectDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/TaskStatusCountsDto.html":{},"classes/UpdateExpenseDto.html":{},"classes/UpdateMilestoneDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ViewAssignedTaskResponseDto.html":{}}}],["exports",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DepartmentsModule.html":{},"modules/ExpenseCategoryModule.html":{},"modules/ExpensesModule.html":{},"modules/MilestonesModule.html":{},"modules/PrismaModule.html":{},"modules/ProductsModule.html":{},"modules/ProjectsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":1258,"title":{},"body":{"controllers/UsersController.html":{}}}],["extends",{"_index":428,"title":{},"body":{"classes/CreateProductDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"classes/UpdateProductDto.html":{}}}],["extname",{"_index":1321,"title":{},"body":{"controllers/UsersController.html":{}}}],["extractjwt",{"_index":804,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromextractors",{"_index":809,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["failed",{"_index":1338,"title":{},"body":{"controllers/UsersController.html":{}}}],["failed'})@useinterceptors(undefined",{"_index":1265,"title":{},"body":{"controllers/UsersController.html":{}}}],["fallback",{"_index":1436,"title":{},"body":{"injectables/UsersService.html":{}}}],["false",{"_index":109,"title":{},"body":{"classes/AssignTaskDto.html":{},"classes/AssignTaskResponseDto.html":{},"injectables/AuthService.html":{},"injectables/DepartmentsService.html":{},"injectables/ExpenseCategoryService.html":{},"injectables/ExpensesService.html":{},"injectables/MilestonesService.html":{},"injectables/ProductsService.html":{},"injectables/ProjectsService.html":{},"classes/TaskInput.html":{},"classes/UserResponseDto.html":{},"injectables/UsersService.html":{}}}],["false})@isuuid()@isoptional",{"_index":87,"title":{},"body":{"classes/AssignTaskDto.html":{}}}],["fast",{"_index":1629,"title":{},"body":{"index.html":{}}}],["features",{"_index":1640,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":1304,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetched",{"_index":1282,"title":{},"body":{"controllers/UsersController.html":{}}}],["few",{"_index":1631,"title":{},"body":{"index.html":{}}}],["field",{"_index":1434,"title":{},"body":{"injectables/UsersService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AssignTaskDto.html":{},"classes/AssignTaskDto-1.html":{},"classes/AssignTaskResponseDto.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CostAllocationDto.html":{},"classes/CreateExpenseDto.html":{},"classes/CreateMilestoneDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateProjectWithAllocationsDto.html":{},"classes/CreateUserDto.html":{},"classes/DashboardCountsDto.html":{},"classes/DeleteUserResponseDto.html":{},"controllers/DepartmentsController.html":{},"modules/DepartmentsModule.html":{},"injectables/DepartmentsService.html":{},"controllers/ExpenseCategoryController.html":{},"modules/ExpenseCategoryModule.html":{},"injectables/ExpenseCategoryService.html":{},"controllers/ExpensesController.html":{},"modules/ExpensesModule.html":{},"injectables/ExpensesService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"controllers/MilestonesController.html":{},"modules/MilestonesModule.html":{},"injectables/MilestonesService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"injectables/ProjectsService.html":{},"classes/RegisterDto.html":{},"classes/TaskDto.html":{},"classes/TaskInput.html":{},"classes/TaskNameDto.html":{},"classes/TaskProjectDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/TaskStatusCountsDto.html":{},"classes/UpdateExpenseDto.html":{},"classes/UpdateMilestoneDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ViewAssignedTaskResponseDto.html":{},"coverage.html":{}}}],["file?.path",{"_index":1352,"title":{},"body":{"controllers/UsersController.html":{}}}],["fileinterceptor",{"_index":1316,"title":{},"body":{"controllers/UsersController.html":{}}}],["fileinterceptor('profileimage",{"_index":1339,"title":{},"body":{"controllers/UsersController.html":{}}}],["filename",{"_index":1343,"title":{},"body":{"controllers/UsersController.html":{}}}],["filter((m",{"_index":938,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["finalexpensecatid",{"_index":746,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["findall",{"_index":550,"title":{},"body":{"controllers/DepartmentsController.html":{},"injectables/DepartmentsService.html":{},"controllers/ExpenseCategoryController.html":{},"controllers/ExpensesController.html":{},"controllers/MilestonesController.html":{},"controllers/ProductsController.html":{},"controllers/ProjectsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findallbyprojectid",{"_index":865,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["findallbyprojectid(projectid",{"_index":875,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["findallexpensecat",{"_index":654,"title":{},"body":{"injectables/ExpenseCategoryService.html":{}}}],["findallexpenses",{"_index":720,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["findallmilestones",{"_index":866,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["findallproducts",{"_index":988,"title":{},"body":{"injectables/ProductsService.html":{}}}],["findallprojects",{"_index":1055,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["findbyid",{"_index":1384,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyid(id",{"_index":1398,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbymilestoneid",{"_index":821,"title":{},"body":{"controllers/MilestonesController.html":{}}}],["findbymilestoneid(@param('milestoneid",{"_index":848,"title":{},"body":{"controllers/MilestonesController.html":{}}}],["findbymilestoneid(milestoneid",{"_index":826,"title":{},"body":{"controllers/MilestonesController.html":{}}}],["findbyprojectid",{"_index":822,"title":{},"body":{"controllers/MilestonesController.html":{}}}],["findbyprojectid(@param('projectid",{"_index":850,"title":{},"body":{"controllers/MilestonesController.html":{}}}],["findbyprojectid(projectid",{"_index":831,"title":{},"body":{"controllers/MilestonesController.html":{}}}],["findone",{"_index":551,"title":{},"body":{"controllers/DepartmentsController.html":{},"controllers/ExpenseCategoryController.html":{},"controllers/ExpensesController.html":{},"controllers/ProductsController.html":{},"controllers/ProjectsController.html":{},"injectables/ProjectsService.html":{},"controllers/UsersController.html":{}}}],["findone(@param('departmentid",{"_index":575,"title":{},"body":{"controllers/DepartmentsController.html":{}}}],["findone(@param('expenseid",{"_index":640,"title":{},"body":{"controllers/ExpenseCategoryController.html":{},"controllers/ExpensesController.html":{}}}],["findone(@param('id",{"_index":1358,"title":{},"body":{"controllers/UsersController.html":{}}}],["findone(@param('productid",{"_index":974,"title":{},"body":{"controllers/ProductsController.html":{}}}],["findone(@param('projectid",{"_index":1039,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["findone(departmentid",{"_index":558,"title":{},"body":{"controllers/DepartmentsController.html":{}}}],["findone(expenseid",{"_index":626,"title":{},"body":{"controllers/ExpenseCategoryController.html":{},"controllers/ExpensesController.html":{}}}],["findone(id",{"_index":1272,"title":{},"body":{"controllers/UsersController.html":{}}}],["findone(productid",{"_index":960,"title":{},"body":{"controllers/ProductsController.html":{}}}],["findone(projectid",{"_index":1024,"title":{},"body":{"controllers/ProjectsController.html":{},"injectables/ProjectsService.html":{}}}],["findonebymilestoneid",{"_index":867,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["findonebymilestoneid(milestoneid",{"_index":878,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["findonedepartment",{"_index":590,"title":{},"body":{"injectables/DepartmentsService.html":{}}}],["findonedepartment(departmentid",{"_index":599,"title":{},"body":{"injectables/DepartmentsService.html":{}}}],["findoneexpense",{"_index":721,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["findoneexpense(expenseid",{"_index":732,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["findoneexpensecat",{"_index":655,"title":{},"body":{"injectables/ExpenseCategoryService.html":{}}}],["findoneexpensecat(expenseid",{"_index":663,"title":{},"body":{"injectables/ExpenseCategoryService.html":{}}}],["findoneproduct",{"_index":989,"title":{},"body":{"injectables/ProductsService.html":{}}}],["findoneproduct(productid",{"_index":997,"title":{},"body":{"injectables/ProductsService.html":{}}}],["firstname",{"_index":448,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/ExpensesService.html":{},"injectables/ProjectsService.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{},"injectables/UsersService.html":{}}}],["fix",{"_index":104,"title":{},"body":{"classes/AssignTaskDto.html":{},"classes/AssignTaskDto-1.html":{},"classes/AssignTaskResponseDto.html":{},"classes/TaskDto.html":{},"classes/TaskInput.html":{},"classes/TaskNameDto.html":{},"classes/TaskProjectDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/ViewAssignedTaskResponseDto.html":{}}}],["fns",{"_index":738,"title":{},"body":{"injectables/ExpensesService.html":{},"dependencies.html":{}}}],["focus",{"_index":1639,"title":{},"body":{"index.html":{}}}],["follow",{"_index":1674,"title":{},"body":{"index.html":{}}}],["format",{"_index":414,"title":{},"body":{"classes/CreateMilestoneDto.html":{},"classes/CreateUserDto.html":{},"injectables/ExpensesService.html":{},"classes/UpdateMilestoneDto.html":{},"classes/UpdateUserDto.html":{}}}],["format(startofday(expense.date",{"_index":774,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["formattedproducts",{"_index":1003,"title":{},"body":{"injectables/ProductsService.html":{}}}],["found",{"_index":892,"title":{},"body":{"injectables/MilestonesService.html":{},"injectables/ProjectsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["found'})@apinotfoundresponse({description",{"_index":1276,"title":{},"body":{"controllers/UsersController.html":{}}}],["framework",{"_index":1577,"title":{},"body":{"index.html":{}}}],["full",{"_index":1670,"title":{},"body":{"index.html":{}}}],["function",{"_index":1531,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":1571,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":1634,"title":{},"body":{"index.html":{}}}],["get('/all",{"_index":1244,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/chart",{"_index":689,"title":{},"body":{"controllers/ExpensesController.html":{}}}],["get('/charts/radial",{"_index":834,"title":{},"body":{"controllers/MilestonesController.html":{}}}],["get('/employee/:employeeid",{"_index":687,"title":{},"body":{"controllers/ExpensesController.html":{}}}],["get('/milestone",{"_index":827,"title":{},"body":{"controllers/MilestonesController.html":{}}}],["get('/pie",{"_index":694,"title":{},"body":{"controllers/ExpensesController.html":{}}}],["get('/task",{"_index":1279,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/view",{"_index":1300,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':departmentid",{"_index":559,"title":{},"body":{"controllers/DepartmentsController.html":{}}}],["get(':expenseid",{"_index":627,"title":{},"body":{"controllers/ExpenseCategoryController.html":{},"controllers/ExpensesController.html":{}}}],["get(':id",{"_index":1357,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':id')@apioperation({summary",{"_index":1273,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':productid",{"_index":961,"title":{},"body":{"controllers/ProductsController.html":{}}}],["get(':projectid",{"_index":832,"title":{},"body":{"controllers/MilestonesController.html":{},"controllers/ProjectsController.html":{}}}],["get('me",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{}}}],["get()@apioperation({summary",{"_index":1267,"title":{},"body":{"controllers/UsersController.html":{}}}],["getallcounts",{"_index":1385,"title":{},"body":{"injectables/UsersService.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getme",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{}}}],["getme(@req",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{}}}],["getme(req",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{}}}],["gettaskstatuscount",{"_index":1241,"title":{},"body":{"controllers/UsersController.html":{}}}],["gettaskstatuscount(@param('employeeid",{"_index":1374,"title":{},"body":{"controllers/UsersController.html":{}}}],["gettaskstatuscount(employeeid",{"_index":1278,"title":{},"body":{"controllers/UsersController.html":{}}}],["getting",{"_index":1573,"title":{"index.html":{}},"body":{}}],["global",{"_index":950,"title":{},"body":{"modules/PrismaModule.html":{}}}],["graph",{"_index":1662,"title":{},"body":{"index.html":{}}}],["grouped",{"_index":1484,"title":{},"body":{"injectables/UsersService.html":{}}}],["grouped.foreach((item",{"_index":1488,"title":{},"body":{"injectables/UsersService.html":{}}}],["groupeddata",{"_index":771,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["groupeddata[datekey",{"_index":780,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["groupeddata[datekey][category",{"_index":781,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["grow",{"_index":1684,"title":{},"body":{"index.html":{}}}],["gte",{"_index":1505,"title":{},"body":{"injectables/UsersService.html":{}}}],["guard",{"_index":235,"title":{"guards/AuthGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":236,"title":{},"body":{"guards/AuthGuard.html":{}}}],["handle",{"_index":1433,"title":{},"body":{"injectables/UsersService.html":{}}}],["hands",{"_index":1656,"title":{},"body":{"index.html":{}}}],["handy",{"_index":1645,"title":{},"body":{"index.html":{}}}],["hashedpassword",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["header",{"_index":255,"title":{},"body":{"guards/AuthGuard.html":{}}}],["hello",{"_index":68,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":1660,"title":{},"body":{"index.html":{}}}],["here",{"_index":1692,"title":{},"body":{"index.html":{}}}],["hiredate",{"_index":449,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{},"injectables/UsersService.html":{}}}],["httpcode",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(200",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(200)@post('login",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(200)@post('logout",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{}}}],["httponly",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{}}}],["https://example.com/profile.jpg",{"_index":516,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["https://example.com/profile.jpg'})@isoptional()@isstring",{"_index":496,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["https://nestjs.com",{"_index":1696,"title":{},"body":{"index.html":{}}}],["id",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DepartmentsService.html":{},"injectables/ExpenseCategoryService.html":{},"injectables/ExpensesService.html":{},"injectables/MilestonesService.html":{},"injectables/ProductsService.html":{},"injectables/ProjectsService.html":{},"classes/TaskDto.html":{},"classes/TaskProjectDto.html":{},"classes/UserResponseDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ViewAssignedTaskResponseDto.html":{}}}],["id'})@apiokresponse({type",{"_index":1275,"title":{},"body":{"controllers/UsersController.html":{}}}],["id'})@apiparam({name",{"_index":1274,"title":{},"body":{"controllers/UsersController.html":{}}}],["identifier",{"_index":1518,"title":{},"body":{"coverage.html":{}}}],["imagepath",{"_index":1351,"title":{},"body":{"controllers/UsersController.html":{}}}],["implements",{"_index":247,"title":{},"body":{"guards/AuthGuard.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AssignTaskDto.html":{},"classes/AssignTaskDto-1.html":{},"classes/AssignTaskResponseDto.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CostAllocationDto.html":{},"classes/CreateExpenseDto.html":{},"classes/CreateMilestoneDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateProjectWithAllocationsDto.html":{},"classes/CreateUserDto.html":{},"classes/DashboardCountsDto.html":{},"classes/DeleteUserResponseDto.html":{},"controllers/DepartmentsController.html":{},"modules/DepartmentsModule.html":{},"injectables/DepartmentsService.html":{},"controllers/ExpenseCategoryController.html":{},"modules/ExpenseCategoryModule.html":{},"injectables/ExpenseCategoryService.html":{},"controllers/ExpensesController.html":{},"modules/ExpensesModule.html":{},"injectables/ExpensesService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"controllers/MilestonesController.html":{},"modules/MilestonesModule.html":{},"injectables/MilestonesService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"injectables/ProjectsService.html":{},"classes/RegisterDto.html":{},"classes/TaskDto.html":{},"classes/TaskInput.html":{},"classes/TaskNameDto.html":{},"classes/TaskProjectDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/TaskStatusCountsDto.html":{},"classes/UpdateExpenseDto.html":{},"classes/UpdateMilestoneDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ViewAssignedTaskResponseDto.html":{}}}],["imports",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["in_progress",{"_index":143,"title":{},"body":{"classes/AssignTaskDto-1.html":{},"classes/DashboardCountsDto.html":{},"classes/TaskDto.html":{},"classes/TaskNameDto.html":{},"classes/TaskProjectDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/TaskStatusCountsDto.html":{},"classes/UpdateTaskStatusDto.html":{},"injectables/UsersService.html":{},"classes/ViewAssignedTaskResponseDto.html":{},"miscellaneous/enumerations.html":{}}}],["inactive",{"_index":1501,"title":{},"body":{"injectables/UsersService.html":{}}}],["inactiveemployees",{"_index":521,"title":{},"body":{"classes/DashboardCountsDto.html":{},"classes/TaskStatusCountsDto.html":{},"injectables/UsersService.html":{}}}],["include",{"_index":741,"title":{},"body":{"injectables/ExpensesService.html":{},"injectables/MilestonesService.html":{},"injectables/ProductsService.html":{},"injectables/ProjectsService.html":{},"injectables/UsersService.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/AssignTaskDto.html":{},"classes/AssignTaskDto-1.html":{},"classes/AssignTaskResponseDto.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CostAllocationDto.html":{},"classes/CreateExpenseDto.html":{},"classes/CreateMilestoneDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateProjectWithAllocationsDto.html":{},"classes/CreateUserDto.html":{},"classes/DashboardCountsDto.html":{},"classes/DeleteUserResponseDto.html":{},"controllers/DepartmentsController.html":{},"injectables/DepartmentsService.html":{},"controllers/ExpenseCategoryController.html":{},"injectables/ExpenseCategoryService.html":{},"controllers/ExpensesController.html":{},"injectables/ExpensesService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"controllers/MilestonesController.html":{},"injectables/MilestonesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/ProjectsController.html":{},"injectables/ProjectsService.html":{},"classes/RegisterDto.html":{},"classes/TaskDto.html":{},"classes/TaskInput.html":{},"classes/TaskNameDto.html":{},"classes/TaskProjectDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/TaskStatusCountsDto.html":{},"classes/UpdateExpenseDto.html":{},"classes/UpdateMilestoneDto.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ViewAssignedTaskResponseDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AssignTaskDto.html":{},"classes/AssignTaskDto-1.html":{},"classes/AssignTaskResponseDto.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CostAllocationDto.html":{},"classes/CreateExpenseDto.html":{},"classes/CreateMilestoneDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateProjectWithAllocationsDto.html":{},"classes/CreateUserDto.html":{},"classes/DashboardCountsDto.html":{},"classes/DeleteUserResponseDto.html":{},"controllers/DepartmentsController.html":{},"modules/DepartmentsModule.html":{},"injectables/DepartmentsService.html":{},"controllers/ExpenseCategoryController.html":{},"modules/ExpenseCategoryModule.html":{},"injectables/ExpenseCategoryService.html":{},"controllers/ExpensesController.html":{},"modules/ExpensesModule.html":{},"injectables/ExpensesService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"controllers/MilestonesController.html":{},"modules/MilestonesModule.html":{},"injectables/MilestonesService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"injectables/ProjectsService.html":{},"classes/RegisterDto.html":{},"classes/TaskDto.html":{},"classes/TaskInput.html":{},"classes/TaskNameDto.html":{},"classes/TaskProjectDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/TaskStatusCountsDto.html":{},"classes/UpdateExpenseDto.html":{},"classes/UpdateMilestoneDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ViewAssignedTaskResponseDto.html":{}}}],["information",{"_index":1618,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":1642,"title":{},"body":{"index.html":{}}}],["initialize",{"_index":1509,"title":{},"body":{"injectables/UsersService.html":{}}}],["inject",{"_index":292,"title":{},"body":{"modules/AuthModule.html":{}}}],["injectable",{"_index":64,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/DepartmentsService.html":{},"injectables/ExpenseCategoryService.html":{},"injectables/ExpensesService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/MilestonesService.html":{},"injectables/PrismaService.html":{},"injectables/ProductsService.html":{},"injectables/ProjectsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/DepartmentsService.html":{},"injectables/ExpenseCategoryService.html":{},"injectables/ExpensesService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/MilestonesService.html":{},"injectables/PrismaService.html":{},"injectables/ProductsService.html":{},"injectables/ProjectsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":65,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/DepartmentsService.html":{},"injectables/ExpenseCategoryService.html":{},"injectables/ExpensesService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/MilestonesService.html":{},"injectables/PrismaService.html":{},"injectables/ProductsService.html":{},"injectables/ProjectsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["inprogresscount",{"_index":1473,"title":{},"body":{"injectables/UsersService.html":{}}}],["insert",{"_index":677,"title":{},"body":{"injectables/ExpenseCategoryService.html":{}}}],["install",{"_index":1633,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":1590,"title":{},"body":{"index.html":{}}}],["interact",{"_index":1663,"title":{},"body":{"index.html":{}}}],["isarray",{"_index":98,"title":{},"body":{"classes/AssignTaskDto.html":{},"classes/AssignTaskDto-1.html":{},"classes/AssignTaskResponseDto.html":{},"classes/CostAllocationDto.html":{},"classes/CreateProjectWithAllocationsDto.html":{},"classes/TaskInput.html":{},"classes/TaskNameDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTaskStatusDto.html":{}}}],["isarray()@arrayminsize(1",{"_index":432,"title":{},"body":{"classes/CreateProjectWithAllocationsDto.html":{}}}],["isdatestring",{"_index":349,"title":{},"body":{"classes/CostAllocationDto.html":{},"classes/CreateExpenseDto.html":{},"classes/CreateMilestoneDto.html":{},"classes/CreateProjectWithAllocationsDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateExpenseDto.html":{},"classes/UpdateMilestoneDto.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateUserDto.html":{}}}],["isdeleted",{"_index":337,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DepartmentsService.html":{},"injectables/ExpenseCategoryService.html":{},"injectables/ExpensesService.html":{},"injectables/MilestonesService.html":{},"injectables/ProductsService.html":{},"injectables/ProjectsService.html":{},"injectables/UsersService.html":{}}}],["isemail",{"_index":507,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["isenum",{"_index":395,"title":{},"body":{"classes/CreateExpenseDto.html":{},"classes/UpdateExpenseDto.html":{}}}],["isenum(expensestatus",{"_index":399,"title":{},"body":{"classes/CreateExpenseDto.html":{},"classes/UpdateExpenseDto.html":{}}}],["isin",{"_index":134,"title":{},"body":{"classes/AssignTaskDto-1.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/TaskNameDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{}}}],["isin(['user",{"_index":514,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["isin(object.values(taskstatus",{"_index":149,"title":{},"body":{"classes/AssignTaskDto-1.html":{},"classes/TaskNameDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/UpdateTaskStatusDto.html":{}}}],["isint",{"_index":394,"title":{},"body":{"classes/CreateExpenseDto.html":{},"classes/CreateMilestoneDto.html":{},"classes/UpdateExpenseDto.html":{},"classes/UpdateMilestoneDto.html":{}}}],["isint()@type(undefined",{"_index":385,"title":{},"body":{"classes/CreateExpenseDto.html":{}}}],["isnotempty",{"_index":96,"title":{},"body":{"classes/AssignTaskDto.html":{},"classes/AssignTaskDto-1.html":{},"classes/AssignTaskResponseDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/TaskInput.html":{},"classes/TaskNameDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/UpdateTaskStatusDto.html":{}}}],["isnumber",{"_index":343,"title":{},"body":{"classes/CostAllocationDto.html":{},"classes/CreateExpenseDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateProjectWithAllocationsDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateExpenseDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateUserDto.html":{}}}],["iso",{"_index":413,"title":{},"body":{"classes/CreateMilestoneDto.html":{},"classes/UpdateMilestoneDto.html":{}}}],["isoptional",{"_index":100,"title":{},"body":{"classes/AssignTaskDto.html":{},"classes/AssignTaskDto-1.html":{},"classes/AssignTaskResponseDto.html":{},"classes/CostAllocationDto.html":{},"classes/CreateExpenseDto.html":{},"classes/CreateMilestoneDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateProjectWithAllocationsDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/TaskInput.html":{},"classes/TaskNameDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/UpdateExpenseDto.html":{},"classes/UpdateMilestoneDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{}}}],["isoptional()@isarray()@isstring({each",{"_index":1177,"title":{},"body":{"classes/UpdateProjectDto.html":{}}}],["isoptional()@isarray()@validatenested({each",{"_index":1174,"title":{},"body":{"classes/UpdateProjectDto.html":{}}}],["isoptional()@isdatestring",{"_index":406,"title":{},"body":{"classes/CreateMilestoneDto.html":{},"classes/UpdateExpenseDto.html":{},"classes/UpdateMilestoneDto.html":{},"classes/UpdateProjectDto.html":{}}}],["isoptional()@isenum(expensestatus",{"_index":391,"title":{},"body":{"classes/CreateExpenseDto.html":{},"classes/UpdateExpenseDto.html":{}}}],["isoptional()@isin(['user",{"_index":1126,"title":{},"body":{"classes/RegisterDto.html":{}}}],["isoptional()@isint",{"_index":1168,"title":{},"body":{"classes/UpdateMilestoneDto.html":{}}}],["isoptional()@isint()@type(undefined",{"_index":1160,"title":{},"body":{"classes/UpdateExpenseDto.html":{}}}],["isoptional()@isnumber",{"_index":419,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProjectDto.html":{}}}],["isoptional()@isnumber()@type(undefined",{"_index":1150,"title":{},"body":{"classes/UpdateExpenseDto.html":{}}}],["isoptional()@isstring",{"_index":347,"title":{},"body":{"classes/CostAllocationDto.html":{},"classes/CreateExpenseDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateProjectWithAllocationsDto.html":{},"classes/UpdateExpenseDto.html":{},"classes/UpdateMilestoneDto.html":{},"classes/UpdateProjectDto.html":{}}}],["isoptional()@isurl",{"_index":387,"title":{},"body":{"classes/CreateExpenseDto.html":{},"classes/UpdateExpenseDto.html":{}}}],["isphonenumber",{"_index":508,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["isphonenumber('in",{"_index":510,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["ispostalcode",{"_index":509,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["ispostalcode('in",{"_index":513,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["isstring",{"_index":133,"title":{},"body":{"classes/AssignTaskDto-1.html":{},"classes/CostAllocationDto.html":{},"classes/CreateExpenseDto.html":{},"classes/CreateMilestoneDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateProjectWithAllocationsDto.html":{},"classes/CreateUserDto.html":{},"classes/TaskNameDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/UpdateExpenseDto.html":{},"classes/UpdateMilestoneDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{}}}],["isurl",{"_index":396,"title":{},"body":{"classes/CreateExpenseDto.html":{},"classes/UpdateExpenseDto.html":{}}}],["isuuid",{"_index":97,"title":{},"body":{"classes/AssignTaskDto.html":{},"classes/AssignTaskResponseDto.html":{},"classes/CreateUserDto.html":{},"classes/TaskInput.html":{},"classes/UpdateUserDto.html":{}}}],["item._count.status",{"_index":1490,"title":{},"body":{"injectables/UsersService.html":{}}}],["job",{"_index":1677,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":1679,"title":{},"body":{"index.html":{}}}],["jobtitle",{"_index":450,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/ProjectsService.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{},"injectables/UsersService.html":{}}}],["join",{"_index":1690,"title":{},"body":{"index.html":{}}}],["jsonwebtoken",{"_index":246,"title":{},"body":{"guards/AuthGuard.html":{}}}],["jwt",{"_index":245,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":279,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt.verify",{"_index":262,"title":{},"body":{"guards/AuthGuard.html":{}}}],["jwtauthguard",{"_index":792,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":808,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":277,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":284,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":274,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["key",{"_index":1609,"title":{},"body":{"index.html":{}}}],["lastname",{"_index":451,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/ExpensesService.html":{},"injectables/ProjectsService.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{},"injectables/UsersService.html":{}}}],["learn",{"_index":1648,"title":{},"body":{"index.html":{}}}],["legend",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DepartmentsModule.html":{},"modules/ExpenseCategoryModule.html":{},"modules/ExpensesModule.html":{},"modules/MilestonesModule.html":{},"modules/PrismaModule.html":{},"modules/ProductsModule.html":{},"modules/ProjectsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["license",{"_index":1699,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1682,"title":{},"body":{"index.html":{}}}],["linkedin",{"_index":1676,"title":{},"body":{"index.html":{}}}],["list",{"_index":1269,"title":{},"body":{"controllers/UsersController.html":{}}}],["literal",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{},"controllers/DepartmentsController.html":{},"injectables/DepartmentsService.html":{},"controllers/ExpenseCategoryController.html":{},"injectables/ExpenseCategoryService.html":{},"injectables/JwtStrategy.html":{},"controllers/ProjectsController.html":{},"injectables/ProjectsService.html":{},"classes/ViewAssignedTaskResponseDto.html":{}}}],["logged",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{}}}],["login",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(dto",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(user",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto",{"_index":171,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"coverage.html":{}}}],["logout",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(@res",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(res",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{}}}],["looking",{"_index":1619,"title":{},"body":{"index.html":{}}}],["loop",{"_index":1673,"title":{},"body":{"index.html":{}}}],["lte",{"_index":1506,"title":{},"body":{"injectables/UsersService.html":{}}}],["m",{"_index":900,"title":{},"body":{"injectables/MilestonesService.html":{},"injectables/ProjectsService.html":{}}}],["m.achieveddate",{"_index":939,"title":{},"body":{"injectables/MilestonesService.html":{},"injectables/ProjectsService.html":{}}}],["m.percentage",{"_index":901,"title":{},"body":{"injectables/MilestonesService.html":{},"injectables/ProjectsService.html":{}}}],["maharashtra",{"_index":505,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["maharashtra'})@isoptional()@isstring",{"_index":1211,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["makes",{"_index":1627,"title":{},"body":{"index.html":{}}}],["malformed",{"_index":257,"title":{},"body":{"guards/AuthGuard.html":{}}}],["managing",{"_index":1641,"title":{},"body":{"index.html":{}}}],["map",{"_index":928,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AssignTaskDto.html":{},"classes/AssignTaskDto-1.html":{},"classes/AssignTaskResponseDto.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CostAllocationDto.html":{},"classes/CreateExpenseDto.html":{},"classes/CreateMilestoneDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateProjectWithAllocationsDto.html":{},"classes/CreateUserDto.html":{},"classes/DashboardCountsDto.html":{},"classes/DeleteUserResponseDto.html":{},"controllers/DepartmentsController.html":{},"modules/DepartmentsModule.html":{},"injectables/DepartmentsService.html":{},"controllers/ExpenseCategoryController.html":{},"modules/ExpenseCategoryModule.html":{},"injectables/ExpenseCategoryService.html":{},"controllers/ExpensesController.html":{},"modules/ExpensesModule.html":{},"injectables/ExpensesService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"controllers/MilestonesController.html":{},"modules/MilestonesModule.html":{},"injectables/MilestonesService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"injectables/ProjectsService.html":{},"classes/RegisterDto.html":{},"classes/TaskDto.html":{},"classes/TaskInput.html":{},"classes/TaskNameDto.html":{},"classes/TaskProjectDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/TaskStatusCountsDto.html":{},"classes/UpdateExpenseDto.html":{},"classes/UpdateMilestoneDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ViewAssignedTaskResponseDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["math.max",{"_index":1077,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["math.round(math.random",{"_index":1347,"title":{},"body":{"controllers/UsersController.html":{}}}],["mau",{"_index":1623,"title":{},"body":{"index.html":{}}}],["maxage",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{}}}],["me(user",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{}}}],["menubar",{"_index":1119,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["message",{"_index":113,"title":{},"body":{"classes/AssignTaskDto.html":{},"classes/AssignTaskResponseDto.html":{},"controllers/AuthController.html":{},"classes/CostAllocationDto.html":{},"classes/CreateExpenseDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateProjectWithAllocationsDto.html":{},"classes/DeleteUserResponseDto.html":{},"injectables/DepartmentsService.html":{},"injectables/ExpenseCategoryService.html":{},"injectables/ExpensesService.html":{},"injectables/MilestonesService.html":{},"injectables/ProductsService.html":{},"injectables/ProjectsService.html":{},"classes/TaskInput.html":{},"classes/UpdateExpenseDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProjectDto.html":{},"injectables/UsersService.html":{}}}],["metadata",{"_index":1560,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/DepartmentsController.html":{},"injectables/DepartmentsService.html":{},"controllers/ExpenseCategoryController.html":{},"injectables/ExpenseCategoryService.html":{},"controllers/ExpensesController.html":{},"injectables/ExpensesService.html":{},"injectables/JwtStrategy.html":{},"controllers/MilestonesController.html":{},"injectables/MilestonesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/ProjectsController.html":{},"injectables/ProjectsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["milestone",{"_index":883,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["milestone.achieveddate",{"_index":925,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["milestone.description",{"_index":921,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["milestone.name",{"_index":919,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["milestone.percentage",{"_index":908,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["milestone.projectid",{"_index":912,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["milestone.targetdate",{"_index":923,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["milestoneexist",{"_index":893,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["milestoneid",{"_index":830,"title":{},"body":{"controllers/MilestonesController.html":{},"injectables/MilestonesService.html":{}}}],["milestoneid/:milestoneid",{"_index":828,"title":{},"body":{"controllers/MilestonesController.html":{}}}],["milestones",{"_index":884,"title":{},"body":{"injectables/MilestonesService.html":{},"injectables/ProjectsService.html":{}}}],["milestones.controller",{"_index":861,"title":{},"body":{"modules/MilestonesModule.html":{}}}],["milestones.length",{"_index":890,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["milestones.reduce",{"_index":1074,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["milestones.service",{"_index":844,"title":{},"body":{"controllers/MilestonesController.html":{},"modules/MilestonesModule.html":{}}}],["milestones/milestones.module",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["milestonescontroller",{"_index":818,"title":{"controllers/MilestonesController.html":{}},"body":{"controllers/MilestonesController.html":{},"modules/MilestonesModule.html":{},"coverage.html":{}}}],["milestonesmodule",{"_index":43,"title":{"modules/MilestonesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MilestonesModule.html":{},"modules.html":{},"overview.html":{}}}],["milestonesservice",{"_index":843,"title":{"injectables/MilestonesService.html":{}},"body":{"controllers/MilestonesController.html":{},"modules/MilestonesModule.html":{},"injectables/MilestonesService.html":{},"coverage.html":{},"overview.html":{}}}],["miscellaneous",{"_index":1566,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["missing",{"_index":256,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/UsersService.html":{}}}],["mit",{"_index":1681,"title":{},"body":{"index.html":{}}}],["mm",{"_index":776,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["mode",{"_index":1595,"title":{},"body":{"index.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DepartmentsModule.html":{},"modules/ExpenseCategoryModule.html":{},"modules/ExpensesModule.html":{},"modules/MilestonesModule.html":{},"modules/PrismaModule.html":{},"modules/ProductsModule.html":{},"modules/ProjectsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"classes/AssignTaskDto.html":{},"classes/AssignTaskResponseDto.html":{},"modules/AuthModule.html":{},"modules/DepartmentsModule.html":{},"modules/ExpenseCategoryModule.html":{},"modules/ExpensesModule.html":{},"modules/MilestonesModule.html":{},"modules/PrismaModule.html":{},"modules/ProductsModule.html":{},"modules/ProjectsModule.html":{},"classes/TaskInput.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["module'})@isnotempty",{"_index":1139,"title":{},"body":{"classes/TaskInput.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DepartmentsModule.html":{},"modules/ExpenseCategoryModule.html":{},"modules/ExpensesModule.html":{},"modules/MilestonesModule.html":{},"modules/PrismaModule.html":{},"modules/ProductsModule.html":{},"modules/ProjectsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":1617,"title":{},"body":{"index.html":{}}}],["multer",{"_index":1319,"title":{},"body":{"controllers/UsersController.html":{},"dependencies.html":{}}}],["name",{"_index":106,"title":{},"body":{"classes/AssignTaskDto.html":{},"classes/AssignTaskDto-1.html":{},"classes/AssignTaskResponseDto.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CostAllocationDto.html":{},"classes/CreateMilestoneDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateProjectWithAllocationsDto.html":{},"controllers/DepartmentsController.html":{},"injectables/DepartmentsService.html":{},"controllers/ExpenseCategoryController.html":{},"injectables/ExpenseCategoryService.html":{},"controllers/ExpensesController.html":{},"injectables/ExpensesService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"controllers/MilestonesController.html":{},"injectables/MilestonesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/ProjectsController.html":{},"injectables/ProjectsService.html":{},"classes/RegisterDto.html":{},"classes/TaskDto.html":{},"classes/TaskInput.html":{},"classes/TaskNameDto.html":{},"classes/TaskProjectDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/UpdateMilestoneDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTaskStatusDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ViewAssignedTaskResponseDto.html":{}}}],["nashik",{"_index":461,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["nashik'})@isoptional()@isstring",{"_index":1191,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["need",{"_index":1668,"title":{},"body":{"index.html":{}}}],["nest",{"_index":1584,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1698,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":1607,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/DepartmentsController.html":{},"modules/DepartmentsModule.html":{},"injectables/DepartmentsService.html":{},"controllers/ExpenseCategoryController.html":{},"modules/ExpenseCategoryModule.html":{},"injectables/ExpenseCategoryService.html":{},"controllers/ExpensesController.html":{},"modules/ExpensesModule.html":{},"injectables/ExpensesService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/MilestonesController.html":{},"modules/MilestonesModule.html":{},"injectables/MilestonesService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"injectables/ProjectsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":282,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1542,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":278,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":425,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{},"dependencies.html":{}}}],["nestjs/mau",{"_index":1635,"title":{},"body":{"index.html":{}}}],["nestjs/passport",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1317,"title":{},"body":{"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":95,"title":{},"body":{"classes/AssignTaskDto.html":{},"classes/AssignTaskDto-1.html":{},"classes/AssignTaskResponseDto.html":{},"classes/CreateUserDto.html":{},"classes/DashboardCountsDto.html":{},"classes/DeleteUserResponseDto.html":{},"classes/TaskDto.html":{},"classes/TaskInput.html":{},"classes/TaskNameDto.html":{},"classes/TaskProjectDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/TaskStatusCountsDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{},"controllers/UsersController.html":{},"classes/ViewAssignedTaskResponseDto.html":{},"dependencies.html":{}}}],["new",{"_index":253,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/DepartmentsService.html":{},"injectables/ExpenseCategoryService.html":{},"injectables/ExpensesService.html":{},"injectables/MilestonesService.html":{},"injectables/ProductsService.html":{},"injectables/ProjectsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newempid",{"_index":1413,"title":{},"body":{"injectables/UsersService.html":{}}}],["newpercentage",{"_index":906,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["newstrongpassword123",{"_index":1214,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["newstrongpassword123'})@isoptional",{"_index":1204,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["node.js",{"_index":1576,"title":{},"body":{"index.html":{}}}],["notes",{"_index":369,"title":{},"body":{"classes/CreateExpenseDto.html":{},"injectables/ExpensesService.html":{},"classes/UpdateExpenseDto.html":{}}}],["notfoundexception",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DepartmentsService.html":{},"injectables/ExpenseCategoryService.html":{},"injectables/ExpensesService.html":{},"injectables/MilestonesService.html":{},"injectables/ProductsService.html":{},"injectables/ProjectsService.html":{},"injectables/UsersService.html":{}}}],["notfoundexception('department",{"_index":609,"title":{},"body":{"injectables/DepartmentsService.html":{}}}],["notfoundexception('expense",{"_index":678,"title":{},"body":{"injectables/ExpenseCategoryService.html":{},"injectables/ExpensesService.html":{}}}],["notfoundexception('milestone",{"_index":887,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["notfoundexception('no",{"_index":891,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["notfoundexception('product",{"_index":1008,"title":{},"body":{"injectables/ProductsService.html":{}}}],["notfoundexception('project",{"_index":889,"title":{},"body":{"injectables/MilestonesService.html":{},"injectables/ProjectsService.html":{}}}],["notfoundexception('task",{"_index":1478,"title":{},"body":{"injectables/UsersService.html":{}}}],["notfoundexception('tasks",{"_index":1471,"title":{},"body":{"injectables/UsersService.html":{}}}],["notfoundexception('user",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["npm",{"_index":1589,"title":{},"body":{"index.html":{}}}],["null",{"_index":747,"title":{},"body":{"injectables/ExpensesService.html":{},"injectables/MilestonesService.html":{},"injectables/ProductsService.html":{},"classes/TaskDto.html":{},"classes/TaskProjectDto.html":{},"injectables/UsersService.html":{},"classes/ViewAssignedTaskResponseDto.html":{}}}],["number",{"_index":116,"title":{},"body":{"classes/AssignTaskDto.html":{},"classes/AssignTaskDto-1.html":{},"classes/AssignTaskResponseDto.html":{},"classes/CostAllocationDto.html":{},"classes/CreateExpenseDto.html":{},"classes/CreateMilestoneDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateProjectWithAllocationsDto.html":{},"classes/CreateUserDto.html":{},"classes/DashboardCountsDto.html":{},"injectables/ProjectsService.html":{},"classes/TaskDto.html":{},"classes/TaskInput.html":{},"classes/TaskNameDto.html":{},"classes/TaskProjectDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/TaskStatusCountsDto.html":{},"classes/UpdateExpenseDto.html":{},"classes/UpdateMilestoneDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{},"injectables/UsersService.html":{},"classes/ViewAssignedTaskResponseDto.html":{}}}],["number'})@type(undefined",{"_index":375,"title":{},"body":{"classes/CreateExpenseDto.html":{}}}],["object.entries(groupeddata).map(([date",{"_index":785,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["object.entries(totalsbydepartment).map",{"_index":791,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["offer",{"_index":1678,"title":{},"body":{"index.html":{}}}],["official",{"_index":1624,"title":{},"body":{"index.html":{}}}],["one",{"_index":357,"title":{},"body":{"classes/CostAllocationDto.html":{},"classes/CreateProjectWithAllocationsDto.html":{},"injectables/ProjectsService.html":{},"classes/UpdateProjectDto.html":{}}}],["open",{"_index":1683,"title":{},"body":{"index.html":{}}}],["optional",{"_index":76,"title":{},"body":{"classes/AssignTaskDto.html":{},"classes/AssignTaskDto-1.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CostAllocationDto.html":{},"classes/CreateExpenseDto.html":{},"classes/CreateMilestoneDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateProjectWithAllocationsDto.html":{},"classes/CreateUserDto.html":{},"controllers/DepartmentsController.html":{},"injectables/DepartmentsService.html":{},"controllers/ExpenseCategoryController.html":{},"injectables/ExpenseCategoryService.html":{},"controllers/ExpensesController.html":{},"injectables/ExpensesService.html":{},"injectables/JwtStrategy.html":{},"controllers/MilestonesController.html":{},"injectables/MilestonesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/ProjectsController.html":{},"injectables/ProjectsService.html":{},"classes/RegisterDto.html":{},"classes/UpdateExpenseDto.html":{},"classes/UpdateMilestoneDto.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["othermilestones",{"_index":911,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["othermilestones.reduce",{"_index":914,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["out",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/DepartmentsModule.html":{},"modules/ExpenseCategoryModule.html":{},"modules/ExpensesModule.html":{},"modules/MilestonesModule.html":{},"modules/PrismaModule.html":{},"modules/ProductsModule.html":{},"modules/ProjectsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["over",{"_index":929,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["overview",{"_index":1703,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1539,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":568,"title":{},"body":{"controllers/DepartmentsController.html":{},"controllers/ExpenseCategoryController.html":{},"controllers/ExpensesController.html":{},"controllers/MilestonesController.html":{},"controllers/ProductsController.html":{},"controllers/ProjectsController.html":{},"controllers/UsersController.html":{}}}],["param('departmentid",{"_index":579,"title":{},"body":{"controllers/DepartmentsController.html":{}}}],["param('employeeid",{"_index":1369,"title":{},"body":{"controllers/UsersController.html":{}}}],["param('expenseid",{"_index":643,"title":{},"body":{"controllers/ExpenseCategoryController.html":{}}}],["param('milestoneid",{"_index":853,"title":{},"body":{"controllers/MilestonesController.html":{}}}],["param('productid",{"_index":977,"title":{},"body":{"controllers/ProductsController.html":{}}}],["param('projectid",{"_index":1046,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["parameters",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/DepartmentsController.html":{},"injectables/DepartmentsService.html":{},"controllers/ExpenseCategoryController.html":{},"injectables/ExpenseCategoryService.html":{},"controllers/ExpensesController.html":{},"injectables/ExpensesService.html":{},"injectables/JwtStrategy.html":{},"controllers/MilestonesController.html":{},"injectables/MilestonesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/ProjectsController.html":{},"injectables/ProjectsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parsefloat(expense.total",{"_index":783,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["parser",{"_index":1553,"title":{},"body":{"dependencies.html":{}}}],["part",{"_index":1669,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":424,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["partialtype(createproductdto",{"_index":429,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["passport",{"_index":806,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":803,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":797,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passthrough",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{}}}],["password",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UsersService.html":{}}}],["patch",{"_index":569,"title":{},"body":{"controllers/DepartmentsController.html":{},"controllers/ExpensesController.html":{},"controllers/MilestonesController.html":{},"controllers/UsersController.html":{}}}],["path",{"_index":1322,"title":{},"body":{"controllers/UsersController.html":{}}}],["payload",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.email",{"_index":813,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.role",{"_index":814,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.userid",{"_index":812,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["pending",{"_index":142,"title":{},"body":{"classes/AssignTaskDto-1.html":{},"classes/CreateExpenseDto.html":{},"classes/DashboardCountsDto.html":{},"classes/TaskDto.html":{},"classes/TaskNameDto.html":{},"classes/TaskProjectDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/TaskStatusCountsDto.html":{},"classes/UpdateExpenseDto.html":{},"classes/UpdateTaskStatusDto.html":{},"injectables/UsersService.html":{},"classes/ViewAssignedTaskResponseDto.html":{},"miscellaneous/enumerations.html":{}}}],["pendingcount",{"_index":1472,"title":{},"body":{"injectables/UsersService.html":{}}}],["percentage",{"_index":404,"title":{},"body":{"classes/CreateMilestoneDto.html":{},"injectables/MilestonesService.html":{},"injectables/ProjectsService.html":{},"classes/UpdateMilestoneDto.html":{}}}],["percentages",{"_index":933,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["phone",{"_index":452,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{},"injectables/UsersService.html":{}}}],["piechartdata",{"_index":722,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["piedata",{"_index":685,"title":{},"body":{"controllers/ExpensesController.html":{}}}],["pincode",{"_index":453,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{},"injectables/UsersService.html":{}}}],["platform",{"_index":1622,"title":{},"body":{"index.html":{}}}],["please",{"_index":1651,"title":{},"body":{"index.html":{}}}],["possible",{"_index":1615,"title":{},"body":{"index.html":{}}}],["post",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{},"controllers/DepartmentsController.html":{},"controllers/ExpenseCategoryController.html":{},"controllers/ExpensesController.html":{},"controllers/MilestonesController.html":{},"controllers/ProductsController.html":{},"controllers/ProjectsController.html":{},"controllers/UsersController.html":{}}}],["post('/create",{"_index":555,"title":{},"body":{"controllers/DepartmentsController.html":{},"controllers/ExpenseCategoryController.html":{},"controllers/ExpensesController.html":{},"controllers/ProductsController.html":{},"controllers/ProjectsController.html":{}}}],["post('assign",{"_index":1252,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('login",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logout",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@apioperation({summary",{"_index":1259,"title":{},"body":{"controllers/UsersController.html":{}}}],["prefix",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{},"controllers/DepartmentsController.html":{},"controllers/ExpenseCategoryController.html":{},"controllers/ExpensesController.html":{},"controllers/MilestonesController.html":{},"controllers/ProductsController.html":{},"controllers/ProjectsController.html":{},"controllers/UsersController.html":{}}}],["prisma",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DepartmentsService.html":{},"injectables/ExpenseCategoryService.html":{},"injectables/ExpensesService.html":{},"injectables/MilestonesService.html":{},"injectables/ProductsService.html":{},"injectables/ProjectsService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["prisma.service",{"_index":951,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma/client",{"_index":668,"title":{},"body":{"injectables/ExpenseCategoryService.html":{},"injectables/MilestonesService.html":{},"injectables/PrismaService.html":{},"injectables/ProductsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["prisma/prisma.module",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["prisma/prisma.service",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{}}}],["prismaclient",{"_index":953,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismamodule",{"_index":44,"title":{"modules/PrismaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PrismaModule.html":{},"modules.html":{},"overview.html":{}}}],["prismaservice",{"_index":297,"title":{"injectables/PrismaService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/DepartmentsService.html":{},"injectables/ExpenseCategoryService.html":{},"injectables/ExpensesService.html":{},"injectables/MilestonesService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"injectables/ProductsService.html":{},"injectables/ProjectsService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{}}}],["process.env.jwt_secret",{"_index":263,"title":{},"body":{"guards/AuthGuard.html":{}}}],["process.env.node_env",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{}}}],["product",{"_index":744,"title":{},"body":{"injectables/ExpensesService.html":{},"injectables/ProductsService.html":{}}}],["product.baseprice",{"_index":1017,"title":{},"body":{"injectables/ProductsService.html":{}}}],["product.categoryid",{"_index":1018,"title":{},"body":{"injectables/ProductsService.html":{}}}],["product.description",{"_index":1016,"title":{},"body":{"injectables/ProductsService.html":{}}}],["product.name",{"_index":1015,"title":{},"body":{"injectables/ProductsService.html":{}}}],["product?.category.name",{"_index":1006,"title":{},"body":{"injectables/ProductsService.html":{}}}],["productexist",{"_index":1010,"title":{},"body":{"injectables/ProductsService.html":{}}}],["productid",{"_index":370,"title":{},"body":{"classes/CreateExpenseDto.html":{},"injectables/ExpensesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/UpdateExpenseDto.html":{}}}],["production",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{},"index.html":{}}}],["productname",{"_index":371,"title":{},"body":{"classes/CreateExpenseDto.html":{},"injectables/ExpensesService.html":{},"classes/UpdateExpenseDto.html":{}}}],["products",{"_index":1001,"title":{},"body":{"injectables/ProductsService.html":{}}}],["products.controller",{"_index":984,"title":{},"body":{"modules/ProductsModule.html":{}}}],["products.map((product",{"_index":1004,"title":{},"body":{"injectables/ProductsService.html":{}}}],["products.service",{"_index":970,"title":{},"body":{"controllers/ProductsController.html":{},"modules/ProductsModule.html":{}}}],["products/products.module",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["productscontroller",{"_index":955,"title":{"controllers/ProductsController.html":{}},"body":{"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"coverage.html":{}}}],["productsmodule",{"_index":45,"title":{"modules/ProductsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProductsModule.html":{},"modules.html":{},"overview.html":{}}}],["productsservice",{"_index":969,"title":{"injectables/ProductsService.html":{}},"body":{"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"coverage.html":{},"overview.html":{}}}],["profile",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{}}}],["profileimage",{"_index":454,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/ProjectsService.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["progressive",{"_index":1575,"title":{},"body":{"index.html":{}}}],["project",{"_index":85,"title":{},"body":{"classes/AssignTaskDto.html":{},"classes/AssignTaskDto-1.html":{},"classes/AssignTaskResponseDto.html":{},"injectables/MilestonesService.html":{},"injectables/ProjectsService.html":{},"classes/TaskDto.html":{},"classes/TaskInput.html":{},"classes/TaskNameDto.html":{},"classes/TaskProjectDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/UpdateTaskStatusDto.html":{},"injectables/UsersService.html":{},"classes/ViewAssignedTaskResponseDto.html":{},"index.html":{}}}],["project.budget",{"_index":1104,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["project.clientname",{"_index":1100,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["project.description",{"_index":1101,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["project.enddate",{"_index":1103,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["project.id",{"_index":942,"title":{},"body":{"injectables/MilestonesService.html":{},"injectables/ProjectsService.html":{}}}],["project.milestones",{"_index":937,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["project.name",{"_index":944,"title":{},"body":{"injectables/MilestonesService.html":{},"injectables/ProjectsService.html":{}}}],["project.startdate",{"_index":1102,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["project.status",{"_index":1105,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["projectassignments",{"_index":1069,"title":{},"body":{"injectables/ProjectsService.html":{},"injectables/UsersService.html":{}}}],["projectdeleted",{"_index":1114,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["projectid",{"_index":77,"title":{},"body":{"classes/AssignTaskDto.html":{},"classes/AssignTaskDto-1.html":{},"classes/AssignTaskResponseDto.html":{},"classes/CreateExpenseDto.html":{},"classes/CreateMilestoneDto.html":{},"controllers/MilestonesController.html":{},"injectables/MilestonesService.html":{},"controllers/ProjectsController.html":{},"injectables/ProjectsService.html":{},"classes/TaskInput.html":{},"classes/TaskNameDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/UpdateExpenseDto.html":{},"classes/UpdateMilestoneDto.html":{},"classes/UpdateTaskStatusDto.html":{},"injectables/UsersService.html":{}}}],["projectname",{"_index":943,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["projects",{"_index":926,"title":{},"body":{"injectables/MilestonesService.html":{},"injectables/ProjectsService.html":{}}}],["projects.controller",{"_index":1051,"title":{},"body":{"modules/ProjectsModule.html":{}}}],["projects.map((project",{"_index":935,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["projects.map(async",{"_index":1072,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["projects.service",{"_index":1036,"title":{},"body":{"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{}}}],["projects/projects.module",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["projectscontroller",{"_index":1019,"title":{"controllers/ProjectsController.html":{}},"body":{"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"coverage.html":{}}}],["projectsmodule",{"_index":46,"title":{"modules/ProjectsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProjectsModule.html":{},"modules.html":{},"overview.html":{}}}],["projectsservice",{"_index":1035,"title":{"injectables/ProjectsService.html":{}},"body":{"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"injectables/ProjectsService.html":{},"coverage.html":{},"overview.html":{}}}],["projectstatus",{"_index":1056,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["projectstatus(projectid",{"_index":1065,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["projectswithmilestonedata",{"_index":1070,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["promise",{"_index":595,"title":{},"body":{"injectables/DepartmentsService.html":{},"injectables/ExpenseCategoryService.html":{},"injectables/MilestonesService.html":{},"injectables/ProductsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["promise.all",{"_index":1071,"title":{},"body":{"injectables/ProjectsService.html":{},"injectables/UsersService.html":{}}}],["properties",{"_index":74,"title":{"properties.html":{}},"body":{"classes/AssignTaskDto.html":{},"classes/AssignTaskDto-1.html":{},"classes/AssignTaskResponseDto.html":{},"classes/CostAllocationDto.html":{},"classes/CreateExpenseDto.html":{},"classes/CreateMilestoneDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateProjectWithAllocationsDto.html":{},"classes/CreateUserDto.html":{},"classes/DashboardCountsDto.html":{},"classes/DeleteUserResponseDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/TaskDto.html":{},"classes/TaskInput.html":{},"classes/TaskNameDto.html":{},"classes/TaskProjectDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/TaskStatusCountsDto.html":{},"classes/UpdateExpenseDto.html":{},"classes/UpdateMilestoneDto.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{},"classes/ViewAssignedTaskResponseDto.html":{},"properties.html":{}}}],["providers",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DepartmentsModule.html":{},"modules/ExpenseCategoryModule.html":{},"modules/ExpensesModule.html":{},"modules/MilestonesModule.html":{},"modules/PrismaModule.html":{},"modules/ProductsModule.html":{},"modules/ProjectsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["put",{"_index":570,"title":{},"body":{"controllers/DepartmentsController.html":{},"controllers/ExpenseCategoryController.html":{},"controllers/ExpensesController.html":{},"controllers/MilestonesController.html":{},"controllers/ProductsController.html":{},"controllers/ProjectsController.html":{},"controllers/UsersController.html":{}}}],["put('/status/:projectid",{"_index":1030,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["put('/update",{"_index":1293,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('/update/:departmentid",{"_index":565,"title":{},"body":{"controllers/DepartmentsController.html":{}}}],["put('/update/:expenseid",{"_index":634,"title":{},"body":{"controllers/ExpenseCategoryController.html":{},"controllers/ExpensesController.html":{}}}],["put('/update/:id",{"_index":1360,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('/update/:id')@apioperation({summary",{"_index":1290,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('/update/:milestoneid",{"_index":841,"title":{},"body":{"controllers/MilestonesController.html":{}}}],["put('/update/:productid",{"_index":967,"title":{},"body":{"controllers/ProductsController.html":{}}}],["put('/update/:projectid",{"_index":1033,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["quantity",{"_index":372,"title":{},"body":{"classes/CreateExpenseDto.html":{},"injectables/ExpensesService.html":{},"classes/UpdateExpenseDto.html":{}}}],["questions",{"_index":1649,"title":{},"body":{"index.html":{}}}],["radialchart",{"_index":823,"title":{},"body":{"controllers/MilestonesController.html":{}}}],["radialchartmilestones",{"_index":868,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["read",{"_index":1691,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/DepartmentsController.html":{},"controllers/UsersController.html":{}}}],["ready",{"_index":1605,"title":{},"body":{"index.html":{}}}],["real",{"_index":1664,"title":{},"body":{"index.html":{}}}],["receipturl",{"_index":373,"title":{},"body":{"classes/CreateExpenseDto.html":{},"classes/UpdateExpenseDto.html":{}}}],["record",{"_index":772,"title":{},"body":{"injectables/ExpensesService.html":{},"injectables/UsersService.html":{}}}],["reduce((sum",{"_index":940,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["reflect",{"_index":1559,"title":{},"body":{"dependencies.html":{}}}],["register(@body",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(dto",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{}}}],["registerdto",{"_index":194,"title":{"classes/RegisterDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"coverage.html":{}}}],["registered",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{}}}],["rehmat.sayani@gmail.com",{"_index":474,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["rejected",{"_index":398,"title":{},"body":{"classes/CreateExpenseDto.html":{},"classes/UpdateExpenseDto.html":{},"miscellaneous/enumerations.html":{}}}],["remaining",{"_index":932,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["remainingpercentage",{"_index":945,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["remove",{"_index":552,"title":{},"body":{"controllers/DepartmentsController.html":{},"controllers/ExpenseCategoryController.html":{},"controllers/ExpensesController.html":{},"controllers/MilestonesController.html":{},"controllers/ProductsController.html":{},"controllers/ProjectsController.html":{},"controllers/UsersController.html":{}}}],["remove(@param('departmentid",{"_index":581,"title":{},"body":{"controllers/DepartmentsController.html":{}}}],["remove(@param('expenseid",{"_index":645,"title":{},"body":{"controllers/ExpenseCategoryController.html":{},"controllers/ExpensesController.html":{}}}],["remove(@param('id",{"_index":1364,"title":{},"body":{"controllers/UsersController.html":{}}}],["remove(@param('milestoneid",{"_index":855,"title":{},"body":{"controllers/MilestonesController.html":{}}}],["remove(@param('productid",{"_index":979,"title":{},"body":{"controllers/ProductsController.html":{}}}],["remove(@param('projectid",{"_index":1044,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["remove(departmentid",{"_index":561,"title":{},"body":{"controllers/DepartmentsController.html":{}}}],["remove(expenseid",{"_index":630,"title":{},"body":{"controllers/ExpenseCategoryController.html":{},"controllers/ExpensesController.html":{}}}],["remove(id",{"_index":1284,"title":{},"body":{"controllers/UsersController.html":{}}}],["remove(milestoneid",{"_index":837,"title":{},"body":{"controllers/MilestonesController.html":{}}}],["remove(productid",{"_index":963,"title":{},"body":{"controllers/ProductsController.html":{}}}],["remove(projectid",{"_index":1026,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["repository",{"_index":1587,"title":{},"body":{"index.html":{}}}],["req",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{}}}],["req.user",{"_index":233,"title":{},"body":{"controllers/AuthController.html":{}}}],["req?.cookies?.access_token",{"_index":810,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["request",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/ExpensesService.html":{},"injectables/JwtStrategy.html":{},"injectables/MilestonesService.html":{}}}],["request.achieveddate",{"_index":924,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["request.amount",{"_index":760,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["request.departmentid",{"_index":752,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["request.description",{"_index":920,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["request.employeeid",{"_index":754,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["request.expensecatid",{"_index":756,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["request.headers.authorization",{"_index":250,"title":{},"body":{"guards/AuthGuard.html":{}}}],["request.name",{"_index":918,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["request.notes",{"_index":768,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["request.percentage",{"_index":907,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["request.productid",{"_index":758,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["request.projectid",{"_index":917,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["request.quantity",{"_index":762,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["request.targetdate",{"_index":922,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["request.total",{"_index":764,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["required",{"_index":86,"title":{},"body":{"classes/AssignTaskDto.html":{},"classes/AssignTaskResponseDto.html":{},"classes/CreateUserDto.html":{},"classes/TaskInput.html":{},"classes/UserResponseDto.html":{},"injectables/UsersService.html":{}}}],["requiring",{"_index":1630,"title":{},"body":{"index.html":{}}}],["res",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{}}}],["res.clearcookie('access_token",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{}}}],["res.cookie('access_token",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{}}}],["reset",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DepartmentsModule.html":{},"modules/ExpenseCategoryModule.html":{},"modules/ExpensesModule.html":{},"modules/MilestonesModule.html":{},"modules/PrismaModule.html":{},"modules/ProductsModule.html":{},"modules/ProjectsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":1643,"title":{},"body":{"index.html":{}}}],["response",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{}}}],["response.dto",{"_index":1330,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["response.dto.ts",{"_index":1217,"title":{},"body":{"classes/UserResponseDto.html":{},"coverage.html":{}}}],["response.dto.ts:11",{"_index":1228,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:14",{"_index":1223,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:17",{"_index":1229,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:20",{"_index":1222,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:23",{"_index":1227,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:26",{"_index":1234,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:29",{"_index":1225,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:32",{"_index":1218,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:35",{"_index":1235,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:38",{"_index":1219,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:41",{"_index":1230,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:44",{"_index":1233,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:47",{"_index":1221,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:5",{"_index":1226,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:50",{"_index":1231,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:8",{"_index":1224,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["result",{"_index":934,"title":{},"body":{"injectables/MilestonesService.html":{},"injectables/ProjectsService.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AssignTaskDto.html":{},"classes/AssignTaskDto-1.html":{},"classes/AssignTaskResponseDto.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CostAllocationDto.html":{},"classes/CreateExpenseDto.html":{},"classes/CreateMilestoneDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateProjectWithAllocationsDto.html":{},"classes/CreateUserDto.html":{},"classes/DashboardCountsDto.html":{},"classes/DeleteUserResponseDto.html":{},"controllers/DepartmentsController.html":{},"modules/DepartmentsModule.html":{},"injectables/DepartmentsService.html":{},"controllers/ExpenseCategoryController.html":{},"modules/ExpenseCategoryModule.html":{},"injectables/ExpenseCategoryService.html":{},"controllers/ExpensesController.html":{},"modules/ExpensesModule.html":{},"injectables/ExpensesService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"controllers/MilestonesController.html":{},"modules/MilestonesModule.html":{},"injectables/MilestonesService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"injectables/ProjectsService.html":{},"classes/RegisterDto.html":{},"classes/TaskDto.html":{},"classes/TaskInput.html":{},"classes/TaskNameDto.html":{},"classes/TaskProjectDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/TaskStatusCountsDto.html":{},"classes/UpdateExpenseDto.html":{},"classes/UpdateMilestoneDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ViewAssignedTaskResponseDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/DepartmentsController.html":{},"injectables/DepartmentsService.html":{},"controllers/ExpenseCategoryController.html":{},"injectables/ExpenseCategoryService.html":{},"controllers/ExpensesController.html":{},"injectables/ExpensesService.html":{},"injectables/JwtStrategy.html":{},"controllers/MilestonesController.html":{},"injectables/MilestonesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/ProjectsController.html":{},"injectables/ProjectsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/DepartmentsController.html":{},"injectables/DepartmentsService.html":{},"controllers/ExpenseCategoryController.html":{},"injectables/ExpenseCategoryService.html":{},"controllers/ExpensesController.html":{},"injectables/ExpensesService.html":{},"injectables/JwtStrategy.html":{},"controllers/MilestonesController.html":{},"injectables/MilestonesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/ProjectsController.html":{},"injectables/ProjectsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["role",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/ProjectsService.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{},"injectables/UsersService.html":{}}}],["role.user",{"_index":1430,"title":{},"body":{"injectables/UsersService.html":{}}}],["run",{"_index":1591,"title":{},"body":{"index.html":{}}}],["runs",{"_index":1613,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1562,"title":{},"body":{"dependencies.html":{}}}],["salary",{"_index":455,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{},"injectables/UsersService.html":{}}}],["samarth",{"_index":477,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"index.html":{}}}],["samarth'})@isoptional()@isstring",{"_index":1197,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["samarth@example.com",{"_index":1213,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["samarth@example.com'})@isoptional()@isemail",{"_index":1195,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["samesite",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{}}}],["scalable",{"_index":1580,"title":{},"body":{"index.html":{}}}],["secret",{"_index":265,"title":{},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{}}}],["secretorkey",{"_index":811,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secure",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{}}}],["select",{"_index":742,"title":{},"body":{"injectables/ExpensesService.html":{},"injectables/MilestonesService.html":{},"injectables/ProductsService.html":{},"injectables/ProjectsService.html":{},"injectables/UsersService.html":{}}}],["server",{"_index":1581,"title":{},"body":{"index.html":{}}}],["services",{"_index":1392,"title":{},"body":{"injectables/UsersService.html":{}}}],["setup",{"_index":1588,"title":{},"body":{"index.html":{}}}],["shinde",{"_index":485,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["shinde'})@isoptional()@isstring",{"_index":1202,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["side",{"_index":1582,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":288,"title":{},"body":{"modules/AuthModule.html":{}}}],["simple",{"_index":1632,"title":{},"body":{"index.html":{}}}],["software",{"_index":482,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AssignTaskDto.html":{},"classes/AssignTaskDto-1.html":{},"classes/AssignTaskResponseDto.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CostAllocationDto.html":{},"classes/CreateExpenseDto.html":{},"classes/CreateMilestoneDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateProjectWithAllocationsDto.html":{},"classes/CreateUserDto.html":{},"classes/DashboardCountsDto.html":{},"classes/DeleteUserResponseDto.html":{},"controllers/DepartmentsController.html":{},"modules/DepartmentsModule.html":{},"injectables/DepartmentsService.html":{},"controllers/ExpenseCategoryController.html":{},"modules/ExpenseCategoryModule.html":{},"injectables/ExpenseCategoryService.html":{},"controllers/ExpensesController.html":{},"modules/ExpensesModule.html":{},"injectables/ExpensesService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"controllers/MilestonesController.html":{},"modules/MilestonesModule.html":{},"injectables/MilestonesService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"injectables/ProjectsService.html":{},"classes/RegisterDto.html":{},"classes/TaskDto.html":{},"classes/TaskInput.html":{},"classes/TaskNameDto.html":{},"classes/TaskProjectDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/TaskStatusCountsDto.html":{},"classes/UpdateExpenseDto.html":{},"classes/UpdateMilestoneDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ViewAssignedTaskResponseDto.html":{},"index.html":{}}}],["sponsors",{"_index":1686,"title":{},"body":{"index.html":{}}}],["src/.../expense.dto.ts",{"_index":1568,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":1572,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../task",{"_index":1569,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":66,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":67,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:29",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:48",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:59",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.guard.ts",{"_index":237,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{}}}],["src/auth/auth.guard.ts:13",{"_index":241,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/auth/auth.module.ts",{"_index":275,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:12",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:32",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:40",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:50",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/auth.dto.ts",{"_index":815,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"coverage.html":{}}}],["src/auth/dto/auth.dto.ts:11",{"_index":1125,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/auth.dto.ts:15",{"_index":1127,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/auth.dto.ts:20",{"_index":816,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/auth.dto.ts:23",{"_index":817,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/auth.dto.ts:5",{"_index":1124,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/auth.dto.ts:8",{"_index":1123,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/jwt",{"_index":793,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":796,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:18",{"_index":802,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:8",{"_index":800,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/departments/departments.controller.ts",{"_index":547,"title":{},"body":{"controllers/DepartmentsController.html":{},"coverage.html":{}}}],["src/departments/departments.controller.ts:19",{"_index":557,"title":{},"body":{"controllers/DepartmentsController.html":{}}}],["src/departments/departments.controller.ts:24",{"_index":560,"title":{},"body":{"controllers/DepartmentsController.html":{}}}],["src/departments/departments.controller.ts:30",{"_index":556,"title":{},"body":{"controllers/DepartmentsController.html":{}}}],["src/departments/departments.controller.ts:35",{"_index":566,"title":{},"body":{"controllers/DepartmentsController.html":{}}}],["src/departments/departments.controller.ts:43",{"_index":563,"title":{},"body":{"controllers/DepartmentsController.html":{}}}],["src/departments/departments.module.ts",{"_index":585,"title":{},"body":{"modules/DepartmentsModule.html":{}}}],["src/departments/departments.service.ts",{"_index":587,"title":{},"body":{"injectables/DepartmentsService.html":{},"coverage.html":{}}}],["src/departments/departments.service.ts:12",{"_index":598,"title":{},"body":{"injectables/DepartmentsService.html":{}}}],["src/departments/departments.service.ts:20",{"_index":600,"title":{},"body":{"injectables/DepartmentsService.html":{}}}],["src/departments/departments.service.ts:32",{"_index":594,"title":{},"body":{"injectables/DepartmentsService.html":{}}}],["src/departments/departments.service.ts:48",{"_index":602,"title":{},"body":{"injectables/DepartmentsService.html":{}}}],["src/departments/departments.service.ts:76",{"_index":597,"title":{},"body":{"injectables/DepartmentsService.html":{}}}],["src/departments/departments.service.ts:9",{"_index":592,"title":{},"body":{"injectables/DepartmentsService.html":{}}}],["src/expense",{"_index":620,"title":{},"body":{"controllers/ExpenseCategoryController.html":{},"modules/ExpenseCategoryModule.html":{},"injectables/ExpenseCategoryService.html":{},"coverage.html":{}}}],["src/expenses/dto/expense.dto.ts",{"_index":364,"title":{},"body":{"classes/CreateExpenseDto.html":{},"classes/UpdateExpenseDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/expenses/dto/expense.dto.ts:100",{"_index":1161,"title":{},"body":{"classes/UpdateExpenseDto.html":{}}}],["src/expenses/dto/expense.dto.ts:105",{"_index":1164,"title":{},"body":{"classes/UpdateExpenseDto.html":{}}}],["src/expenses/dto/expense.dto.ts:109",{"_index":1152,"title":{},"body":{"classes/UpdateExpenseDto.html":{}}}],["src/expenses/dto/expense.dto.ts:113",{"_index":1156,"title":{},"body":{"classes/UpdateExpenseDto.html":{}}}],["src/expenses/dto/expense.dto.ts:117",{"_index":1162,"title":{},"body":{"classes/UpdateExpenseDto.html":{}}}],["src/expenses/dto/expense.dto.ts:121",{"_index":1163,"title":{},"body":{"classes/UpdateExpenseDto.html":{}}}],["src/expenses/dto/expense.dto.ts:125",{"_index":1159,"title":{},"body":{"classes/UpdateExpenseDto.html":{}}}],["src/expenses/dto/expense.dto.ts:22",{"_index":378,"title":{},"body":{"classes/CreateExpenseDto.html":{}}}],["src/expenses/dto/expense.dto.ts:25",{"_index":379,"title":{},"body":{"classes/CreateExpenseDto.html":{}}}],["src/expenses/dto/expense.dto.ts:29",{"_index":380,"title":{},"body":{"classes/CreateExpenseDto.html":{}}}],["src/expenses/dto/expense.dto.ts:33",{"_index":382,"title":{},"body":{"classes/CreateExpenseDto.html":{}}}],["src/expenses/dto/expense.dto.ts:37",{"_index":383,"title":{},"body":{"classes/CreateExpenseDto.html":{}}}],["src/expenses/dto/expense.dto.ts:41",{"_index":376,"title":{},"body":{"classes/CreateExpenseDto.html":{}}}],["src/expenses/dto/expense.dto.ts:45",{"_index":386,"title":{},"body":{"classes/CreateExpenseDto.html":{}}}],["src/expenses/dto/expense.dto.ts:49",{"_index":393,"title":{},"body":{"classes/CreateExpenseDto.html":{}}}],["src/expenses/dto/expense.dto.ts:52",{"_index":377,"title":{},"body":{"classes/CreateExpenseDto.html":{}}}],["src/expenses/dto/expense.dto.ts:56",{"_index":381,"title":{},"body":{"classes/CreateExpenseDto.html":{}}}],["src/expenses/dto/expense.dto.ts:60",{"_index":389,"title":{},"body":{"classes/CreateExpenseDto.html":{}}}],["src/expenses/dto/expense.dto.ts:64",{"_index":392,"title":{},"body":{"classes/CreateExpenseDto.html":{}}}],["src/expenses/dto/expense.dto.ts:68",{"_index":384,"title":{},"body":{"classes/CreateExpenseDto.html":{}}}],["src/expenses/dto/expense.dto.ts:74",{"_index":1153,"title":{},"body":{"classes/UpdateExpenseDto.html":{}}}],["src/expenses/dto/expense.dto.ts:78",{"_index":1154,"title":{},"body":{"classes/UpdateExpenseDto.html":{}}}],["src/expenses/dto/expense.dto.ts:82",{"_index":1155,"title":{},"body":{"classes/UpdateExpenseDto.html":{}}}],["src/expenses/dto/expense.dto.ts:86",{"_index":1157,"title":{},"body":{"classes/UpdateExpenseDto.html":{}}}],["src/expenses/dto/expense.dto.ts:90",{"_index":1158,"title":{},"body":{"classes/UpdateExpenseDto.html":{}}}],["src/expenses/dto/expense.dto.ts:95",{"_index":1151,"title":{},"body":{"classes/UpdateExpenseDto.html":{}}}],["src/expenses/expenses.controller.ts",{"_index":681,"title":{},"body":{"controllers/ExpensesController.html":{},"coverage.html":{}}}],["src/expenses/expenses.controller.ts:19",{"_index":690,"title":{},"body":{"controllers/ExpensesController.html":{}}}],["src/expenses/expenses.controller.ts:24",{"_index":695,"title":{},"body":{"controllers/ExpensesController.html":{}}}],["src/expenses/expenses.controller.ts:29",{"_index":692,"title":{},"body":{"controllers/ExpensesController.html":{}}}],["src/expenses/expenses.controller.ts:34",{"_index":693,"title":{},"body":{"controllers/ExpensesController.html":{}}}],["src/expenses/expenses.controller.ts:39",{"_index":688,"title":{},"body":{"controllers/ExpensesController.html":{}}}],["src/expenses/expenses.controller.ts:44",{"_index":691,"title":{},"body":{"controllers/ExpensesController.html":{}}}],["src/expenses/expenses.controller.ts:49",{"_index":697,"title":{},"body":{"controllers/ExpensesController.html":{}}}],["src/expenses/expenses.controller.ts:54",{"_index":696,"title":{},"body":{"controllers/ExpensesController.html":{}}}],["src/expenses/expenses.module.ts",{"_index":714,"title":{},"body":{"modules/ExpensesModule.html":{}}}],["src/expenses/expenses.service.ts",{"_index":716,"title":{},"body":{"injectables/ExpensesService.html":{},"coverage.html":{}}}],["src/expenses/expenses.service.ts:11",{"_index":724,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["src/expenses/expenses.service.ts:132",{"_index":730,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["src/expenses/expenses.service.ts:14",{"_index":731,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["src/expenses/expenses.service.ts:149",{"_index":725,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["src/expenses/expenses.service.ts:173",{"_index":726,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["src/expenses/expenses.service.ts:216",{"_index":734,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["src/expenses/expenses.service.ts:40",{"_index":733,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["src/expenses/expenses.service.ts:65",{"_index":728,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["src/expenses/expenses.service.ts:99",{"_index":736,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["src/main.ts",{"_index":1530,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/milestones/dto/milestone.dto.ts",{"_index":402,"title":{},"body":{"classes/CreateMilestoneDto.html":{},"classes/UpdateMilestoneDto.html":{},"coverage.html":{}}}],["src/milestones/dto/milestone.dto.ts:10",{"_index":410,"title":{},"body":{"classes/CreateMilestoneDto.html":{}}}],["src/milestones/dto/milestone.dto.ts:13",{"_index":408,"title":{},"body":{"classes/CreateMilestoneDto.html":{}}}],["src/milestones/dto/milestone.dto.ts:16",{"_index":412,"title":{},"body":{"classes/CreateMilestoneDto.html":{}}}],["src/milestones/dto/milestone.dto.ts:20",{"_index":407,"title":{},"body":{"classes/CreateMilestoneDto.html":{}}}],["src/milestones/dto/milestone.dto.ts:23",{"_index":411,"title":{},"body":{"classes/CreateMilestoneDto.html":{}}}],["src/milestones/dto/milestone.dto.ts:29",{"_index":1167,"title":{},"body":{"classes/UpdateMilestoneDto.html":{}}}],["src/milestones/dto/milestone.dto.ts:33",{"_index":1169,"title":{},"body":{"classes/UpdateMilestoneDto.html":{}}}],["src/milestones/dto/milestone.dto.ts:37",{"_index":1166,"title":{},"body":{"classes/UpdateMilestoneDto.html":{}}}],["src/milestones/dto/milestone.dto.ts:41",{"_index":1171,"title":{},"body":{"classes/UpdateMilestoneDto.html":{}}}],["src/milestones/dto/milestone.dto.ts:45",{"_index":1165,"title":{},"body":{"classes/UpdateMilestoneDto.html":{}}}],["src/milestones/dto/milestone.dto.ts:49",{"_index":1170,"title":{},"body":{"classes/UpdateMilestoneDto.html":{}}}],["src/milestones/dto/milestone.dto.ts:7",{"_index":409,"title":{},"body":{"classes/CreateMilestoneDto.html":{}}}],["src/milestones/milestones.controller.ts",{"_index":819,"title":{},"body":{"controllers/MilestonesController.html":{},"coverage.html":{}}}],["src/milestones/milestones.controller.ts:19",{"_index":825,"title":{},"body":{"controllers/MilestonesController.html":{}}}],["src/milestones/milestones.controller.ts:24",{"_index":829,"title":{},"body":{"controllers/MilestonesController.html":{}}}],["src/milestones/milestones.controller.ts:29",{"_index":833,"title":{},"body":{"controllers/MilestonesController.html":{}}}],["src/milestones/milestones.controller.ts:34",{"_index":824,"title":{},"body":{"controllers/MilestonesController.html":{}}}],["src/milestones/milestones.controller.ts:39",{"_index":842,"title":{},"body":{"controllers/MilestonesController.html":{}}}],["src/milestones/milestones.controller.ts:48",{"_index":839,"title":{},"body":{"controllers/MilestonesController.html":{}}}],["src/milestones/milestones.controller.ts:53",{"_index":836,"title":{},"body":{"controllers/MilestonesController.html":{}}}],["src/milestones/milestones.module.ts",{"_index":860,"title":{},"body":{"modules/MilestonesModule.html":{}}}],["src/milestones/milestones.service.ts",{"_index":862,"title":{},"body":{"injectables/MilestonesService.html":{},"coverage.html":{}}}],["src/milestones/milestones.service.ts:11",{"_index":870,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["src/milestones/milestones.service.ts:111",{"_index":882,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["src/milestones/milestones.service.ts:14",{"_index":877,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["src/milestones/milestones.service.ts:162",{"_index":874,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["src/milestones/milestones.service.ts:179",{"_index":880,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["src/milestones/milestones.service.ts:27",{"_index":879,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["src/milestones/milestones.service.ts:40",{"_index":876,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["src/milestones/milestones.service.ts:61",{"_index":872,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["src/prisma/prisma.module.ts",{"_index":949,"title":{},"body":{"modules/PrismaModule.html":{}}}],["src/prisma/prisma.service",{"_index":604,"title":{},"body":{"injectables/DepartmentsService.html":{},"injectables/ExpenseCategoryService.html":{},"injectables/ExpensesService.html":{},"injectables/MilestonesService.html":{},"injectables/ProductsService.html":{},"injectables/ProjectsService.html":{},"injectables/UsersService.html":{}}}],["src/prisma/prisma.service.ts",{"_index":952,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma/prisma.service.ts:5",{"_index":954,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/products/dto/products.dto.ts",{"_index":417,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["src/products/dto/products.dto.ts:10",{"_index":422,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["src/products/dto/products.dto.ts:14",{"_index":420,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["src/products/dto/products.dto.ts:17",{"_index":421,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["src/products/dto/products.dto.ts:6",{"_index":423,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["src/products/products.controller.ts",{"_index":956,"title":{},"body":{"controllers/ProductsController.html":{},"coverage.html":{}}}],["src/products/products.controller.ts:18",{"_index":959,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.controller.ts:23",{"_index":962,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.controller.ts:28",{"_index":958,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.controller.ts:33",{"_index":968,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.controller.ts:41",{"_index":965,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.module.ts",{"_index":983,"title":{},"body":{"modules/ProductsModule.html":{}}}],["src/products/products.service.ts",{"_index":985,"title":{},"body":{"injectables/ProductsService.html":{},"coverage.html":{}}}],["src/products/products.service.ts:11",{"_index":991,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/products.service.ts:14",{"_index":996,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/products.service.ts:34",{"_index":998,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/products.service.ts:46",{"_index":993,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/products.service.ts:65",{"_index":1000,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/products.service.ts:92",{"_index":995,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/projects/dto/project.dto.ts",{"_index":341,"title":{},"body":{"classes/CostAllocationDto.html":{},"classes/CreateProjectWithAllocationsDto.html":{},"classes/UpdateProjectDto.html":{},"coverage.html":{}}}],["src/projects/dto/project.dto.ts:102",{"_index":1175,"title":{},"body":{"classes/UpdateProjectDto.html":{}}}],["src/projects/dto/project.dto.ts:17",{"_index":346,"title":{},"body":{"classes/CostAllocationDto.html":{}}}],["src/projects/dto/project.dto.ts:20",{"_index":345,"title":{},"body":{"classes/CostAllocationDto.html":{}}}],["src/projects/dto/project.dto.ts:24",{"_index":348,"title":{},"body":{"classes/CostAllocationDto.html":{}}}],["src/projects/dto/project.dto.ts:29",{"_index":439,"title":{},"body":{"classes/CreateProjectWithAllocationsDto.html":{}}}],["src/projects/dto/project.dto.ts:33",{"_index":431,"title":{},"body":{"classes/CreateProjectWithAllocationsDto.html":{}}}],["src/projects/dto/project.dto.ts:37",{"_index":435,"title":{},"body":{"classes/CreateProjectWithAllocationsDto.html":{}}}],["src/projects/dto/project.dto.ts:40",{"_index":440,"title":{},"body":{"classes/CreateProjectWithAllocationsDto.html":{}}}],["src/projects/dto/project.dto.ts:43",{"_index":438,"title":{},"body":{"classes/CreateProjectWithAllocationsDto.html":{}}}],["src/projects/dto/project.dto.ts:46",{"_index":430,"title":{},"body":{"classes/CreateProjectWithAllocationsDto.html":{}}}],["src/projects/dto/project.dto.ts:50",{"_index":441,"title":{},"body":{"classes/CreateProjectWithAllocationsDto.html":{}}}],["src/projects/dto/project.dto.ts:55",{"_index":437,"title":{},"body":{"classes/CreateProjectWithAllocationsDto.html":{}}}],["src/projects/dto/project.dto.ts:61",{"_index":434,"title":{},"body":{"classes/CreateProjectWithAllocationsDto.html":{}}}],["src/projects/dto/project.dto.ts:67",{"_index":1180,"title":{},"body":{"classes/UpdateProjectDto.html":{}}}],["src/projects/dto/project.dto.ts:71",{"_index":1173,"title":{},"body":{"classes/UpdateProjectDto.html":{}}}],["src/projects/dto/project.dto.ts:75",{"_index":1176,"title":{},"body":{"classes/UpdateProjectDto.html":{}}}],["src/projects/dto/project.dto.ts:79",{"_index":1181,"title":{},"body":{"classes/UpdateProjectDto.html":{}}}],["src/projects/dto/project.dto.ts:83",{"_index":1179,"title":{},"body":{"classes/UpdateProjectDto.html":{}}}],["src/projects/dto/project.dto.ts:87",{"_index":1172,"title":{},"body":{"classes/UpdateProjectDto.html":{}}}],["src/projects/dto/project.dto.ts:91",{"_index":1182,"title":{},"body":{"classes/UpdateProjectDto.html":{}}}],["src/projects/dto/project.dto.ts:96",{"_index":1178,"title":{},"body":{"classes/UpdateProjectDto.html":{}}}],["src/projects/projects.controller.ts",{"_index":1020,"title":{},"body":{"controllers/ProjectsController.html":{},"coverage.html":{}}}],["src/projects/projects.controller.ts:17",{"_index":1023,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["src/projects/projects.controller.ts:22",{"_index":1025,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["src/projects/projects.controller.ts:27",{"_index":1022,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["src/projects/projects.controller.ts:32",{"_index":1034,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["src/projects/projects.controller.ts:37",{"_index":1028,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["src/projects/projects.controller.ts:42",{"_index":1031,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["src/projects/projects.module.ts",{"_index":1050,"title":{},"body":{"modules/ProjectsModule.html":{}}}],["src/projects/projects.service.ts",{"_index":1052,"title":{},"body":{"injectables/ProjectsService.html":{},"coverage.html":{}}}],["src/projects/projects.service.ts:11",{"_index":1063,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["src/projects/projects.service.ts:111",{"_index":1060,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["src/projects/projects.service.ts:191",{"_index":1068,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["src/projects/projects.service.ts:283",{"_index":1062,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["src/projects/projects.service.ts:316",{"_index":1066,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["src/projects/projects.service.ts:61",{"_index":1064,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["src/projects/projects.service.ts:8",{"_index":1058,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["src/users/dto/all",{"_index":518,"title":{},"body":{"classes/DashboardCountsDto.html":{},"classes/TaskStatusCountsDto.html":{},"coverage.html":{}}}],["src/users/dto/assign",{"_index":72,"title":{},"body":{"classes/AssignTaskDto.html":{},"classes/AssignTaskResponseDto.html":{},"classes/TaskInput.html":{},"coverage.html":{}}}],["src/users/dto/create",{"_index":443,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/delete",{"_index":543,"title":{},"body":{"classes/DeleteUserResponseDto.html":{},"coverage.html":{}}}],["src/users/dto/task",{"_index":118,"title":{},"body":{"classes/AssignTaskDto-1.html":{},"classes/TaskNameDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/UpdateTaskStatusDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/users/dto/update",{"_index":1188,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/user",{"_index":1216,"title":{},"body":{"classes/UserResponseDto.html":{},"coverage.html":{}}}],["src/users/dto/view",{"_index":1129,"title":{},"body":{"classes/TaskDto.html":{},"classes/TaskProjectDto.html":{},"classes/ViewAssignedTaskResponseDto.html":{},"coverage.html":{}}}],["src/users/users.controller.ts",{"_index":1237,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:102",{"_index":1291,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:113",{"_index":1288,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:125",{"_index":1256,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:140",{"_index":1306,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:150",{"_index":1298,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:163",{"_index":1283,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:60",{"_index":1266,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:77",{"_index":1250,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:87",{"_index":1271,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:96",{"_index":1277,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":1379,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":1381,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:126",{"_index":1396,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:148",{"_index":1391,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:180",{"_index":1407,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:21",{"_index":1389,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:228",{"_index":1403,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:24",{"_index":1394,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:272",{"_index":1402,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:294",{"_index":1400,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:63",{"_index":1397,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:80",{"_index":1399,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:89",{"_index":1405,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":1593,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1596,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":1597,"title":{},"body":{"index.html":{}}}],["startdate",{"_index":353,"title":{},"body":{"classes/CostAllocationDto.html":{},"classes/CreateProjectWithAllocationsDto.html":{},"injectables/ProjectsService.html":{},"classes/UpdateProjectDto.html":{}}}],["started",{"_index":1574,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1586,"title":{},"body":{"index.html":{}}}],["startofday",{"_index":737,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["startofyear",{"_index":1493,"title":{},"body":{"injectables/UsersService.html":{}}}],["state",{"_index":456,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{},"injectables/UsersService.html":{}}}],["statements",{"_index":1519,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":150,"title":{},"body":{"classes/AssignTaskDto-1.html":{},"classes/CostAllocationDto.html":{},"classes/CreateExpenseDto.html":{},"classes/CreateProjectWithAllocationsDto.html":{},"controllers/ProjectsController.html":{},"injectables/ProjectsService.html":{},"classes/TaskDto.html":{},"classes/TaskNameDto.html":{},"classes/TaskProjectDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/UpdateExpenseDto.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTaskStatusDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ViewAssignedTaskResponseDto.html":{}}}],["status'})@apiresponse({status",{"_index":1295,"title":{},"body":{"controllers/UsersController.html":{}}}],["status(projectid",{"_index":1029,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["status/:employeeid",{"_index":1371,"title":{},"body":{"controllers/UsersController.html":{}}}],["status/:employeeid')@apioperation({summary",{"_index":1294,"title":{},"body":{"controllers/UsersController.html":{}}}],["statuscounts",{"_index":1487,"title":{},"body":{"injectables/UsersService.html":{}}}],["statuscounts[item.status",{"_index":1489,"title":{},"body":{"injectables/UsersService.html":{}}}],["statuscounts[status",{"_index":1512,"title":{},"body":{"injectables/UsersService.html":{}}}],["statusenum",{"_index":1479,"title":{},"body":{"injectables/UsersService.html":{}}}],["statusupdated",{"_index":1480,"title":{},"body":{"injectables/UsersService.html":{}}}],["stay",{"_index":1672,"title":{},"body":{"index.html":{}}}],["steps",{"_index":1610,"title":{},"body":{"index.html":{}}}],["storage",{"_index":1340,"title":{},"body":{"controllers/UsersController.html":{}}}],["straightforward",{"_index":1628,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":805,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["street",{"_index":457,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["strict",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/AssignTaskDto.html":{},"classes/AssignTaskDto-1.html":{},"classes/AssignTaskResponseDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CostAllocationDto.html":{},"classes/CreateExpenseDto.html":{},"classes/CreateMilestoneDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateProjectWithAllocationsDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserResponseDto.html":{},"controllers/DepartmentsController.html":{},"injectables/DepartmentsService.html":{},"controllers/ExpenseCategoryController.html":{},"injectables/ExpenseCategoryService.html":{},"controllers/ExpensesController.html":{},"injectables/ExpensesService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"controllers/MilestonesController.html":{},"injectables/MilestonesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/ProjectsController.html":{},"injectables/ProjectsService.html":{},"classes/RegisterDto.html":{},"classes/TaskDto.html":{},"classes/TaskInput.html":{},"classes/TaskNameDto.html":{},"classes/TaskProjectDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/UpdateExpenseDto.html":{},"classes/UpdateMilestoneDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ViewAssignedTaskResponseDto.html":{}}}],["string'})@isuuid()@isnotempty",{"_index":83,"title":{},"body":{"classes/AssignTaskDto.html":{}}}],["strongpassword123",{"_index":487,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["successful",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{}}}],["successfully",{"_index":112,"title":{},"body":{"classes/AssignTaskDto.html":{},"classes/AssignTaskResponseDto.html":{},"controllers/AuthController.html":{},"classes/DeleteUserResponseDto.html":{},"injectables/DepartmentsService.html":{},"injectables/ExpenseCategoryService.html":{},"injectables/ExpensesService.html":{},"injectables/MilestonesService.html":{},"injectables/ProductsService.html":{},"injectables/ProjectsService.html":{},"classes/TaskInput.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["successfully'})@apioperation({summary",{"_index":1296,"title":{},"body":{"controllers/UsersController.html":{}}}],["successfully'})@apiresponse({status",{"_index":1262,"title":{},"body":{"controllers/UsersController.html":{}}}],["sum",{"_index":941,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["summary",{"_index":1248,"title":{},"body":{"controllers/UsersController.html":{}}}],["super",{"_index":807,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{}}}],["support",{"_index":1650,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1701,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1564,"title":{},"body":{"dependencies.html":{}}}],["table",{"_index":1538,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1537,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":1611,"title":{},"body":{"index.html":{}}}],["targetdate",{"_index":405,"title":{},"body":{"classes/CreateMilestoneDto.html":{},"injectables/MilestonesService.html":{},"injectables/ProjectsService.html":{},"classes/UpdateMilestoneDto.html":{}}}],["task",{"_index":146,"title":{},"body":{"classes/AssignTaskDto-1.html":{},"classes/TaskDto.html":{},"classes/TaskNameDto.html":{},"classes/TaskProjectDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/UpdateTaskStatusDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ViewAssignedTaskResponseDto.html":{}}}],["task')@apioperation({summary",{"_index":1253,"title":{},"body":{"controllers/UsersController.html":{}}}],["task'})@apibody({type",{"_index":1254,"title":{},"body":{"controllers/UsersController.html":{}}}],["task.dto",{"_index":1335,"title":{},"body":{"controllers/UsersController.html":{}}}],["task.dto.ts",{"_index":73,"title":{},"body":{"classes/AssignTaskDto.html":{},"classes/AssignTaskResponseDto.html":{},"classes/TaskDto.html":{},"classes/TaskInput.html":{},"classes/TaskProjectDto.html":{},"classes/ViewAssignedTaskResponseDto.html":{},"coverage.html":{}}}],["task.dto.ts:10",{"_index":1130,"title":{},"body":{"classes/TaskDto.html":{}}}],["task.dto.ts:13",{"_index":1131,"title":{},"body":{"classes/TaskDto.html":{}}}],["task.dto.ts:14",{"_index":1140,"title":{},"body":{"classes/TaskInput.html":{}}}],["task.dto.ts:19",{"_index":1135,"title":{},"body":{"classes/TaskDto.html":{}}}],["task.dto.ts:21",{"_index":84,"title":{},"body":{"classes/AssignTaskDto.html":{}}}],["task.dto.ts:22",{"_index":1134,"title":{},"body":{"classes/TaskDto.html":{}}}],["task.dto.ts:27",{"_index":93,"title":{},"body":{"classes/AssignTaskDto.html":{},"classes/ViewAssignedTaskResponseDto.html":{}}}],["task.dto.ts:32",{"_index":88,"title":{},"body":{"classes/AssignTaskDto.html":{}}}],["task.dto.ts:36",{"_index":1515,"title":{},"body":{"classes/ViewAssignedTaskResponseDto.html":{}}}],["task.dto.ts:37",{"_index":155,"title":{},"body":{"classes/AssignTaskResponseDto.html":{}}}],["task.dto.ts:40",{"_index":154,"title":{},"body":{"classes/AssignTaskResponseDto.html":{}}}],["task.dto.ts:5",{"_index":1143,"title":{},"body":{"classes/TaskProjectDto.html":{}}}],["task.name",{"_index":1465,"title":{},"body":{"injectables/UsersService.html":{}}}],["task/:employeeid",{"_index":1368,"title":{},"body":{"controllers/UsersController.html":{}}}],["task/:employeeid')@apioperation({summary",{"_index":1301,"title":{},"body":{"controllers/UsersController.html":{}}}],["taskdata",{"_index":1463,"title":{},"body":{"injectables/UsersService.html":{}}}],["taskdto",{"_index":1128,"title":{"classes/TaskDto.html":{}},"body":{"classes/TaskDto.html":{},"classes/TaskProjectDto.html":{},"classes/ViewAssignedTaskResponseDto.html":{},"coverage.html":{}}}],["taskgrouped",{"_index":1498,"title":{},"body":{"injectables/UsersService.html":{}}}],["taskgrouped.foreach",{"_index":1511,"title":{},"body":{"injectables/UsersService.html":{}}}],["taskid",{"_index":148,"title":{},"body":{"classes/AssignTaskDto-1.html":{},"classes/TaskNameDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/UpdateTaskStatusDto.html":{},"injectables/UsersService.html":{}}}],["taskinput",{"_index":89,"title":{"classes/TaskInput.html":{}},"body":{"classes/AssignTaskDto.html":{},"classes/AssignTaskResponseDto.html":{},"classes/TaskInput.html":{},"coverage.html":{}}}],["tasknamedto",{"_index":126,"title":{"classes/TaskNameDto.html":{}},"body":{"classes/AssignTaskDto-1.html":{},"classes/TaskNameDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/UpdateTaskStatusDto.html":{},"coverage.html":{}}}],["taskprojectdto",{"_index":1132,"title":{"classes/TaskProjectDto.html":{}},"body":{"classes/TaskDto.html":{},"classes/TaskProjectDto.html":{},"classes/ViewAssignedTaskResponseDto.html":{},"coverage.html":{}}}],["tasks",{"_index":78,"title":{},"body":{"classes/AssignTaskDto.html":{},"classes/AssignTaskDto-1.html":{},"classes/AssignTaskResponseDto.html":{},"classes/TaskDto.html":{},"classes/TaskInput.html":{},"classes/TaskNameDto.html":{},"classes/TaskProjectDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/UpdateTaskStatusDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ViewAssignedTaskResponseDto.html":{}}}],["tasks'})@apiokresponse({type",{"_index":1305,"title":{},"body":{"controllers/UsersController.html":{}}}],["tasks'})@apiparam({name",{"_index":1303,"title":{},"body":{"controllers/UsersController.html":{}}}],["tasks.length",{"_index":1461,"title":{},"body":{"injectables/UsersService.html":{}}}],["tasks.map((task",{"_index":1464,"title":{},"body":{"injectables/UsersService.html":{}}}],["taskstatus",{"_index":141,"title":{},"body":{"classes/AssignTaskDto-1.html":{},"classes/TaskNameDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/UpdateTaskStatusDto.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["taskstatus.completed",{"_index":1482,"title":{},"body":{"injectables/UsersService.html":{}}}],["taskstatus.pending",{"_index":1466,"title":{},"body":{"injectables/UsersService.html":{}}}],["taskstatuscount",{"_index":1386,"title":{},"body":{"injectables/UsersService.html":{}}}],["taskstatuscount(employeeid",{"_index":1401,"title":{},"body":{"injectables/UsersService.html":{}}}],["taskstatuscountdto",{"_index":151,"title":{"classes/TaskStatusCountDto.html":{}},"body":{"classes/AssignTaskDto-1.html":{},"classes/TaskNameDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/UpdateTaskStatusDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["taskstatuscounts",{"_index":522,"title":{},"body":{"classes/DashboardCountsDto.html":{},"classes/TaskDto.html":{},"classes/TaskProjectDto.html":{},"classes/TaskStatusCountsDto.html":{},"injectables/UsersService.html":{},"classes/ViewAssignedTaskResponseDto.html":{}}}],["taskstatuscountsdto",{"_index":531,"title":{"classes/TaskStatusCountsDto.html":{}},"body":{"classes/DashboardCountsDto.html":{},"classes/TaskStatusCountsDto.html":{},"coverage.html":{}}}],["taskstatus})@isstring()@isin(undefined",{"_index":1183,"title":{},"body":{"classes/UpdateTaskStatusDto.html":{}}}],["test",{"_index":1600,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":1603,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1602,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1598,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":1685,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(user",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.me(user",{"_index":234,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.register(dto",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(dto.email",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.departmentsservice.createdepartment(data",{"_index":578,"title":{},"body":{"controllers/DepartmentsController.html":{}}}],["this.departmentsservice.deletedepartment(departmentid",{"_index":582,"title":{},"body":{"controllers/DepartmentsController.html":{}}}],["this.departmentsservice.findall",{"_index":574,"title":{},"body":{"controllers/DepartmentsController.html":{}}}],["this.departmentsservice.findonedepartment(departmentid",{"_index":576,"title":{},"body":{"controllers/DepartmentsController.html":{}}}],["this.departmentsservice.updatedepartment(departmentid",{"_index":580,"title":{},"body":{"controllers/DepartmentsController.html":{}}}],["this.expensecategoryservice.createexpensecat(data",{"_index":642,"title":{},"body":{"controllers/ExpenseCategoryController.html":{}}}],["this.expensecategoryservice.deleteexpensecat(expenseid",{"_index":646,"title":{},"body":{"controllers/ExpenseCategoryController.html":{}}}],["this.expensecategoryservice.findallexpensecat",{"_index":639,"title":{},"body":{"controllers/ExpenseCategoryController.html":{}}}],["this.expensecategoryservice.findoneexpensecat(expenseid",{"_index":641,"title":{},"body":{"controllers/ExpenseCategoryController.html":{}}}],["this.expensecategoryservice.updateeexpensecat(expenseid",{"_index":644,"title":{},"body":{"controllers/ExpenseCategoryController.html":{}}}],["this.expensesservice.allemployeeexpenses(employeeid",{"_index":707,"title":{},"body":{"controllers/ExpensesController.html":{}}}],["this.expensesservice.chartdataexpenses",{"_index":702,"title":{},"body":{"controllers/ExpensesController.html":{}}}],["this.expensesservice.createexpense(data",{"_index":708,"title":{},"body":{"controllers/ExpensesController.html":{}}}],["this.expensesservice.deleteexpense(expenseid",{"_index":711,"title":{},"body":{"controllers/ExpensesController.html":{}}}],["this.expensesservice.findallexpenses",{"_index":704,"title":{},"body":{"controllers/ExpensesController.html":{}}}],["this.expensesservice.findoneexpense(expenseid",{"_index":705,"title":{},"body":{"controllers/ExpensesController.html":{}}}],["this.expensesservice.piechartdata",{"_index":703,"title":{},"body":{"controllers/ExpensesController.html":{}}}],["this.expensesservice.updateexpense(expenseid",{"_index":710,"title":{},"body":{"controllers/ExpensesController.html":{}}}],["this.jwtservice.sign(payload",{"_index":334,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.milestonesservice.createmilestone(data",{"_index":852,"title":{},"body":{"controllers/MilestonesController.html":{}}}],["this.milestonesservice.deletemilestone(milestoneid",{"_index":856,"title":{},"body":{"controllers/MilestonesController.html":{}}}],["this.milestonesservice.findallbyprojectid(projectid",{"_index":851,"title":{},"body":{"controllers/MilestonesController.html":{}}}],["this.milestonesservice.findallmilestones",{"_index":847,"title":{},"body":{"controllers/MilestonesController.html":{}}}],["this.milestonesservice.findonebymilestoneid(milestoneid",{"_index":849,"title":{},"body":{"controllers/MilestonesController.html":{}}}],["this.milestonesservice.radialchartmilestones",{"_index":857,"title":{},"body":{"controllers/MilestonesController.html":{}}}],["this.milestonesservice.updatemilestone(milestoneid",{"_index":854,"title":{},"body":{"controllers/MilestonesController.html":{}}}],["this.prisma.$transaction(async",{"_index":1084,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["this.prisma.department.count",{"_index":1508,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.department.create",{"_index":614,"title":{},"body":{"injectables/DepartmentsService.html":{}}}],["this.prisma.department.findfirst",{"_index":608,"title":{},"body":{"injectables/DepartmentsService.html":{}}}],["this.prisma.department.findmany",{"_index":606,"title":{},"body":{"injectables/DepartmentsService.html":{}}}],["this.prisma.department.findunique",{"_index":611,"title":{},"body":{"injectables/DepartmentsService.html":{}}}],["this.prisma.department.update",{"_index":617,"title":{},"body":{"injectables/DepartmentsService.html":{}}}],["this.prisma.expense.aggregate",{"_index":1502,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.expense.create",{"_index":748,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["this.prisma.expense.findfirst",{"_index":745,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["this.prisma.expense.findmany",{"_index":740,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["this.prisma.expense.findunique",{"_index":749,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["this.prisma.expense.update",{"_index":751,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["this.prisma.expensecategory.create",{"_index":676,"title":{},"body":{"injectables/ExpenseCategoryService.html":{}}}],["this.prisma.expensecategory.findfirst",{"_index":672,"title":{},"body":{"injectables/ExpenseCategoryService.html":{}}}],["this.prisma.expensecategory.findmany",{"_index":670,"title":{},"body":{"injectables/ExpenseCategoryService.html":{}}}],["this.prisma.expensecategory.update",{"_index":679,"title":{},"body":{"injectables/ExpenseCategoryService.html":{}}}],["this.prisma.milestone.create",{"_index":905,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["this.prisma.milestone.findfirst",{"_index":886,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["this.prisma.milestone.findmany",{"_index":885,"title":{},"body":{"injectables/MilestonesService.html":{},"injectables/ProjectsService.html":{}}}],["this.prisma.milestone.update",{"_index":916,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["this.prisma.product.create",{"_index":1012,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.prisma.product.findfirst",{"_index":1007,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.prisma.product.findmany",{"_index":1002,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.prisma.product.update",{"_index":1014,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.prisma.project.count",{"_index":1507,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.project.findfirst",{"_index":888,"title":{},"body":{"injectables/MilestonesService.html":{},"injectables/ProjectsService.html":{}}}],["this.prisma.project.findmany",{"_index":927,"title":{},"body":{"injectables/MilestonesService.html":{},"injectables/ProjectsService.html":{}}}],["this.prisma.project.update",{"_index":1121,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["this.prisma.task.count",{"_index":1475,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.task.createmany",{"_index":1468,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.task.findfirst",{"_index":1477,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.task.findmany",{"_index":1470,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.task.groupby",{"_index":1485,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.task.update",{"_index":1481,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.user.count",{"_index":1412,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.user.create",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["this.prisma.user.findfirst",{"_index":1432,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.user.findmany",{"_index":1431,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.user.findunique",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["this.prisma.user.update",{"_index":1459,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.productsservice.createproduct(data",{"_index":976,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.deleteproduct(productid",{"_index":980,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.findallproducts",{"_index":973,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.findoneproduct(productid",{"_index":975,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.updateproduct(productid",{"_index":978,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.projectsservice.createproject(data",{"_index":1041,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["this.projectsservice.deleteproject(projectid",{"_index":1045,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["this.projectsservice.findallprojects",{"_index":1038,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["this.projectsservice.findone(projectid",{"_index":1040,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["this.projectsservice.projectstatus(projectid",{"_index":1047,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["this.projectsservice.updateproject(projectid",{"_index":1043,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["this.usersservice.assigntask(body",{"_index":1367,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.createuser",{"_index":1354,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.deleteuser(id",{"_index":1365,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall",{"_index":1356,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findbyid(id",{"_index":1359,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getallcounts",{"_index":1355,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.taskstatuscount(employeeid",{"_index":1375,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.updatetaskstatus(employeeid",{"_index":1372,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.updateuser(id",{"_index":1362,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.viewassignedtask(employeeid",{"_index":1370,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":252,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/DepartmentsService.html":{},"injectables/ExpenseCategoryService.html":{},"injectables/ExpensesService.html":{},"injectables/MilestonesService.html":{},"injectables/ProductsService.html":{},"injectables/ProjectsService.html":{},"injectables/UsersService.html":{}}}],["time",{"_index":1665,"title":{},"body":{"index.html":{}}}],["token",{"_index":258,"title":{},"body":{"guards/AuthGuard.html":{}}}],["total",{"_index":374,"title":{},"body":{"classes/CreateExpenseDto.html":{},"injectables/ExpensesService.html":{},"injectables/MilestonesService.html":{},"classes/UpdateExpenseDto.html":{}}}],["totalachievedpercentage",{"_index":1075,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["totalannualrevenue",{"_index":523,"title":{},"body":{"classes/DashboardCountsDto.html":{},"classes/TaskStatusCountsDto.html":{},"injectables/UsersService.html":{}}}],["totaldepartments",{"_index":524,"title":{},"body":{"classes/DashboardCountsDto.html":{},"classes/TaskStatusCountsDto.html":{},"injectables/UsersService.html":{}}}],["totalemployees",{"_index":525,"title":{},"body":{"classes/DashboardCountsDto.html":{},"classes/TaskStatusCountsDto.html":{},"injectables/UsersService.html":{}}}],["totalmilestonepercentage",{"_index":1073,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["totalotherpercentage",{"_index":913,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["totalpercentage",{"_index":897,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["totalprojects",{"_index":526,"title":{},"body":{"classes/DashboardCountsDto.html":{},"classes/TaskStatusCountsDto.html":{},"injectables/UsersService.html":{}}}],["totalremainingpercentage",{"_index":1076,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["totalsbydepartment",{"_index":787,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["totalsbydepartment[deptname",{"_index":790,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["touch",{"_index":1693,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":102,"title":{},"body":{"classes/AssignTaskDto.html":{},"classes/AssignTaskDto-1.html":{},"classes/AssignTaskResponseDto.html":{},"classes/CostAllocationDto.html":{},"classes/CreateExpenseDto.html":{},"classes/CreateProjectWithAllocationsDto.html":{},"classes/TaskInput.html":{},"classes/TaskNameDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/UpdateExpenseDto.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTaskStatusDto.html":{},"dependencies.html":{}}}],["true",{"_index":108,"title":{},"body":{"classes/AssignTaskDto.html":{},"classes/AssignTaskDto-1.html":{},"classes/AssignTaskResponseDto.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"classes/CostAllocationDto.html":{},"classes/CreateProjectWithAllocationsDto.html":{},"classes/CreateUserDto.html":{},"injectables/DepartmentsService.html":{},"injectables/ExpenseCategoryService.html":{},"injectables/ExpensesService.html":{},"injectables/MilestonesService.html":{},"injectables/ProductsService.html":{},"injectables/ProjectsService.html":{},"classes/TaskInput.html":{},"classes/TaskNameDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTaskStatusDto.html":{},"injectables/UsersService.html":{}}}],["true})@isdatestring",{"_index":472,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["true})@isemail()@isnotempty",{"_index":475,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["true})@isnotempty",{"_index":488,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["true})@isnotempty()@isdatestring",{"_index":480,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["true})@isnotempty()@isnumber",{"_index":503,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["true})@isnotempty()@ispostalcode('in",{"_index":494,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["true})@isnotempty()@isstring",{"_index":459,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["true})@isnotempty()@isstring()@isphonenumber('in",{"_index":491,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["true})@type(undefined",{"_index":92,"title":{},"body":{"classes/AssignTaskDto.html":{},"classes/AssignTaskDto-1.html":{},"classes/CreateProjectWithAllocationsDto.html":{},"classes/UpdateProjectDto.html":{}}}],["try",{"_index":260,"title":{},"body":{"guards/AuthGuard.html":{}}}],["ts",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ExpensesService.html":{},"injectables/ProjectsService.html":{},"injectables/UsersService.html":{}}}],["twitter",{"_index":1697,"title":{},"body":{"index.html":{}}}],["tx",{"_index":1085,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["tx.costallocation.create",{"_index":1094,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["tx.costallocation.deletemany",{"_index":1109,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["tx.costallocation.updatemany",{"_index":1118,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["tx.project.create",{"_index":1086,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["tx.project.update",{"_index":1099,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["tx.projectassignment.create",{"_index":1091,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["tx.projectassignment.deletemany",{"_index":1107,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["tx.projectassignment.updatemany",{"_index":1116,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["type",{"_index":79,"title":{},"body":{"classes/AssignTaskDto.html":{},"classes/AssignTaskDto-1.html":{},"classes/AssignTaskResponseDto.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CostAllocationDto.html":{},"classes/CreateExpenseDto.html":{},"classes/CreateMilestoneDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateProjectWithAllocationsDto.html":{},"classes/CreateUserDto.html":{},"classes/DashboardCountsDto.html":{},"classes/DeleteUserResponseDto.html":{},"controllers/DepartmentsController.html":{},"injectables/DepartmentsService.html":{},"controllers/ExpenseCategoryController.html":{},"injectables/ExpenseCategoryService.html":{},"controllers/ExpensesController.html":{},"injectables/ExpensesService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"controllers/MilestonesController.html":{},"injectables/MilestonesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/ProjectsController.html":{},"injectables/ProjectsService.html":{},"classes/RegisterDto.html":{},"classes/TaskDto.html":{},"classes/TaskInput.html":{},"classes/TaskNameDto.html":{},"classes/TaskProjectDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/TaskStatusCountsDto.html":{},"classes/UpdateExpenseDto.html":{},"classes/UpdateMilestoneDto.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ViewAssignedTaskResponseDto.html":{},"coverage.html":{}}}],["types",{"_index":426,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":1585,"title":{},"body":{"index.html":{}}}],["udpate",{"_index":1297,"title":{},"body":{"controllers/UsersController.html":{}}}],["ui",{"_index":136,"title":{},"body":{"classes/AssignTaskDto-1.html":{},"classes/TaskDto.html":{},"classes/TaskNameDto.html":{},"classes/TaskProjectDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/ViewAssignedTaskResponseDto.html":{},"dependencies.html":{}}}],["unauthorizedexception",{"_index":244,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["unauthorizedexception('invalid",{"_index":270,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["uncategorized",{"_index":779,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["undefined",{"_index":127,"title":{},"body":{"classes/AssignTaskDto-1.html":{},"classes/CreateUserDto.html":{},"injectables/ProjectsService.html":{},"classes/TaskDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ViewAssignedTaskResponseDto.html":{}}}],["undefined})@isarray()@validatenested({each",{"_index":91,"title":{},"body":{"classes/AssignTaskDto.html":{}}}],["uniquesuffix",{"_index":1345,"title":{},"body":{"controllers/UsersController.html":{}}}],["uniquesuffix}${extname(file.originalname",{"_index":1350,"title":{},"body":{"controllers/UsersController.html":{}}}],["unit",{"_index":1599,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DepartmentsController.html":{},"controllers/ExpenseCategoryController.html":{},"injectables/ExpenseCategoryService.html":{},"controllers/ExpensesController.html":{},"injectables/ExpensesService.html":{},"injectables/JwtStrategy.html":{},"controllers/MilestonesController.html":{},"injectables/MilestonesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/ProjectsController.html":{},"injectables/ProjectsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":1708,"title":{},"body":{"properties.html":{}}}],["update",{"_index":553,"title":{},"body":{"controllers/DepartmentsController.html":{},"injectables/DepartmentsService.html":{},"controllers/ExpenseCategoryController.html":{},"injectables/ExpenseCategoryService.html":{},"controllers/ExpensesController.html":{},"controllers/MilestonesController.html":{},"injectables/MilestonesService.html":{},"controllers/ProductsController.html":{},"controllers/ProjectsController.html":{},"controllers/UsersController.html":{}}}],["update(@param('expenseid",{"_index":709,"title":{},"body":{"controllers/ExpensesController.html":{}}}],["update(@param('id",{"_index":1361,"title":{},"body":{"controllers/UsersController.html":{}}}],["update(@param('projectid",{"_index":1042,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["update(departmentid",{"_index":564,"title":{},"body":{"controllers/DepartmentsController.html":{}}}],["update(expenseid",{"_index":633,"title":{},"body":{"controllers/ExpenseCategoryController.html":{},"controllers/ExpensesController.html":{}}}],["update(id",{"_index":1289,"title":{},"body":{"controllers/UsersController.html":{}}}],["update(milestoneid",{"_index":840,"title":{},"body":{"controllers/MilestonesController.html":{}}}],["update(productid",{"_index":966,"title":{},"body":{"controllers/ProductsController.html":{}}}],["update(projectid",{"_index":1032,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["updated",{"_index":770,"title":{},"body":{"injectables/ExpensesService.html":{},"injectables/ProjectsService.html":{},"controllers/UsersController.html":{}}}],["updatedassignments",{"_index":1106,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["updatedcostallocations",{"_index":1108,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["updateddata",{"_index":1439,"title":{},"body":{"injectables/UsersService.html":{}}}],["updatedepartment",{"_index":591,"title":{},"body":{"injectables/DepartmentsService.html":{}}}],["updatedepartment(departmentid",{"_index":601,"title":{},"body":{"injectables/DepartmentsService.html":{}}}],["updatedexpense",{"_index":750,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["updatedmilestone",{"_index":915,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["updatedproduct",{"_index":1013,"title":{},"body":{"injectables/ProductsService.html":{}}}],["updatedproject",{"_index":1098,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["updateeexpensecat",{"_index":656,"title":{},"body":{"injectables/ExpenseCategoryService.html":{}}}],["updateeexpensecat(expenseid",{"_index":665,"title":{},"body":{"injectables/ExpenseCategoryService.html":{}}}],["updateexpense",{"_index":723,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["updateexpense(expenseid",{"_index":735,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["updateexpensedto",{"_index":400,"title":{"classes/UpdateExpenseDto.html":{}},"body":{"classes/CreateExpenseDto.html":{},"controllers/ExpensesController.html":{},"injectables/ExpensesService.html":{},"classes/UpdateExpenseDto.html":{},"coverage.html":{}}}],["updatemilestone",{"_index":869,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["updatemilestone(milestoneid",{"_index":881,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["updatemilestonedto",{"_index":415,"title":{"classes/UpdateMilestoneDto.html":{}},"body":{"classes/CreateMilestoneDto.html":{},"controllers/MilestonesController.html":{},"injectables/MilestonesService.html":{},"classes/UpdateMilestoneDto.html":{},"coverage.html":{}}}],["updateproduct",{"_index":990,"title":{},"body":{"injectables/ProductsService.html":{}}}],["updateproduct(productid",{"_index":999,"title":{},"body":{"injectables/ProductsService.html":{}}}],["updateproductdto",{"_index":427,"title":{"classes/UpdateProductDto.html":{}},"body":{"classes/CreateProductDto.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["updateproject",{"_index":1057,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["updateproject(projectid",{"_index":1067,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["updateprojectdto",{"_index":362,"title":{"classes/UpdateProjectDto.html":{}},"body":{"classes/CostAllocationDto.html":{},"classes/CreateProjectWithAllocationsDto.html":{},"classes/UpdateProjectDto.html":{},"coverage.html":{}}}],["updates",{"_index":1435,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["updatestatus",{"_index":1120,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["updatestatus.status",{"_index":1122,"title":{},"body":{"injectables/ProjectsService.html":{}}}],["updatetaskstatus",{"_index":1242,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updatetaskstatus(employeeid",{"_index":1292,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updatetaskstatusdto",{"_index":145,"title":{"classes/UpdateTaskStatusDto.html":{}},"body":{"classes/AssignTaskDto-1.html":{},"classes/TaskNameDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/UpdateTaskStatusDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateuser",{"_index":1387,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuser(id",{"_index":1404,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserdto",{"_index":1187,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["uploadedfile",{"_index":1308,"title":{},"body":{"controllers/UsersController.html":{}}}],["uploads/images",{"_index":1342,"title":{},"body":{"controllers/UsersController.html":{}}}],["url",{"_index":388,"title":{},"body":{"classes/CreateExpenseDto.html":{},"classes/UpdateExpenseDto.html":{}}}],["used",{"_index":904,"title":{},"body":{"injectables/MilestonesService.html":{}}}],["usefactory",{"_index":285,"title":{},"body":{"modules/AuthModule.html":{}}}],["useguards",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{},"controllers/DepartmentsController.html":{}}}],["useguards(authguard('jwt",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{},"controllers/DepartmentsController.html":{}}}],["useguards(undefined)@get('me",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{}}}],["useinterceptors",{"_index":1307,"title":{},"body":{"controllers/UsersController.html":{}}}],["user",{"_index":81,"title":{},"body":{"classes/AssignTaskDto.html":{},"classes/AssignTaskResponseDto.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserResponseDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/TaskInput.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user'})@apiparam({name",{"_index":1286,"title":{},"body":{"controllers/UsersController.html":{}}}],["user'})@apiresponse({status",{"_index":1260,"title":{},"body":{"controllers/UsersController.html":{}}}],["user'})@isoptional()@isin(['user",{"_index":500,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto",{"_index":1312,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":444,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserResponseDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:18",{"_index":1198,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:19",{"_index":478,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:23",{"_index":1203,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:24",{"_index":486,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:28",{"_index":1196,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:29",{"_index":476,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:32",{"_index":1205,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:35",{"_index":492,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:38",{"_index":1207,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:39",{"_index":473,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:43",{"_index":1194,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:44",{"_index":484,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:48",{"_index":1201,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:49",{"_index":504,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:5",{"_index":545,"title":{},"body":{"classes/DeleteUserResponseDto.html":{}}}],["user.dto.ts:53",{"_index":1210,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:54",{"_index":481,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:58",{"_index":1199,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:59",{"_index":460,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:63",{"_index":1190,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:64",{"_index":506,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:68",{"_index":1212,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:69",{"_index":462,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:73",{"_index":1192,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:74",{"_index":495,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:78",{"_index":489,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:83",{"_index":501,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:91",{"_index":469,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:96",{"_index":497,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.email",{"_index":332,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.id",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":328,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.role",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.userid",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{}}}],["userid",{"_index":331,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["userresponsedto",{"_index":1215,"title":{"classes/UserResponseDto.html":{}},"body":{"classes/UserResponseDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users",{"_index":1270,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users'})@apiokresponse({description",{"_index":1268,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":1380,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":1310,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/users.module",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":1236,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":47,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":1309,"title":{"injectables/UsersService.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":1666,"title":{},"body":{"index.html":{}}}],["uuid",{"_index":82,"title":{},"body":{"classes/AssignTaskDto.html":{},"classes/AssignTaskDto-1.html":{},"classes/AssignTaskResponseDto.html":{},"classes/CreateUserDto.html":{},"classes/TaskDto.html":{},"classes/TaskInput.html":{},"classes/TaskNameDto.html":{},"classes/TaskProjectDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"classes/ViewAssignedTaskResponseDto.html":{}}}],["valid",{"_index":344,"title":{},"body":{"classes/CostAllocationDto.html":{},"classes/CreateExpenseDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateProjectWithAllocationsDto.html":{},"classes/UpdateExpenseDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProjectDto.html":{}}}],["validate",{"_index":798,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":801,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validated",{"_index":230,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ProjectsService.html":{},"injectables/UsersService.html":{}}}],["validatenested",{"_index":99,"title":{},"body":{"classes/AssignTaskDto.html":{},"classes/AssignTaskDto-1.html":{},"classes/AssignTaskResponseDto.html":{},"classes/CostAllocationDto.html":{},"classes/CreateProjectWithAllocationsDto.html":{},"classes/TaskInput.html":{},"classes/TaskNameDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTaskStatusDto.html":{}}}],["validateuser",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{}}}],["validation",{"_index":1264,"title":{},"body":{"controllers/UsersController.html":{}}}],["validator",{"_index":101,"title":{},"body":{"classes/AssignTaskDto.html":{},"classes/AssignTaskDto-1.html":{},"classes/AssignTaskResponseDto.html":{},"classes/CostAllocationDto.html":{},"classes/CreateExpenseDto.html":{},"classes/CreateMilestoneDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateProjectWithAllocationsDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/TaskInput.html":{},"classes/TaskNameDto.html":{},"classes/TaskStatusCountDto.html":{},"classes/UpdateExpenseDto.html":{},"classes/UpdateMilestoneDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["value",{"_index":1570,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["values",{"_index":1438,"title":{},"body":{"injectables/UsersService.html":{}}}],["version",{"_index":1706,"title":{},"body":{"properties.html":{}}}],["video",{"_index":1658,"title":{},"body":{"index.html":{}}}],["view",{"_index":1302,"title":{},"body":{"controllers/UsersController.html":{}}}],["viewassignedtask",{"_index":1388,"title":{},"body":{"injectables/UsersService.html":{}}}],["viewassignedtask(employeeid",{"_index":1406,"title":{},"body":{"injectables/UsersService.html":{}}}],["viewassignedtaskresponsedto",{"_index":1137,"title":{"classes/ViewAssignedTaskResponseDto.html":{}},"body":{"classes/TaskDto.html":{},"classes/TaskProjectDto.html":{},"controllers/UsersController.html":{},"classes/ViewAssignedTaskResponseDto.html":{},"coverage.html":{}}}],["viewassignedtasks",{"_index":1243,"title":{},"body":{"controllers/UsersController.html":{}}}],["viewassignedtasks(employeeid",{"_index":1299,"title":{},"body":{"controllers/UsersController.html":{}}}],["visit",{"_index":1647,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":1661,"title":{},"body":{"index.html":{}}}],["watch",{"_index":1594,"title":{},"body":{"index.html":{}}}],["website",{"_index":1695,"title":{},"body":{"index.html":{}}}],["working",{"_index":1646,"title":{},"body":{"index.html":{}}}],["world",{"_index":69,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":1675,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":1689,"title":{},"body":{"index.html":{}}}],["you're",{"_index":1604,"title":{},"body":{"index.html":{}}}],["yyyy",{"_index":775,"title":{},"body":{"injectables/ExpensesService.html":{}}}],["zoom",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DepartmentsModule.html":{},"modules/ExpenseCategoryModule.html":{},"modules/ExpensesModule.html":{},"modules/MilestonesModule.html":{},"modules/PrismaModule.html":{},"modules/ProductsModule.html":{},"modules/ProjectsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nDepartmentsModule\n\nDepartmentsModule\n\nAppModule -->\n\nDepartmentsModule->AppModule\n\n\n\n\n\nExpenseCategoryModule\n\nExpenseCategoryModule\n\nAppModule -->\n\nExpenseCategoryModule->AppModule\n\n\n\n\n\nExpensesModule\n\nExpensesModule\n\nAppModule -->\n\nExpensesModule->AppModule\n\n\n\n\n\nMilestonesModule\n\nMilestonesModule\n\nAppModule -->\n\nMilestonesModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nProductsModule\n\nProductsModule\n\nAppModule -->\n\nProductsModule->AppModule\n\n\n\n\n\nProjectsModule\n\nProjectsModule\n\nAppModule -->\n\nProjectsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            DepartmentsModule\n                        \n                        \n                            ExpenseCategoryModule\n                        \n                        \n                            ExpensesModule\n                        \n                        \n                            MilestonesModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            ProductsModule\n                        \n                        \n                            ProjectsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaModule } from './prisma/prisma.module';\nimport { AuthModule } from './auth/auth.module';\nimport { UsersModule } from './users/users.module';\nimport { DepartmentsModule } from './departments/departments.module';\nimport { ExpenseCategoryModule } from './expense-category/expense-category.module';\nimport { ProductsModule } from './products/products.module';\nimport { MilestonesModule } from './milestones/milestones.module';\nimport { ProjectsModule } from './projects/projects.module';\nimport { ExpensesModule } from './expenses/expenses.module';\n\n@Module({\n  imports: [\n    PrismaModule,\n    AuthModule,\n    UsersModule,\n    DepartmentsModule,\n    ExpenseCategoryModule,\n    ProductsModule,\n    MilestonesModule,\n    ProjectsModule,\n    ExpensesModule,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AssignTaskDto.html":{"url":"classes/AssignTaskDto.html","title":"class - AssignTaskDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AssignTaskDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/assign-task.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                employeeId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                projectId\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                tasks\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        employeeId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'user-uuid-string'})@IsUUID()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/assign-task.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        projectId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'project-uuid-string', required: false})@IsUUID()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/assign-task.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        tasks\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TaskInput[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined})@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/assign-task.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsNotEmpty,\n  IsUUID,\n  IsArray,\n  ValidateNested,\n  IsOptional,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\n\nclass TaskInput {\n  @ApiProperty({ example: 'Fix bugs in module' })\n  @IsNotEmpty()\n  name: string;\n}\n\nexport class AssignTaskDto {\n  @ApiProperty({ example: 'user-uuid-string' })\n  @IsUUID()\n  @IsNotEmpty()\n  employeeId: string;\n\n  @ApiProperty({ type: [TaskInput] })\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => TaskInput)\n  tasks: TaskInput[];\n\n  @ApiProperty({ example: 'project-uuid-string', required: false })\n  @IsUUID()\n  @IsOptional()\n  projectId?: string;\n}\n\nexport class AssignTaskResponseDto {\n  @ApiProperty({ example: 'Tasks assigned successfully' })\n  message: string;\n\n  @ApiProperty({ example: 3 })\n  count: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AssignTaskDto-1.html":{"url":"classes/AssignTaskDto-1.html","title":"class - AssignTaskDto-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AssignTaskDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/task-dto.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                employeeId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                projectId\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                tasks\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        employeeId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'employee-uuid-123'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/task-dto.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        projectId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'project-uuid-456'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/task-dto.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        tasks\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TaskNameDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined, description: 'Array of tasks to assign'})@IsArray()@ArrayNotEmpty()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/task-dto.dto.ts:29\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport {\n  ArrayNotEmpty,\n  IsArray,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  ValidateNested,\n  IsIn,\n} from 'class-validator';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class TaskNameDto {\n  @ApiProperty({ example: 'Fix UI bugs' })\n  @IsString()\n  name: string;\n}\n\nexport class AssignTaskDto {\n  @ApiProperty({ example: 'employee-uuid-123' })\n  @IsString()\n  employeeId: string;\n\n  @ApiProperty({ type: [TaskNameDto], description: 'Array of tasks to assign' })\n  @IsArray()\n  @ArrayNotEmpty()\n  @ValidateNested({ each: true })\n  @Type(() => TaskNameDto)\n  tasks: TaskNameDto[];\n\n  @ApiPropertyOptional({ example: 'project-uuid-456' })\n  @IsOptional()\n  @IsString()\n  projectId?: string;\n}\n\nexport enum TaskStatus {\n  PENDING = 'PENDING',\n  IN_PROGRESS = 'IN_PROGRESS',\n  COMPLETED = 'COMPLETED',\n}\n\nexport class UpdateTaskStatusDto {\n  @ApiProperty({ example: 'task-uuid-789' })\n  @IsString()\n  @IsNotEmpty()\n  taskId: string;\n\n  @ApiProperty({ example: 'PENDING', enum: TaskStatus })\n  @IsString()\n  @IsIn(Object.values(TaskStatus))\n  status: TaskStatus;\n}\n\nexport class TaskStatusCountDto {\n  @ApiProperty({ example: 5 })\n  PENDING: number;\n\n  @ApiProperty({ example: 3 })\n  IN_PROGRESS: number;\n\n  @ApiProperty({ example: 7 })\n  COMPLETED: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AssignTaskResponseDto.html":{"url":"classes/AssignTaskResponseDto.html","title":"class - AssignTaskResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AssignTaskResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/assign-task.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                count\n                            \n                            \n                                    \n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 3})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/assign-task.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Tasks assigned successfully'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/assign-task.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsNotEmpty,\n  IsUUID,\n  IsArray,\n  ValidateNested,\n  IsOptional,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\n\nclass TaskInput {\n  @ApiProperty({ example: 'Fix bugs in module' })\n  @IsNotEmpty()\n  name: string;\n}\n\nexport class AssignTaskDto {\n  @ApiProperty({ example: 'user-uuid-string' })\n  @IsUUID()\n  @IsNotEmpty()\n  employeeId: string;\n\n  @ApiProperty({ type: [TaskInput] })\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => TaskInput)\n  tasks: TaskInput[];\n\n  @ApiProperty({ example: 'project-uuid-string', required: false })\n  @IsUUID()\n  @IsOptional()\n  projectId?: string;\n}\n\nexport class AssignTaskResponseDto {\n  @ApiProperty({ example: 'Tasks assigned successfully' })\n  message: string;\n\n  @ApiProperty({ example: 3 })\n  count: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                getMe\n                            \n                            \n                                    \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    \n                                logout\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getMe\n                        \n                    \n                \n            \n            \n                \n                        \n                    getMe(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('me')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(dto: LoginDto, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(200)@Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    logout(res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(200)@Post('logout')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { message: string; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Post,\n  Res,\n  HttpCode,\n  UseGuards,\n  Get,\n  Req,\n  Request,\n} from '@nestjs/common';\nimport { Response } from 'express';\nimport { AuthService } from './auth.service';\nimport { LoginDto } from './dto/auth.dto';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  // @Post('register')\n  // async register(@Body() dto: RegisterDto) {\n  //     await this.authService.register(dto);\n  //     return { message: 'Registered successfully' };\n  // }\n\n  @HttpCode(200)\n  @Post('login')\n  async login(\n    @Body() dto: LoginDto,\n    @Res({ passthrough: true }) res: Response,\n  ) {\n    const user = await this.authService.validateUser(dto.email, dto.password);\n    const { accessToken } = await this.authService.login(user);\n\n    res.cookie('access_token', accessToken, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'strict',\n      maxAge: 1000 * 60 * 60 * 24, // 1 day\n    });\n\n    return { message: 'Login successful', user };\n  }\n\n  @HttpCode(200)\n  @Post('logout')\n  logout(@Res({ passthrough: true }) res: Response) {\n    res.clearCookie('access_token', {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'strict',\n    });\n    return { message: 'Logged out successfully' };\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Get('me')\n  getMe(@Req() req: Request) {\n    // @ts-expect-error: allocatedAmount is validated to always exist\n    const user = req.user;\n    return this.authService.me(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuard.html":{"url":"guards/AuthGuard.html","title":"guard - AuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/auth.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.guard.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Request } from 'express';\nimport * as jwt from 'jsonwebtoken';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  canActivate(context: ExecutionContext): boolean {\n    const request = context.switchToHttp().getRequest();\n    const authHeader = request.headers.authorization;\n\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      throw new UnauthorizedException(\n        'Authorization header missing or malformed',\n      );\n    }\n\n    const token = authHeader.split(' ')[1];\n\n    try {\n      const decoded = jwt.verify(\n        token,\n        process.env.JWT_SECRET || 'default-secret',\n      );\n      (request as any).user = decoded; // attach user to request\n      return true;\n    } catch (err) {\n      throw new UnauthorizedException('Invalid or expired token');\n    }\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService\n\nAuthService\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { JwtModule } from '@nestjs/jwt';\nimport { JwtStrategy } from './jwt.strategy';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot(),\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (config: ConfigService) => ({\n        secret: config.get('JWT_SECRET'),\n        signOptions: { expiresIn: config.get('JWT_EXPIRES_IN') || '1d' },\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n  providers: [AuthService, JwtStrategy],\n  controllers: [AuthController],\n})\nexport class AuthModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                me\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(user: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        me\n                        \n                    \n                \n            \n            \n                \n                        \n                    me(user: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport * as bcrypt from 'bcrypt';\nimport { PrismaService } from '../prisma/prisma.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private prisma: PrismaService,\n    private jwtService: JwtService,\n  ) {}\n\n  // async register(dto: RegisterDto) {\n  //     const hashedPassword = await bcrypt.hash(dto.password, 10);\n  //     const user = await this.prisma.user.create({\n  //         data: {\n  //             name: dto.name,\n  //             email: dto.email,\n  //             password: hashedPassword,\n  //             role: dto.role || 'USER',\n  //         },\n  //     });\n\n  //     return { id: user.id };\n  // }\n\n  async validateUser(email: string, password: string) {\n    const user = await this.prisma.user.findUnique({ where: { email } });\n    if (!user || !(await bcrypt.compare(password, user.password))) {\n      throw new UnauthorizedException('Invalid credentials');\n    }\n    return user;\n  }\n\n  async login(user: { id: string; email: string; role: string }) {\n    const payload = {\n      userId: user.id,\n      email: user.email,\n      role: user.role,\n    };\n    const accessToken = this.jwtService.sign(payload, { expiresIn: '1d' });\n    return { accessToken };\n  }\n\n  async me(user: any) {\n    const profile = await this.prisma.user.findUnique({\n      where: { id: user.userId, isDeleted: false },\n    });\n\n    if (!profile) {\n      throw new NotFoundException('User does not exists');\n    }\n\n    return profile;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CostAllocationDto.html":{"url":"classes/CostAllocationDto.html","title":"class - CostAllocationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CostAllocationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/projects/dto/project.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                allocatedAmount\n                            \n                            \n                                    \n                                categoryId\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        allocatedAmount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber({}, {message: 'allocatedAmount must be a valid number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/projects/dto/project.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        categoryId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/projects/dto/project.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/projects/dto/project.dto.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  IsOptional,\n  IsDateString,\n  IsNumber,\n  IsArray,\n  ArrayMinSize,\n  ValidateNested,\n} from 'class-validator';\n\nimport { Type } from 'class-transformer';\n\nclass CostAllocationDto {\n  @IsString()\n  categoryId: string;\n\n  @IsNumber({}, { message: 'allocatedAmount must be a valid number' })\n  allocatedAmount: number;\n\n  @IsOptional()\n  @IsString()\n  description?: string;\n}\n\nexport class CreateProjectWithAllocationsDto {\n  @IsString()\n  name: string;\n\n  @IsOptional()\n  @IsString()\n  clientName?: string;\n\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  @IsDateString()\n  startDate: string;\n\n  @IsDateString()\n  endDate: string;\n\n  @IsNumber({}, { message: 'Budget must be a valid number' })\n  budget: number;\n\n  @IsOptional()\n  @IsString()\n  status?: string;\n\n  @IsArray()\n  @ArrayMinSize(1, { message: 'At least one employee must be assigned' })\n  @IsString({ each: true })\n  employeeIds: string[];\n\n  @IsArray()\n  @ArrayMinSize(1, { message: 'At least one cost allocation must be assigned' })\n  @ValidateNested({ each: true })\n  @Type(() => CostAllocationDto)\n  costAllocations: CostAllocationDto[];\n}\n\nexport class UpdateProjectDto {\n  @IsOptional()\n  @IsString()\n  name?: string;\n\n  @IsOptional()\n  @IsString()\n  clientName?: string;\n\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  @IsOptional()\n  @IsDateString()\n  startDate?: string;\n\n  @IsOptional()\n  @IsDateString()\n  endDate?: string;\n\n  @IsOptional()\n  @IsNumber({}, { message: 'Budget must be a valid number' })\n  budget?: number;\n\n  @IsOptional()\n  @IsString()\n  status?: string;\n\n  @IsOptional()\n  @IsArray()\n  @IsString({ each: true })\n  employeeIds?: string[];\n\n  @IsOptional()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => CostAllocationDto)\n  costAllocations?: CostAllocationDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateExpenseDto.html":{"url":"classes/CreateExpenseDto.html","title":"class - CreateExpenseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateExpenseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/expenses/dto/expense.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                amount\n                            \n                            \n                                    \n                                date\n                            \n                            \n                                    \n                                departmentId\n                            \n                            \n                                    \n                                employeeId\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                expenseCatId\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                notes\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                productId\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                productName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                projectId\n                            \n                            \n                                    \n                                    \n                                quantity\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                receiptUrl\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                            \n                                    \n                                    \n                                total\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        amount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber({}, {message: 'amount must be a valid number'})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/expenses/dto/expense.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/expenses/dto/expense.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        departmentId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/expenses/dto/expense.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        employeeId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/expenses/dto/expense.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        expenseCatId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/expenses/dto/expense.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        notes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/expenses/dto/expense.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        productId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/expenses/dto/expense.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        productName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/expenses/dto/expense.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        projectId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/expenses/dto/expense.dto.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/expenses/dto/expense.dto.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        receiptUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsUrl({}, {message: 'receiptUrl must be a valid URL'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/expenses/dto/expense.dto.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ExpenseStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEnum(ExpenseStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/expenses/dto/expense.dto.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        total\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber({}, {message: 'total must be a valid number'})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/expenses/dto/expense.dto.ts:49\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  IsOptional,\n  IsNumber,\n  IsInt,\n  IsDateString,\n  IsEnum,\n  IsUrl,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\n\nenum ExpenseStatus {\n  PENDING = 'PENDING',\n  APPROVED = 'APPROVED',\n  REJECTED = 'REJECTED',\n}\n\nexport class CreateExpenseDto {\n  @IsString()\n  departmentId: string;\n\n  @IsString()\n  employeeId: string;\n\n  @IsOptional()\n  @IsString()\n  expenseCatId?: string;\n\n  @IsOptional()\n  @IsString()\n  productId?: string;\n\n  @IsOptional()\n  @IsString()\n  productName?: string;\n\n  @IsNumber({}, { message: 'amount must be a valid number' })\n  @Type(() => Number)\n  amount: number;\n\n  @IsInt()\n  @Type(() => Number)\n  quantity: number;\n\n  @IsNumber({}, { message: 'total must be a valid number' })\n  @Type(() => Number)\n  total: number;\n\n  @IsDateString()\n  date: string;\n\n  @IsOptional()\n  @IsString()\n  notes?: string;\n\n  @IsOptional()\n  @IsUrl({}, { message: 'receiptUrl must be a valid URL' })\n  receiptUrl?: string;\n\n  @IsOptional()\n  @IsEnum(ExpenseStatus)\n  status?: ExpenseStatus;\n\n  @IsOptional()\n  @IsString()\n  projectId?: string;\n}\n\nexport class UpdateExpenseDto {\n  @IsOptional()\n  @IsString()\n  departmentId?: string;\n\n  @IsOptional()\n  @IsString()\n  employeeId?: string;\n\n  @IsOptional()\n  @IsString()\n  expenseCatId?: string;\n\n  @IsOptional()\n  @IsString()\n  productId?: string;\n\n  @IsOptional()\n  @IsString()\n  productName?: string;\n\n  @IsOptional()\n  @IsNumber()\n  @Type(() => Number)\n  amount?: number;\n\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  quantity?: number;\n\n  @IsOptional()\n  @IsNumber()\n  @Type(() => Number)\n  total?: number;\n\n  @IsOptional()\n  @IsDateString()\n  date?: string;\n\n  @IsOptional()\n  @IsString()\n  notes?: string;\n\n  @IsOptional()\n  @IsUrl()\n  receiptUrl?: string;\n\n  @IsOptional()\n  @IsEnum(ExpenseStatus)\n  status?: ExpenseStatus;\n\n  @IsOptional()\n  @IsString()\n  projectId?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMilestoneDto.html":{"url":"classes/CreateMilestoneDto.html","title":"class - CreateMilestoneDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMilestoneDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/milestones/dto/milestone.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                achievedDate\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                percentage\n                            \n                            \n                                    \n                                projectId\n                            \n                            \n                                    \n                                targetDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        achievedDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/milestones/dto/milestone.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/milestones/dto/milestone.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/milestones/dto/milestone.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        percentage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/milestones/dto/milestone.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        projectId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/milestones/dto/milestone.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        targetDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/milestones/dto/milestone.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsInt, IsDateString, IsOptional } from 'class-validator';\n\nexport class CreateMilestoneDto {\n  @IsString()\n  name: string;\n\n  @IsInt()\n  percentage: number;\n\n  @IsString()\n  description: string;\n\n  @IsDateString()\n  targetDate: string; // ISO format string\n\n  @IsOptional()\n  @IsDateString()\n  achievedDate?: string;\n\n  @IsString()\n  projectId: string;\n}\n\nexport class UpdateMilestoneDto {\n  @IsOptional()\n  @IsString()\n  name?: string;\n\n  @IsOptional()\n  @IsInt()\n  percentage?: number;\n\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  @IsOptional()\n  @IsDateString()\n  targetDate?: string;\n\n  @IsOptional()\n  @IsDateString()\n  achievedDate?: string;\n\n  @IsOptional()\n  @IsString()\n  projectId?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProductDto.html":{"url":"classes/CreateProductDto.html","title":"class - CreateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/dto/products.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                basePrice\n                            \n                            \n                                    \n                                categoryId\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        basePrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNumber({}, {message: 'basePrice must be a valid number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/products.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        categoryId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/products.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/products.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/products.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsOptional, IsNumber } from 'class-validator';\nimport { PartialType } from '@nestjs/mapped-types';\n\nexport class CreateProductDto {\n  @IsString()\n  name: string;\n\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  @IsOptional()\n  @IsNumber({}, { message: 'basePrice must be a valid number' })\n  basePrice?: number;\n\n  @IsString()\n  categoryId: string;\n}\n\nexport class UpdateProductDto extends PartialType(CreateProductDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProjectWithAllocationsDto.html":{"url":"classes/CreateProjectWithAllocationsDto.html","title":"class - CreateProjectWithAllocationsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProjectWithAllocationsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/projects/dto/project.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                budget\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                clientName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                costAllocations\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                employeeIds\n                            \n                            \n                                    \n                                endDate\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                startDate\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        budget\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber({}, {message: 'Budget must be a valid number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/projects/dto/project.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        clientName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/projects/dto/project.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        costAllocations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CostAllocationDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@ArrayMinSize(1, {message: 'At least one cost allocation must be assigned'})@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/projects/dto/project.dto.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/projects/dto/project.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        employeeIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@ArrayMinSize(1, {message: 'At least one employee must be assigned'})@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/projects/dto/project.dto.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        endDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/projects/dto/project.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/projects/dto/project.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        startDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/projects/dto/project.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/projects/dto/project.dto.ts:50\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  IsOptional,\n  IsDateString,\n  IsNumber,\n  IsArray,\n  ArrayMinSize,\n  ValidateNested,\n} from 'class-validator';\n\nimport { Type } from 'class-transformer';\n\nclass CostAllocationDto {\n  @IsString()\n  categoryId: string;\n\n  @IsNumber({}, { message: 'allocatedAmount must be a valid number' })\n  allocatedAmount: number;\n\n  @IsOptional()\n  @IsString()\n  description?: string;\n}\n\nexport class CreateProjectWithAllocationsDto {\n  @IsString()\n  name: string;\n\n  @IsOptional()\n  @IsString()\n  clientName?: string;\n\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  @IsDateString()\n  startDate: string;\n\n  @IsDateString()\n  endDate: string;\n\n  @IsNumber({}, { message: 'Budget must be a valid number' })\n  budget: number;\n\n  @IsOptional()\n  @IsString()\n  status?: string;\n\n  @IsArray()\n  @ArrayMinSize(1, { message: 'At least one employee must be assigned' })\n  @IsString({ each: true })\n  employeeIds: string[];\n\n  @IsArray()\n  @ArrayMinSize(1, { message: 'At least one cost allocation must be assigned' })\n  @ValidateNested({ each: true })\n  @Type(() => CostAllocationDto)\n  costAllocations: CostAllocationDto[];\n}\n\nexport class UpdateProjectDto {\n  @IsOptional()\n  @IsString()\n  name?: string;\n\n  @IsOptional()\n  @IsString()\n  clientName?: string;\n\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  @IsOptional()\n  @IsDateString()\n  startDate?: string;\n\n  @IsOptional()\n  @IsDateString()\n  endDate?: string;\n\n  @IsOptional()\n  @IsNumber({}, { message: 'Budget must be a valid number' })\n  budget?: number;\n\n  @IsOptional()\n  @IsString()\n  status?: string;\n\n  @IsOptional()\n  @IsArray()\n  @IsString({ each: true })\n  employeeIds?: string[];\n\n  @IsOptional()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => CostAllocationDto)\n  costAllocations?: CostAllocationDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                address\n                            \n                            \n                                    \n                                    \n                                    \n                                city\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                departmentId\n                            \n                            \n                                    \n                                    \n                                dob\n                            \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                hireDate\n                            \n                            \n                                    \n                                    \n                                    \n                                jobTitle\n                            \n                            \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                phone\n                            \n                            \n                                    \n                                    \n                                    \n                                pincode\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                profileImage\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                role\n                            \n                            \n                                    \n                                    \n                                    \n                                salary\n                            \n                            \n                                    \n                                    \n                                    \n                                state\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '123 Street, Area', required: true})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Nashik', required: true})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        departmentId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({format: 'uuid', example: 'a65fa2c0-5c63-4d2f-a649-b9e3ad74f874'})@IsOptional()@IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        dob\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '2000-01-01', required: true})@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'rehmat.sayani@gmail.com', required: true})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Samarth', required: true})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        hireDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '2023-10-01', required: true})@IsNotEmpty()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        jobTitle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Software Developer', required: true})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Shinde', required: true})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'strongpassword123', required: true})@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '9898989898', required: true})@IsNotEmpty()@IsString()@IsPhoneNumber('IN')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        pincode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '422101', required: true})@IsNotEmpty()@IsPostalCode('IN')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        profileImage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'https://example.com/profile.jpg'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:96\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"USER\" | \"ADMIN\"\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: undefined, example: 'USER'})@IsOptional()@IsIn(['USER', 'ADMIN'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        salary\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 50000, required: true})@IsNotEmpty()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Maharashtra', required: true})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:64\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsNotEmpty,\n  IsEmail,\n  IsOptional,\n  IsIn,\n  IsString,\n  IsPhoneNumber,\n  IsDateString,\n  IsNumber,\n  IsUUID,\n  IsPostalCode,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @ApiProperty({ example: 'Samarth', required: true })\n  @IsNotEmpty()\n  @IsString()\n  firstName: string;\n\n  @ApiProperty({ example: 'Shinde', required: true })\n  @IsNotEmpty()\n  @IsString()\n  lastName: string;\n\n  @ApiProperty({ example: 'rehmat.sayani@gmail.com', required: true })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @ApiProperty({ example: '9898989898', required: true })\n  @IsNotEmpty()\n  @IsString()\n  @IsPhoneNumber('IN') // Country code\n  phone: string;\n\n  @ApiProperty({ example: '2000-01-01', required: true })\n  @IsDateString()\n  dob: string;\n\n  @ApiProperty({ example: 'Software Developer', required: true })\n  @IsNotEmpty()\n  @IsString()\n  jobTitle: string;\n\n  @ApiProperty({ example: 50000, required: true })\n  @IsNotEmpty()\n  @IsNumber()\n  salary: number;\n\n  @ApiProperty({ example: '2023-10-01', required: true })\n  @IsNotEmpty()\n  @IsDateString()\n  hireDate: string;\n\n  @ApiProperty({ example: '123 Street, Area', required: true })\n  @IsNotEmpty()\n  @IsString()\n  address: string;\n\n  @ApiProperty({ example: 'Maharashtra', required: true })\n  @IsNotEmpty()\n  @IsString()\n  state: string;\n\n  @ApiProperty({ example: 'Nashik', required: true })\n  @IsNotEmpty()\n  @IsString()\n  city: string;\n\n  @ApiProperty({ example: '422101', required: true })\n  @IsNotEmpty()\n  @IsPostalCode('IN')\n  pincode: string;\n\n  @ApiProperty({ example: 'strongpassword123', required: true })\n  @IsNotEmpty()\n  password: string;\n\n  @ApiPropertyOptional({ enum: ['USER', 'ADMIN'], example: 'USER' })\n  @IsOptional()\n  @IsIn(['USER', 'ADMIN'])\n  role?: 'USER' | 'ADMIN';\n\n  @ApiPropertyOptional({\n    format: 'uuid',\n    example: 'a65fa2c0-5c63-4d2f-a649-b9e3ad74f874',\n  })\n  @IsOptional()\n  @IsUUID()\n  departmentId?: string;\n\n  @ApiPropertyOptional({ example: 'https://example.com/profile.jpg' })\n  @IsOptional()\n  @IsString()\n  profileImage?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DashboardCountsDto.html":{"url":"classes/DashboardCountsDto.html","title":"class - DashboardCountsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DashboardCountsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/all-counts.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                activeEmployees\n                            \n                            \n                                    \n                                inactiveEmployees\n                            \n                            \n                                    \n                                taskStatusCounts\n                            \n                            \n                                    \n                                totalAnnualRevenue\n                            \n                            \n                                    \n                                totalDepartments\n                            \n                            \n                                    \n                                totalEmployees\n                            \n                            \n                                    \n                                totalProjects\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        activeEmployees\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 80})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/all-counts.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        inactiveEmployees\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 20})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/all-counts.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        taskStatusCounts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TaskStatusCountsDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: TaskStatusCountsDto})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/all-counts.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        totalAnnualRevenue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 500000})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/all-counts.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        totalDepartments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 4})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/all-counts.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        totalEmployees\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/all-counts.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        totalProjects\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 12})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/all-counts.dto.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nclass TaskStatusCountsDto {\n  @ApiProperty({ example: 10 })\n  PENDING: number;\n\n  @ApiProperty({ example: 5 })\n  IN_PROGRESS: number;\n\n  @ApiProperty({ example: 15 })\n  COMPLETED: number;\n}\n\nexport class DashboardCountsDto {\n  @ApiProperty({ example: 100 })\n  totalEmployees: number;\n\n  @ApiProperty({ example: 80 })\n  activeEmployees: number;\n\n  @ApiProperty({ example: 20 })\n  inactiveEmployees: number;\n\n  @ApiProperty({ type: TaskStatusCountsDto })\n  taskStatusCounts: TaskStatusCountsDto;\n\n  @ApiProperty({ example: 500000 })\n  totalAnnualRevenue: number;\n\n  @ApiProperty({ example: 12 })\n  totalProjects: number;\n\n  @ApiProperty({ example: 4 })\n  totalDepartments: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteUserResponseDto.html":{"url":"classes/DeleteUserResponseDto.html","title":"class - DeleteUserResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteUserResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/delete-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'User deleted successfully'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/delete-user.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class DeleteUserResponseDto {\n  @ApiProperty({ example: 'User deleted successfully' })\n  message: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/DepartmentsController.html":{"url":"controllers/DepartmentsController.html","title":"controller - DepartmentsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  DepartmentsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/departments/departments.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                api/departments\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(data: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/create')\n                \n            \n\n                    \n                        \n                            Defined in src/departments/departments.controller.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/departments/departments.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(departmentId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':departmentId')\n                \n            \n\n                    \n                        \n                            Defined in src/departments/departments.controller.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                departmentId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(departmentId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/delete/:departmentId')\n                \n            \n\n                    \n                        \n                            Defined in src/departments/departments.controller.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                departmentId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(departmentId: string, data: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/update/:departmentId')\n                \n            \n\n                    \n                        \n                            Defined in src/departments/departments.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                departmentId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Put,\n  UseGuards,\n} from '@nestjs/common';\nimport { DepartmentsService } from './departments.service';\n\n@Controller('api/departments')\nexport class DepartmentsController {\n  constructor(private readonly departmentsService: DepartmentsService) {}\n\n  @Get()\n  async findAll() {\n    return this.departmentsService.findAll();\n  }\n\n  @Get(':departmentId')\n  async findOne(@Param('departmentId') departmentId: string) {\n    return this.departmentsService.findOneDepartment(departmentId);\n  }\n\n  // @UseGuards(AuthGuard('jwt'))\n  @Post('/create')\n  async create(@Body() data: { name: string }) {\n    return this.departmentsService.createDepartment(data);\n  }\n\n  @Put('/update/:departmentId')\n  async update(\n    @Param('departmentId') departmentId: string,\n    @Body() data: { name: string },\n  ) {\n    return this.departmentsService.updateDepartment(departmentId, data);\n  }\n\n  @Delete('/delete/:departmentId')\n  async remove(@Param('departmentId') departmentId: string) {\n    return this.departmentsService.deleteDepartment(departmentId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DepartmentsModule.html":{"url":"modules/DepartmentsModule.html","title":"module - DepartmentsModule","body":"\n                   \n\n\n\n\n    Modules\n    DepartmentsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DepartmentsModule\n\n\n\ncluster_DepartmentsModule_providers\n\n\n\n\nDepartmentsService\n\nDepartmentsService\n\n\n\nDepartmentsModule\n\nDepartmentsModule\n\nDepartmentsModule -->\n\nDepartmentsService->DepartmentsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/departments/departments.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DepartmentsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            DepartmentsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { DepartmentsController } from './departments.controller';\nimport { DepartmentsService } from './departments.service';\n\n@Module({\n  controllers: [DepartmentsController],\n  providers: [DepartmentsService]\n})\nexport class DepartmentsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DepartmentsService.html":{"url":"injectables/DepartmentsService.html","title":"injectable - DepartmentsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DepartmentsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/departments/departments.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createDepartment\n                            \n                            \n                                    Async\n                                deleteDepartment\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOneDepartment\n                            \n                            \n                                    Async\n                                updateDepartment\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/departments/departments.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createDepartment\n                        \n                    \n                \n            \n            \n                \n                        \n                    createDepartment(data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/departments/departments.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteDepartment\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteDepartment(departmentId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/departments/departments.service.ts:76\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                departmentId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/departments/departments.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOneDepartment\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneDepartment(departmentId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/departments/departments.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                departmentId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateDepartment\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateDepartment(departmentId: string, data: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/departments/departments.service.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                departmentId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { PrismaService } from 'src/prisma/prisma.service';\n\n@Injectable()\nexport class DepartmentsService {\n  constructor(private prisma: PrismaService) {}\n\n  async findAll(): Promise {\n    const departments = await this.prisma.department.findMany({\n      where: { isDeleted: false },\n    });\n\n    return departments;\n  }\n\n  async findOneDepartment(departmentId: string): Promise {\n    const department = await this.prisma.department.findFirst({\n      where: { id: departmentId, isDeleted: false },\n    });\n\n    if (!department) {\n      throw new NotFoundException('Department does not exists');\n    }\n\n    return department;\n  }\n\n  async createDepartment(data: any): Promise {\n    const { name } = data;\n\n    const departmentExist = await this.prisma.department.findUnique({\n      where: { name },\n    });\n\n    if (departmentExist) {\n      throw new BadRequestException('Department with this name already exists');\n    }\n\n    const department = await this.prisma.department.create({ data: { name } });\n\n    return { message: 'Department created successfully', department };\n  }\n\n  async updateDepartment(\n    departmentId: string,\n    data: { name: string },\n  ): Promise {\n    const { name } = data;\n\n    const departmentExist = await this.prisma.department.findUnique({\n      where: { isDeleted: false, id: departmentId },\n    });\n\n    if (!name) {\n      throw new BadRequestException('Insert the department name to update');\n    }\n\n    if (!departmentExist) {\n      throw new BadRequestException(\n        'Department with this name does not exists',\n      );\n    }\n\n    const department = await this.prisma.department.update({\n      where: { id: departmentId, isDeleted: false },\n      data: { name },\n    });\n\n    return { message: 'Department created successfully', department };\n  }\n\n  async deleteDepartment(departmentId: string): Promise {\n    const departmentExist = await this.prisma.department.findFirst({\n      where: { id: departmentId, isDeleted: false },\n    });\n\n    if (!departmentExist) {\n      throw new BadRequestException(\n        'Department with this name does not exists',\n      );\n    }\n\n    await this.prisma.department.update({\n      where: { id: departmentId },\n      data: { isDeleted: true, deletedAt: new Date() },\n    });\n\n    return { message: 'Department deleted successfully' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ExpenseCategoryController.html":{"url":"controllers/ExpenseCategoryController.html","title":"controller - ExpenseCategoryController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ExpenseCategoryController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/expense-category/expense-category.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                api/expense-cat\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(data: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/create')\n                \n            \n\n                    \n                        \n                            Defined in src/expense-category/expense-category.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/expense-category/expense-category.controller.ts:17\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(expenseId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':expenseId')\n                \n            \n\n                    \n                        \n                            Defined in src/expense-category/expense-category.controller.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                expenseId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(expenseId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/delete/:expenseId')\n                \n            \n\n                    \n                        \n                            Defined in src/expense-category/expense-category.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                expenseId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(expenseId: string, data: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/update/:expenseId')\n                \n            \n\n                    \n                        \n                            Defined in src/expense-category/expense-category.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                expenseId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  Put,\n} from '@nestjs/common';\nimport { ExpenseCategoryService } from './expense-category.service';\n\n@Controller('api/expense-cat')\nexport class ExpenseCategoryController {\n  constructor(private expenseCategoryService: ExpenseCategoryService) {}\n\n  @Get()\n  async findAll() {\n    return this.expenseCategoryService.findAllExpenseCat();\n  }\n\n  @Get(':expenseId')\n  async findOne(@Param('expenseId') expenseId: string) {\n    return this.expenseCategoryService.findOneExpenseCat(expenseId);\n  }\n\n  @Post('/create')\n  async create(@Body() data: { name: string }) {\n    return this.expenseCategoryService.createExpenseCat(data);\n  }\n\n  @Put('/update/:expenseId')\n  async update(\n    @Param('expenseId') expenseId: string,\n    @Body() data: { name: string },\n  ) {\n    return this.expenseCategoryService.updateeExpenseCat(expenseId, data);\n  }\n\n  @Delete('/delete/:expenseId')\n  async remove(@Param('expenseId') expenseId: string) {\n    return this.expenseCategoryService.deleteExpenseCat(expenseId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ExpenseCategoryModule.html":{"url":"modules/ExpenseCategoryModule.html","title":"module - ExpenseCategoryModule","body":"\n                   \n\n\n\n\n    Modules\n    ExpenseCategoryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ExpenseCategoryModule\n\n\n\ncluster_ExpenseCategoryModule_providers\n\n\n\n\nExpenseCategoryService\n\nExpenseCategoryService\n\n\n\nExpenseCategoryModule\n\nExpenseCategoryModule\n\nExpenseCategoryModule -->\n\nExpenseCategoryService->ExpenseCategoryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/expense-category/expense-category.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ExpenseCategoryService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ExpenseCategoryController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ExpenseCategoryService } from './expense-category.service';\nimport { ExpenseCategoryController } from './expense-category.controller';\n\n@Module({\n  providers: [ExpenseCategoryService],\n  controllers: [ExpenseCategoryController]\n})\nexport class ExpenseCategoryModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExpenseCategoryService.html":{"url":"injectables/ExpenseCategoryService.html","title":"injectable - ExpenseCategoryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExpenseCategoryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/expense-category/expense-category.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createExpenseCat\n                            \n                            \n                                    Async\n                                deleteExpenseCat\n                            \n                            \n                                    Async\n                                findAllExpenseCat\n                            \n                            \n                                    Async\n                                findOneExpenseCat\n                            \n                            \n                                    Async\n                                updateeExpenseCat\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/expense-category/expense-category.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createExpenseCat\n                        \n                    \n                \n            \n            \n                \n                        \n                    createExpenseCat(data: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/expense-category/expense-category.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteExpenseCat\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteExpenseCat(expenseId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/expense-category/expense-category.service.ts:81\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                expenseId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllExpenseCat\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllExpenseCat()\n                \n            \n\n\n                    \n                        \n                            Defined in src/expense-category/expense-category.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOneExpenseCat\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneExpenseCat(expenseId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/expense-category/expense-category.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                expenseId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateeExpenseCat\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateeExpenseCat(expenseId: string, data: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/expense-category/expense-category.service.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                expenseId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { ExpenseCategory } from '@prisma/client';\nimport { PrismaService } from 'src/prisma/prisma.service';\n\n@Injectable()\nexport class ExpenseCategoryService {\n  constructor(private prisma: PrismaService) {}\n\n  async findAllExpenseCat(): Promise {\n    const expenseCategories = await this.prisma.expenseCategory.findMany({\n      where: { isDeleted: false },\n    });\n\n    return expenseCategories;\n  }\n\n  async findOneExpenseCat(expenseId: string): Promise {\n    const expenseCat = await this.prisma.expenseCategory.findFirst({\n      where: { id: expenseId, isDeleted: false },\n    });\n\n    if (!expenseCat) {\n      throw new BadRequestException('Expense category does not exist');\n    }\n\n    return expenseCat;\n  }\n\n  async createExpenseCat(data: { name: string }): Promise {\n    const { name } = data;\n\n    const expenseCategoryExist = await this.prisma.expenseCategory.findFirst({\n      where: { isDeleted: false, name },\n    });\n\n    if (expenseCategoryExist) {\n      throw new BadRequestException(\n        'Expense Category with this name already exists',\n      );\n    }\n\n    const expenseCategory = await this.prisma.expenseCategory.create({\n      data: { name },\n    });\n\n    return expenseCategory;\n  }\n\n  async updateeExpenseCat(\n    expenseId: string,\n    data: { name: string },\n  ): Promise {\n    const { name } = data;\n\n    const expenseCategoryExist = await this.prisma.expenseCategory.findFirst({\n      where: { isDeleted: false, id: expenseId },\n    });\n\n    if (!name) {\n      throw new BadRequestException(\n        'Insert the Expense Category name to update',\n      );\n    }\n\n    if (!expenseCategoryExist) {\n      throw new NotFoundException('Expense category does not exists');\n    }\n\n    const expenseCat = await this.prisma.expenseCategory.update({\n      where: { id: expenseId },\n      data: { name },\n    });\n\n    return expenseCat;\n  }\n\n  async deleteExpenseCat(expenseId: string) {\n    const expenseCategoryExist = await this.prisma.expenseCategory.findFirst({\n      where: { isDeleted: false, id: expenseId },\n    });\n\n    if (!expenseCategoryExist) {\n      throw new NotFoundException('Expense category does not exists');\n    }\n\n    await this.prisma.expenseCategory.update({\n      where: { isDeleted: false, id: expenseId },\n      data: { isDeleted: true, deletedAt: new Date() },\n    });\n\n    return { message: 'Expense Category deleted successfully' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ExpensesController.html":{"url":"controllers/ExpensesController.html","title":"controller - ExpensesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ExpensesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/expenses/expenses.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                api/expenses\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                allEmployeeExpenses\n                            \n                            \n                                    \n                                    Async\n                                chartData\n                            \n                            \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    Async\n                                pieData\n                            \n                            \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        allEmployeeExpenses\n                        \n                    \n                \n            \n            \n                \n                        \n                    allEmployeeExpenses(employeeId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/employee/:employeeId')\n                \n            \n\n                    \n                        \n                            Defined in src/expenses/expenses.controller.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                employeeId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        chartData\n                        \n                    \n                \n            \n            \n                \n                        \n                    chartData()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/chart-data')\n                \n            \n\n                    \n                        \n                            Defined in src/expenses/expenses.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(data: CreateExpenseDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/create')\n                \n            \n\n                    \n                        \n                            Defined in src/expenses/expenses.controller.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            CreateExpenseDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/expenses/expenses.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(expenseId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':expenseId')\n                \n            \n\n                    \n                        \n                            Defined in src/expenses/expenses.controller.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                expenseId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        pieData\n                        \n                    \n                \n            \n            \n                \n                        \n                    pieData()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/pie-data')\n                \n            \n\n                    \n                        \n                            Defined in src/expenses/expenses.controller.ts:24\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(expenseId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/delete/:expenseId')\n                \n            \n\n                    \n                        \n                            Defined in src/expenses/expenses.controller.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                expenseId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(expenseId: string, data: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/update/:expenseId')\n                \n            \n\n                    \n                        \n                            Defined in src/expenses/expenses.controller.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                expenseId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Put,\n} from '@nestjs/common';\nimport { ExpensesService } from './expenses.service';\nimport { CreateExpenseDto, UpdateExpenseDto } from './dto/expense.dto';\n\n@Controller('api/expenses')\nexport class ExpensesController {\n  constructor(private expensesService: ExpensesService) {}\n\n  @Get('/chart-data')\n  async chartData() {\n    return this.expensesService.chartDataExpenses();\n  }\n\n  @Get('/pie-data')\n  async pieData() {\n    return this.expensesService.pieChartData();\n  }\n\n  @Get()\n  async findAll() {\n    return this.expensesService.findAllExpenses();\n  }\n\n  @Get(':expenseId')\n  async findOne(@Param('expenseId') expenseId: string) {\n    return this.expensesService.findOneExpense(expenseId);\n  }\n\n  @Get('/employee/:employeeId')\n  async allEmployeeExpenses(@Param('employeeId') employeeId: string) {\n    return this.expensesService.allEmployeeExpenses(employeeId);\n  }\n\n  @Post('/create')\n  async create(@Body() data: CreateExpenseDto) {\n    return this.expensesService.createExpense(data);\n  }\n\n  @Put('/update/:expenseId')\n  async update(@Param('expenseId') expenseId: string, @Body() data: any) {\n    return this.expensesService.updateExpense(expenseId, data);\n  }\n\n  @Delete('/delete/:expenseId')\n  async remove(@Param('expenseId') expenseId: string) {\n    return this.expensesService.deleteExpense(expenseId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ExpensesModule.html":{"url":"modules/ExpensesModule.html","title":"module - ExpensesModule","body":"\n                   \n\n\n\n\n    Modules\n    ExpensesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ExpensesModule\n\n\n\ncluster_ExpensesModule_providers\n\n\n\n\nExpensesService\n\nExpensesService\n\n\n\nExpensesModule\n\nExpensesModule\n\nExpensesModule -->\n\nExpensesService->ExpensesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/expenses/expenses.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ExpensesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ExpensesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ExpensesController } from './expenses.controller';\nimport { ExpensesService } from './expenses.service';\n\n@Module({\n  controllers: [ExpensesController],\n  providers: [ExpensesService]\n})\nexport class ExpensesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExpensesService.html":{"url":"injectables/ExpensesService.html","title":"injectable - ExpensesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExpensesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/expenses/expenses.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                allEmployeeExpenses\n                            \n                            \n                                    Async\n                                chartDataExpenses\n                            \n                            \n                                    Async\n                                createExpense\n                            \n                            \n                                    Async\n                                deleteExpense\n                            \n                            \n                                    Async\n                                findAllExpenses\n                            \n                            \n                                    Async\n                                findOneExpense\n                            \n                            \n                                    Async\n                                pieChartData\n                            \n                            \n                                    Async\n                                updateExpense\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/expenses/expenses.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        allEmployeeExpenses\n                        \n                    \n                \n            \n            \n                \n                        \n                    allEmployeeExpenses(employeeId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/expenses/expenses.service.ts:149\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                employeeId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        chartDataExpenses\n                        \n                    \n                \n            \n            \n                \n                        \n                    chartDataExpenses()\n                \n            \n\n\n                    \n                        \n                            Defined in src/expenses/expenses.service.ts:173\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createExpense\n                        \n                    \n                \n            \n            \n                \n                        \n                    createExpense(data: CreateExpenseDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/expenses/expenses.service.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            CreateExpenseDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteExpense\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteExpense(expenseId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/expenses/expenses.service.ts:132\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                expenseId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllExpenses\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllExpenses()\n                \n            \n\n\n                    \n                        \n                            Defined in src/expenses/expenses.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOneExpense\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneExpense(expenseId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/expenses/expenses.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                expenseId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        pieChartData\n                        \n                    \n                \n            \n            \n                \n                        \n                    pieChartData()\n                \n            \n\n\n                    \n                        \n                            Defined in src/expenses/expenses.service.ts:216\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateExpense\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateExpense(expenseId: string, data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/expenses/expenses.service.ts:99\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                expenseId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { CreateExpenseDto, UpdateExpenseDto } from './dto/expense.dto';\nimport { format, startOfDay } from 'date-fns';\n\n@Injectable()\nexport class ExpensesService {\n  constructor(private prisma: PrismaService) {}\n\n  async findAllExpenses() {\n    const expenses = await this.prisma.expense.findMany({\n      where: { isDeleted: false },\n      include: {\n        department: { select: { name: true } },\n        employee: {\n          select: {\n            id: true,\n            firstName: true,\n            lastName: true,\n            empId: true,\n            email: true,\n          },\n        },\n        expenseCategory: { select: { name: true } },\n        product: {\n          select: {\n            id: true,\n            name: true,\n          },\n        },\n      },\n    });\n    return expenses;\n  }\n\n  async findOneExpense(expenseId: string) {\n    const expense = await this.prisma.expense.findFirst({\n      where: { isDeleted: false, id: expenseId },\n      include: {\n        employee: {\n          select: {\n            firstName: true,\n            lastName: true,\n          },\n        },\n        product: {\n          select: {\n            name: true,\n          },\n        },\n      },\n    });\n\n    if (!expense) {\n      throw new NotFoundException('Expense does not exists');\n    }\n\n    return expense;\n  }\n\n  async createExpense(data: CreateExpenseDto) {\n    const {\n      departmentId,\n      employeeId,\n      expenseCatId,\n      productId,\n      amount,\n      quantity,\n      total,\n      date,\n      notes,\n      productName,\n    } = data;\n\n    const finalExpenseCatId = expenseCatId === 'other' ? null : expenseCatId;\n\n    const expense = await this.prisma.expense.create({\n      data: {\n        departmentId,\n        employeeId,\n        expenseCatId: finalExpenseCatId,\n        productId,\n        amount,\n        quantity,\n        total,\n        date,\n        notes,\n        productName,\n      },\n    });\n\n    return expense;\n  }\n\n  async updateExpense(expenseId: string, data: any) {\n    const request = data;\n\n    const expense = await this.prisma.expense.findUnique({\n      where: { isDeleted: false, id: expenseId },\n    });\n\n    if (!expense) {\n      throw new NotFoundException('Expense does not exists');\n    }\n\n    const updatedExpense = await this.prisma.expense.update({\n      where: { id: expenseId },\n      data: {\n        departmentId: request.departmentId || expense.departmentId,\n        employeeId: request.employeeId || expense.employeeId,\n        expenseCatId: request.expenseCatId || expense.expenseCatId,\n        productId: request.productId || expense.productId,\n        amount: request.amount || expense.amount,\n        quantity: request.quantity || expense.quantity,\n        total: request.total || expense.total,\n        date: new Date(request.date) || expense.date,\n        notes: request.notes || expense.notes,\n      },\n    });\n\n    if (!updatedExpense) {\n      throw new BadRequestException('Expense is not updated');\n    }\n\n    return updatedExpense;\n  }\n\n  async deleteExpense(expenseId: string) {\n    const expense = await this.prisma.expense.findFirst({\n      where: { isDeleted: false, id: expenseId },\n    });\n\n    if (!expense) {\n      throw new NotFoundException('Expense does not exists');\n    }\n\n    await this.prisma.expense.update({\n      where: { isDeleted: false, id: expenseId },\n      data: { isDeleted: true, deletedAt: new Date() },\n    });\n\n    return { message: 'Expense deleted successfully' };\n  }\n\n  async allEmployeeExpenses(employeeId: string) {\n    const expenses = await this.prisma.expense.findMany({\n      where: { isDeleted: false, employeeId },\n      include: {\n        department: { select: { name: true } },\n        employee: {\n          select: {\n            id: true,\n            firstName: true,\n            lastName: true,\n          },\n        },\n        expenseCategory: { select: { name: true } },\n        product: {\n          select: {\n            id: true,\n            name: true,\n          },\n        },\n      },\n    });\n    return expenses;\n  }\n\n  async chartDataExpenses() {\n    const expenses = await this.prisma.expense.findMany({\n      where: { isDeleted: false, productName: null },\n      select: {\n        date: true,\n        total: true,\n        product: {\n          select: {\n            category: {\n              select: {\n                name: true,\n              },\n            },\n          },\n        },\n      },\n    });\n\n    const groupedData: Record> = {};\n\n    for (const expense of expenses) {\n      const dateKey = format(startOfDay(expense.date), 'yyyy-MM-dd');\n      const category = expense.product?.category?.name ?? 'Uncategorized';\n\n      if (!groupedData[dateKey]) {\n        groupedData[dateKey] = {};\n      }\n\n      if (!groupedData[dateKey][category]) {\n        groupedData[dateKey][category] = 0;\n      }\n\n      groupedData[dateKey][category] += parseFloat(expense.total as any); // if total is Decimal\n    }\n\n    const chartData = Object.entries(groupedData).map(([date, categories]) => ({\n      date,\n      ...categories,\n    }));\n\n    return chartData;\n  }\n\n  async pieChartData() {\n    const expenses = await this.prisma.expense.findMany({\n      where: {\n        isDeleted: false,\n        department: {\n          isDeleted: false,\n        },\n      },\n      select: {\n        total: true,\n        department: {\n          select: {\n            name: true,\n          },\n        },\n      },\n    });\n\n    const totalsByDepartment = {};\n\n    for (const expense of expenses) {\n      const deptName = expense.department.name;\n\n      if (!totalsByDepartment[deptName]) {\n        totalsByDepartment[deptName] = 0;\n      }\n      // @ts-expect-error\n      totalsByDepartment[deptName] += parseFloat(expense.total);\n    }\n\n    const chartData = Object.entries(totalsByDepartment).map(\n      ([department, total]) => ({\n        department,\n        total,\n      }),\n    );\n\n    return chartData;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            AuthGuard('jwt')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { Request } from 'express';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n    constructor(config: ConfigService) {\n        super({\n            jwtFromRequest: ExtractJwt.fromExtractors([\n                (req: Request) => req?.cookies?.access_token,\n            ]),\n            secretOrKey: config.get('JWT_SECRET'),\n        });\n    }\n\n    async validate(payload: { userId: string; email: string; role: string }) {\n        return {\n            userId: payload.userId,\n            email: payload.email,\n            role: payload.role,\n        };\n    }\n\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsOptional, IsIn } from 'class-validator';\n\nexport class RegisterDto {\n    @IsNotEmpty()\n    name: string;\n\n    @IsEmail()\n    email: string;\n\n    @IsNotEmpty()\n    password: string;\n\n    @IsOptional()\n    @IsIn(['USER', 'ADMIN'])\n    role?: 'USER' | 'ADMIN';\n}\n\nexport class LoginDto {\n    @IsEmail()\n    email: string;\n\n    @IsNotEmpty()\n    password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MilestonesController.html":{"url":"controllers/MilestonesController.html","title":"controller - MilestonesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MilestonesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/milestones/milestones.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                api/milestones\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                findByMilestoneId\n                            \n                            \n                                    \n                                    Async\n                                findByProjectId\n                            \n                            \n                                    \n                                    Async\n                                radialChart\n                            \n                            \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(data: CreateMilestoneDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/milestones/milestones.controller.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            CreateMilestoneDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/milestones/milestones.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findByMilestoneId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByMilestoneId(milestoneId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/milestone-by-milestoneId/:milestoneId')\n                \n            \n\n                    \n                        \n                            Defined in src/milestones/milestones.controller.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                milestoneId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findByProjectId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByProjectId(projectId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':projectId')\n                \n            \n\n                    \n                        \n                            Defined in src/milestones/milestones.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                projectId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        radialChart\n                        \n                    \n                \n            \n            \n                \n                        \n                    radialChart()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/charts/radial-chart')\n                \n            \n\n                    \n                        \n                            Defined in src/milestones/milestones.controller.ts:53\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(milestoneId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':milestoneId')\n                \n            \n\n                    \n                        \n                            Defined in src/milestones/milestones.controller.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                milestoneId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(milestoneId: string, data: UpdateMilestoneDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/update/:milestoneId')\n                \n            \n\n                    \n                        \n                            Defined in src/milestones/milestones.controller.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                milestoneId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            UpdateMilestoneDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Put,\n} from '@nestjs/common';\nimport { MilestonesService } from './milestones.service';\nimport { CreateMilestoneDto, UpdateMilestoneDto } from './dto/milestone.dto';\n\n@Controller('api/milestones')\nexport class MilestonesController {\n  constructor(private milestonesService: MilestonesService) {}\n\n  @Get()\n  async findAll() {\n    return this.milestonesService.findAllMilestones();\n  }\n\n  @Get('/milestone-by-milestoneId/:milestoneId')\n  async findByMilestoneId(@Param('milestoneId') milestoneId: string) {\n    return this.milestonesService.findOneByMilestoneId(milestoneId);\n  }\n\n  @Get(':projectId')\n  async findByProjectId(@Param('projectId') projectId: string) {\n    return this.milestonesService.findAllByProjectId(projectId);\n  }\n\n  @Post()\n  async create(@Body() data: CreateMilestoneDto) {\n    return this.milestonesService.createMilestone(data);\n  }\n\n  @Put('/update/:milestoneId')\n  async update(\n    @Param('milestoneId') milestoneId: string,\n    @Body()\n    data: UpdateMilestoneDto,\n  ) {\n    return this.milestonesService.updateMilestone(milestoneId, data);\n  }\n\n  @Delete(':milestoneId')\n  async remove(@Param('milestoneId') milestoneId: string) {\n    return this.milestonesService.deleteMilestone(milestoneId);\n  }\n\n  @Get('/charts/radial-chart')\n  async radialChart() {\n    return this.milestonesService.radialChartMilestones();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MilestonesModule.html":{"url":"modules/MilestonesModule.html","title":"module - MilestonesModule","body":"\n                   \n\n\n\n\n    Modules\n    MilestonesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MilestonesModule\n\n\n\ncluster_MilestonesModule_providers\n\n\n\n\nMilestonesService\n\nMilestonesService\n\n\n\nMilestonesModule\n\nMilestonesModule\n\nMilestonesModule -->\n\nMilestonesService->MilestonesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/milestones/milestones.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MilestonesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MilestonesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MilestonesService } from './milestones.service';\nimport { MilestonesController } from './milestones.controller';\n\n@Module({\n  providers: [MilestonesService],\n  controllers: [MilestonesController]\n})\nexport class MilestonesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MilestonesService.html":{"url":"injectables/MilestonesService.html","title":"injectable - MilestonesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MilestonesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/milestones/milestones.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createMilestone\n                            \n                            \n                                    Async\n                                deleteMilestone\n                            \n                            \n                                    Async\n                                findAllByProjectId\n                            \n                            \n                                    Async\n                                findAllMilestones\n                            \n                            \n                                    Async\n                                findOneByMilestoneId\n                            \n                            \n                                    Async\n                                radialChartMilestones\n                            \n                            \n                                    Async\n                                updateMilestone\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/milestones/milestones.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createMilestone\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMilestone(data: CreateMilestoneDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/milestones/milestones.service.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            CreateMilestoneDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteMilestone\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteMilestone(milestoneId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/milestones/milestones.service.ts:162\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                milestoneId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllByProjectId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllByProjectId(projectId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/milestones/milestones.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                projectId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllMilestones\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllMilestones()\n                \n            \n\n\n                    \n                        \n                            Defined in src/milestones/milestones.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOneByMilestoneId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByMilestoneId(milestoneId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/milestones/milestones.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                milestoneId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        radialChartMilestones\n                        \n                    \n                \n            \n            \n                \n                        \n                    radialChartMilestones()\n                \n            \n\n\n                    \n                        \n                            Defined in src/milestones/milestones.service.ts:179\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateMilestone\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateMilestone(milestoneId: string, data: UpdateMilestoneDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/milestones/milestones.service.ts:111\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                milestoneId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            UpdateMilestoneDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { Milestone } from '@prisma/client';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { CreateMilestoneDto, UpdateMilestoneDto } from './dto/milestone.dto';\n\n@Injectable()\nexport class MilestonesService {\n  constructor(private prisma: PrismaService) {}\n\n  async findAllMilestones(): Promise {\n    const milestones = await this.prisma.milestone.findMany({\n      where: { isDeleted: false },\n      include: {\n        project: {\n          select: { id: true, name: true },\n        },\n      },\n    });\n\n    return milestones;\n  }\n\n  async findOneByMilestoneId(milestoneId: string): Promise {\n    const milestone = await this.prisma.milestone.findFirst({\n      where: { id: milestoneId, isDeleted: false },\n      include: { project: true },\n    });\n\n    if (!milestone) {\n      throw new NotFoundException('Milestone does not exist');\n    }\n\n    return milestone;\n  }\n\n  async findAllByProjectId(projectId: string): Promise {\n    const project = await this.prisma.project.findFirst({\n      where: { id: projectId, isDeleted: false },\n    });\n\n    if (!project) {\n      throw new NotFoundException('Project does not exist');\n    }\n\n    const milestones = await this.prisma.milestone.findMany({\n      where: { projectId, isDeleted: false },\n      include: { project: { select: { name: true } } },\n    });\n\n    if (milestones.length === 0) {\n      throw new NotFoundException('No milestones found for this project');\n    }\n\n    return milestones;\n  }\n\n  async createMilestone(data: CreateMilestoneDto): Promise {\n    const {\n      projectId,\n      name,\n      percentage,\n      description,\n      targetDate,\n      achievedDate,\n    } = data;\n\n    const milestoneExist = await this.prisma.milestone.findFirst({\n      where: { name, projectId, isDeleted: false },\n    });\n\n    if (milestoneExist) {\n      throw new BadRequestException(\n        'Milestone with this name already exists in the project',\n      );\n    }\n\n    // Check total percentage constraint\n    const existingMilestones = await this.prisma.milestone.findMany({\n      where: { projectId, isDeleted: false },\n    });\n\n    const totalPercentage = existingMilestones.reduce(\n      (acc, m) => acc + m.percentage,\n      0,\n    );\n\n    if (totalPercentage + percentage > 100) {\n      throw new BadRequestException(\n        `Cannot create milestone. Total milestone percentage for this project will exceed 100%. Currently used: ${totalPercentage}%.`,\n      );\n    }\n\n    const milestone = await this.prisma.milestone.create({\n      data: {\n        projectId,\n        name,\n        percentage,\n        description,\n        targetDate,\n        achievedDate,\n      },\n    });\n\n    return milestone;\n  }\n\n  async updateMilestone(\n    milestoneId: string,\n    data: UpdateMilestoneDto,\n  ): Promise {\n    const request = data;\n\n    const milestone = await this.prisma.milestone.findFirst({\n      where: { id: milestoneId, isDeleted: false },\n    });\n\n    if (!milestone) {\n      throw new NotFoundException('Milestone does not exist');\n    }\n\n    const newPercentage = request.percentage ?? milestone.percentage;\n\n    // Get other milestones for this project excluding current\n    const otherMilestones = await this.prisma.milestone.findMany({\n      where: {\n        projectId: milestone.projectId,\n        isDeleted: false,\n        NOT: { id: milestoneId },\n      },\n    });\n\n    const totalOtherPercentage = otherMilestones.reduce(\n      (acc, m) => acc + m.percentage,\n      0,\n    );\n\n    if (totalOtherPercentage + newPercentage > 100) {\n      throw new BadRequestException(\n        `Cannot update milestone. Total percentage will exceed 100%. Used by other milestones: ${totalOtherPercentage}%.`,\n      );\n    }\n\n    const updatedMilestone = await this.prisma.milestone.update({\n      where: { id: milestoneId },\n      data: {\n        projectId: request.projectId || milestone.projectId,\n        name: request.name || milestone.name,\n        percentage: newPercentage,\n        description: request.description || milestone.description,\n        targetDate: request.targetDate || milestone.targetDate,\n        achievedDate: request.achievedDate || milestone.achievedDate,\n      },\n    });\n\n    return updatedMilestone;\n  }\n\n  async deleteMilestone(milestoneId: string) {\n    const milestone = await this.prisma.milestone.findFirst({\n      where: { id: milestoneId, isDeleted: false },\n    });\n\n    if (!milestone) {\n      throw new NotFoundException('Milestone does not exist');\n    }\n\n    await this.prisma.milestone.update({\n      where: { id: milestoneId },\n      data: { isDeleted: true },\n    });\n\n    return { message: 'Milestone deleted successfully' };\n  }\n\n  async radialChartMilestones() {\n    // Get all projects that are not deleted\n    const projects = await this.prisma.project.findMany({\n      where: { isDeleted: false },\n      select: {\n        id: true,\n        name: true,\n        milestones: {\n          where: { isDeleted: false },\n          select: {\n            percentage: true,\n            achievedDate: true,\n          },\n        },\n      },\n    });\n\n    // Map over projects to calculate achieved and remaining percentages\n    const result = projects.map((project) => {\n      const achievedPercentage = project.milestones\n        .filter((m) => m.achievedDate !== null)\n        .reduce((sum, m) => sum + m.percentage, 0);\n\n      return {\n        projectId: project.id,\n        projectName: project.name,\n        achievedPercentage,\n        remainingPercentage: 100 - achievedPercentage,\n      };\n    });\n\n    return result;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_PrismaModule_exports\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/prisma/prisma.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\n\n@Global()\n@Module({\n  providers: [PrismaService],\n  exports: [PrismaService],\n})\nexport class PrismaModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PrismaClient\n            \n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/prisma/prisma.service.ts:5\n                            \n                        \n\n            \n        \n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient {\n    constructor() {\n        super();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProductsController.html":{"url":"controllers/ProductsController.html","title":"controller - ProductsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProductsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/products.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                api/products\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(data: CreateProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/create')\n                \n            \n\n                    \n                        \n                            Defined in src/products/products.controller.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            CreateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/products/products.controller.ts:18\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(productId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':productId')\n                \n            \n\n                    \n                        \n                            Defined in src/products/products.controller.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                productId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(productId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/delete/:productId')\n                \n            \n\n                    \n                        \n                            Defined in src/products/products.controller.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                productId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(productId: string, data: UpdateProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/update/:productId')\n                \n            \n\n                    \n                        \n                            Defined in src/products/products.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                productId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            UpdateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  Put,\n} from '@nestjs/common';\nimport { ProductsService } from './products.service';\nimport { CreateProductDto, UpdateProductDto } from './dto/products.dto';\n\n@Controller('api/products')\nexport class ProductsController {\n  constructor(private productsService: ProductsService) {}\n\n  @Get()\n  async findAll() {\n    return this.productsService.findAllProducts();\n  }\n\n  @Get(':productId')\n  async findOne(@Param('productId') productId: string) {\n    return this.productsService.findOneProduct(productId);\n  }\n\n  @Post('/create')\n  async create(@Body() data: CreateProductDto) {\n    return this.productsService.createProduct(data);\n  }\n\n  @Put('/update/:productId')\n  async update(\n    @Param('productId') productId: string,\n    @Body() data: UpdateProductDto,\n  ) {\n    return this.productsService.updateProduct(productId, data);\n  }\n\n  @Delete('/delete/:productId')\n  async remove(@Param('productId') productId: string) {\n    return this.productsService.deleteProduct(productId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProductsModule.html":{"url":"modules/ProductsModule.html","title":"module - ProductsModule","body":"\n                   \n\n\n\n\n    Modules\n    ProductsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ProductsModule\n\n\n\ncluster_ProductsModule_providers\n\n\n\n\nProductsService\n\nProductsService\n\n\n\nProductsModule\n\nProductsModule\n\nProductsModule -->\n\nProductsService->ProductsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/products/products.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProductsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProductsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ProductsService } from './products.service';\nimport { ProductsController } from './products.controller';\n\n@Module({\n  providers: [ProductsService],\n  controllers: [ProductsController]\n})\nexport class ProductsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProductsService.html":{"url":"injectables/ProductsService.html","title":"injectable - ProductsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProductsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/products.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createProduct\n                            \n                            \n                                    Async\n                                deleteProduct\n                            \n                            \n                                    Async\n                                findAllProducts\n                            \n                            \n                                    Async\n                                findOneProduct\n                            \n                            \n                                    Async\n                                updateProduct\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/products/products.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createProduct\n                        \n                    \n                \n            \n            \n                \n                        \n                    createProduct(data: CreateProductDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/products.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            CreateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteProduct\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteProduct(productId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/products.service.ts:92\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                productId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllProducts\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllProducts()\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/products.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOneProduct\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneProduct(productId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/products.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                productId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateProduct\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProduct(productId: string, data: UpdateProductDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/products.service.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                productId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            UpdateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { Product } from '@prisma/client';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { CreateProductDto, UpdateProductDto } from './dto/products.dto';\n\n@Injectable()\nexport class ProductsService {\n  constructor(private prisma: PrismaService) {}\n\n  async findAllProducts(): Promise {\n    const products = await this.prisma.product.findMany({\n      where: { isDeleted: false },\n      include: {\n        category: {\n          select: { name: true },\n        },\n      },\n    });\n\n    const formattedProducts = products.map((product) => ({\n      ...product,\n      categoryName: product?.category.name || null,\n    }));\n\n    return { products: formattedProducts };\n  }\n\n  async findOneProduct(productId: string): Promise {\n    const product = await this.prisma.product.findFirst({\n      where: { id: productId, isDeleted: false },\n    });\n\n    if (!product) {\n      throw new NotFoundException('Product does not exists');\n    }\n\n    return product;\n  }\n\n  async createProduct(data: CreateProductDto) {\n    console.log(data);\n    const { name, description, categoryId } = data;\n\n    const productExist = await this.prisma.product.findFirst({\n      where: { isDeleted: false, name },\n    });\n\n    if (productExist) {\n      throw new BadRequestException('Product with this name already exists');\n    }\n\n    const product = await this.prisma.product.create({\n      data: { name, description, categoryId },\n    });\n\n    return product;\n  }\n\n  async updateProduct(\n    productId: string,\n    data: UpdateProductDto,\n  ): Promise {\n    const { name, description, basePrice, categoryId } = data;\n\n    const product = await this.prisma.product.findFirst({\n      where: { isDeleted: false, id: productId },\n    });\n\n    if (!product) {\n      throw new NotFoundException('Product does not exists');\n    }\n\n    const updatedProduct = await this.prisma.product.update({\n      where: { id: productId },\n      data: {\n        name: name ?? product.name,\n        description: description ?? product.description,\n        basePrice: basePrice ?? product.basePrice,\n        categoryId: categoryId ?? product.categoryId,\n      },\n    });\n\n    return updatedProduct;\n  }\n\n  async deleteProduct(productId: string) {\n    const productExist = await this.prisma.product.findFirst({\n      where: { isDeleted: false, id: productId },\n    });\n\n    if (!productExist) {\n      throw new NotFoundException('Product does not exists');\n    }\n\n    await this.prisma.product.update({\n      where: { isDeleted: false, id: productId },\n      data: { isDeleted: true, deletedAt: new Date() },\n    });\n\n    return { message: 'Product deleted successfully' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProjectsController.html":{"url":"controllers/ProjectsController.html","title":"controller - ProjectsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProjectsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/projects/projects.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                api/projects\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    Async\n                                status\n                            \n                            \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(data: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/create')\n                \n            \n\n                    \n                        \n                            Defined in src/projects/projects.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/projects/projects.controller.ts:17\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(projectId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':projectId')\n                \n            \n\n                    \n                        \n                            Defined in src/projects/projects.controller.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                projectId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(projectId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/delete/:projectId')\n                \n            \n\n                    \n                        \n                            Defined in src/projects/projects.controller.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                projectId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        status\n                        \n                    \n                \n            \n            \n                \n                        \n                    status(projectId: string, data: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/status/:projectId')\n                \n            \n\n                    \n                        \n                            Defined in src/projects/projects.controller.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                projectId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(projectId: string, data: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/update/:projectId')\n                \n            \n\n                    \n                        \n                            Defined in src/projects/projects.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                projectId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  Put,\n} from '@nestjs/common';\nimport { ProjectsService } from './projects.service';\n\n@Controller('api/projects')\nexport class ProjectsController {\n  constructor(private projectsService: ProjectsService) {}\n\n  @Get()\n  async findAll() {\n    return this.projectsService.findAllProjects();\n  }\n\n  @Get(':projectId')\n  async findOne(@Param('projectId') projectId: string) {\n    return this.projectsService.findOne(projectId);\n  }\n\n  @Post('/create')\n  async create(@Body() data: any) {\n    return this.projectsService.createProject(data);\n  }\n\n  @Put('/update/:projectId')\n  async update(@Param('projectId') projectId: string, @Body() data: any) {\n    return this.projectsService.updateProject(projectId, data);\n  }\n\n  @Delete('/delete/:projectId')\n  async remove(@Param('projectId') projectId: string) {\n    return this.projectsService.deleteProject(projectId);\n  }\n\n  @Put('/status/:projectId')\n  async status(\n    @Param('projectId') projectId: string,\n    data: { status: string },\n  ) {\n    return this.projectsService.projectStatus(projectId, data);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProjectsModule.html":{"url":"modules/ProjectsModule.html","title":"module - ProjectsModule","body":"\n                   \n\n\n\n\n    Modules\n    ProjectsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ProjectsModule\n\n\n\ncluster_ProjectsModule_providers\n\n\n\n\nProjectsService\n\nProjectsService\n\n\n\nProjectsModule\n\nProjectsModule\n\nProjectsModule -->\n\nProjectsService->ProjectsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/projects/projects.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProjectsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProjectsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ProjectsService } from './projects.service';\nimport { ProjectsController } from './projects.controller';\n\n@Module({\n  providers: [ProjectsService],\n  controllers: [ProjectsController]\n})\nexport class ProjectsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProjectsService.html":{"url":"injectables/ProjectsService.html","title":"injectable - ProjectsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProjectsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/projects/projects.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createProject\n                            \n                            \n                                    Async\n                                deleteProject\n                            \n                            \n                                    Async\n                                findAllProjects\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                projectStatus\n                            \n                            \n                                    Async\n                                updateProject\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/projects/projects.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createProject\n                        \n                    \n                \n            \n            \n                \n                        \n                    createProject(data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/projects/projects.service.ts:111\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteProject\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteProject(projectId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/projects/projects.service.ts:283\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                projectId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllProjects\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllProjects()\n                \n            \n\n\n                    \n                        \n                            Defined in src/projects/projects.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(projectId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/projects/projects.service.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                projectId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        projectStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    projectStatus(projectId: string, data: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/projects/projects.service.ts:316\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                projectId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateProject\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProject(projectId: string, data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/projects/projects.service.ts:191\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                projectId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { PrismaService } from 'src/prisma/prisma.service';\n@Injectable()\nexport class ProjectsService {\n  constructor(private prisma: PrismaService) {}\n\n  async findAllProjects() {\n    const projects = await this.prisma.project.findMany({\n      where: { isDeleted: false },\n      include: {\n        projectAssignments: {\n          select: {\n            employeeId: true,\n            role: true,\n          },\n        },\n      },\n    });\n\n    const projectsWithMilestoneData = await Promise.all(\n      projects.map(async (project) => {\n        const milestones = await this.prisma.milestone.findMany({\n          where: { projectId: project.id, isDeleted: false },\n          select: {\n            percentage: true,\n            achievedDate: true,\n          },\n        });\n\n        const totalMilestonePercentage = milestones.reduce(\n          (acc, m) => acc + (m.percentage || 0),\n          0,\n        );\n\n        const totalAchievedPercentage = milestones.reduce(\n          (acc, m) => acc + (m.achievedDate ? m.percentage || 0 : 0),\n          0,\n        );\n\n        const totalRemainingPercentage = Math.max(\n          0,\n          100 - totalAchievedPercentage,\n        );\n\n        return {\n          ...project,\n          totalMilestonePercentage,\n          totalAchievedPercentage,\n          totalRemainingPercentage,\n        };\n      }),\n    );\n\n    return projectsWithMilestoneData;\n  }\n\n  async findOne(projectId: string) {\n    const project = await this.prisma.project.findFirst({\n      where: { id: projectId, isDeleted: false },\n      include: {\n        projectAssignments: {\n          select: {\n            employeeId: true,\n            role: true,\n            assignedAt: true,\n            employee: {\n              select: {\n                firstName: true,\n                lastName: true,\n                jobTitle: true,\n                profileImage: true,\n              },\n            },\n          },\n        },\n        costAllocations: {\n          select: {\n            id: true,\n            category: {\n              select: {\n                id: true,\n                name: true,\n              },\n            },\n            allocatedAmount: true,\n            description: true,\n          },\n        },\n        milestones: {\n          select: {\n            id: true,\n            name: true,\n            targetDate: true,\n            achievedDate: true,\n          },\n        },\n      },\n    });\n\n    if (!project) {\n      throw new NotFoundException('Project does not exists');\n    }\n\n    return project;\n  }\n\n  async createProject(data: any) {\n    const {\n      name,\n      clientName,\n      description,\n      startDate,\n      endDate,\n      budget,\n      status,\n      employeeIds,\n      costAllocations,\n    } = data as {\n      name: string;\n      clientName?: string;\n      description?: string;\n      startDate: string;\n      endDate: string;\n      budget: number;\n      status?: string;\n      employeeIds: string[];\n      costAllocations: {\n        categoryId: string;\n        allocatedAmount: number;\n        description?: string;\n      }[];\n    };\n\n    if (!Array.isArray(employeeIds) || employeeIds.length === 0) {\n      throw new BadRequestException('At least one employee must be assigned');\n    }\n\n    if (!Array.isArray(costAllocations) || costAllocations.length === 0) {\n      throw new BadRequestException(\n        'At least one cost allocation must be assigned',\n      );\n    }\n\n    const result = await this.prisma.$transaction(async (tx) => {\n      const project = await tx.project.create({\n        data: {\n          name,\n          clientName,\n          description,\n          startDate: new Date(startDate),\n          endDate: new Date(endDate),\n          budget,\n          status,\n        },\n      });\n\n      const assignedEmployees = await Promise.all(\n        employeeIds.map((employeeId) =>\n          tx.projectAssignment.create({\n            data: {\n              projectId: project.id,\n              employeeId,\n            },\n          }),\n        ),\n      );\n\n      const allocations = await Promise.all(\n        costAllocations.map((alloc) =>\n          tx.costAllocation.create({\n            data: {\n              projectId: project.id,\n              categoryId: alloc.categoryId,\n              allocatedAmount: alloc.allocatedAmount,\n              description: alloc.description || '',\n            },\n          }),\n        ),\n      );\n\n      return { project, assignedEmployees, allocations };\n    });\n\n    return result;\n  }\n\n  async updateProject(projectId: string, data: any) {\n    const {\n      name,\n      clientName,\n      description,\n      startDate,\n      endDate,\n      budget,\n      status,\n      employeeIds,\n      costAllocations,\n    } = data as {\n      name?: string;\n      clientName?: string;\n      description?: string;\n      startDate?: string;\n      endDate?: string;\n      budget?: number;\n      status?: string;\n      employeeIds?: string[];\n      costAllocations?: {\n        categoryId?: string;\n        allocatedAmount?: string | number | undefined;\n        description?: string;\n      }[];\n    };\n\n    const project = await this.prisma.project.findFirst({\n      where: { id: projectId, isDeleted: false },\n    });\n\n    if (!project) {\n      throw new NotFoundException('Project not found');\n    }\n\n    const result = await this.prisma.$transaction(async (tx) => {\n      const updatedProject = await tx.project.update({\n        where: { id: projectId },\n        data: {\n          name: name ?? project.name,\n          clientName: clientName ?? project.clientName,\n          description: description ?? project.description,\n          startDate: startDate ? new Date(startDate) : project.startDate,\n          endDate: endDate ? new Date(endDate) : project.endDate,\n          budget: budget ?? project.budget,\n          status: status ?? project.status,\n        },\n      });\n\n      let updatedAssignments: any[] = [];\n\n      if (Array.isArray(employeeIds)) {\n        await tx.projectAssignment.deleteMany({ where: { projectId } });\n\n        updatedAssignments = await Promise.all(\n          employeeIds.map((employeeId) =>\n            tx.projectAssignment.create({\n              data: {\n                projectId,\n                employeeId,\n              },\n            }),\n          ),\n        );\n      }\n\n      let updatedCostAllocations: any[] = [];\n\n      if (Array.isArray(costAllocations)) {\n        await tx.costAllocation.deleteMany({ where: { projectId } });\n\n        updatedCostAllocations = await Promise.all(\n          costAllocations.map((costAllocation) =>\n            tx.costAllocation.create({\n              data: {\n                projectId: project.id,\n                categoryId: costAllocation.categoryId,\n                // @ts-expect-error: allocatedAmount is validated to always exist\n                allocatedAmount: costAllocation.allocatedAmount,\n                description: costAllocation.description || '',\n              },\n            }),\n          ),\n        );\n      }\n\n      return { updatedProject, updatedAssignments, updatedCostAllocations };\n    });\n\n    return result;\n  }\n\n  async deleteProject(projectId: string) {\n    const project = await this.prisma.project.findFirst({\n      where: { id: projectId, isDeleted: false },\n    });\n\n    if (!project) {\n      throw new NotFoundException('Project not found');\n    }\n\n    await this.prisma.$transaction(async (tx) => {\n      const projectDeleted = await tx.project.update({\n        where: { id: projectId },\n        data: { isDeleted: true },\n      });\n      const assignedEmployeesDeleted = await tx.projectAssignment.updateMany({\n        where: { projectId },\n        data: { isDeleted: true },\n      });\n      const costAllocationsDeleted = await tx.costAllocation.updateMany({\n        where: { projectId },\n        data: { isDeleted: true },\n      });\n\n      return {\n        projectDeleted,\n        assignedEmployeesDeleted,\n        costAllocationsDeleted,\n      };\n    });\n\n    return { menubar: 'Project deleted successfully' };\n  }\n\n  async projectStatus(projectId: string, data: { status: string }) {\n    const { status } = data;\n\n    const project = await this.prisma.project.findFirst({\n      where: { id: projectId, isDeleted: false },\n    });\n    if (!projectId || !project) {\n      throw new NotFoundException('project does not exists');\n    }\n\n    const updateStatus = await this.prisma.project.update({\n      where: { id: projectId, isDeleted: false },\n      data: { status },\n    });\n\n    return { message: `Status updated to ${updateStatus.status}` };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"USER\" | \"ADMIN\"\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsIn(['USER', 'ADMIN'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsOptional, IsIn } from 'class-validator';\n\nexport class RegisterDto {\n    @IsNotEmpty()\n    name: string;\n\n    @IsEmail()\n    email: string;\n\n    @IsNotEmpty()\n    password: string;\n\n    @IsOptional()\n    @IsIn(['USER', 'ADMIN'])\n    role?: 'USER' | 'ADMIN';\n}\n\nexport class LoginDto {\n    @IsEmail()\n    email: string;\n\n    @IsNotEmpty()\n    password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TaskDto.html":{"url":"classes/TaskDto.html","title":"class - TaskDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TaskDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/view-task.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                project\n                            \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'task-uuid'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/view-task.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Fix bugs in UI'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/view-task.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        project\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TaskProjectDto | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: TaskProjectDto, description: 'Project details'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/view-task.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'PENDING', enum: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/view-task.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class TaskProjectDto {\n  @ApiProperty({ example: 'Project Apollo' })\n  name: string;\n}\n\nexport class TaskDto {\n  @ApiProperty({ example: 'task-uuid' })\n  id: string;\n\n  @ApiProperty({ example: 'Fix bugs in UI' })\n  name: string;\n\n  @ApiProperty({\n    example: 'PENDING',\n    enum: ['PENDING', 'IN_PROGRESS', 'COMPLETED'],\n  })\n  status: string;\n\n  @ApiProperty({ type: TaskProjectDto, description: 'Project details' })\n  project: TaskProjectDto | null;\n}\n\nexport class ViewAssignedTaskResponseDto {\n  @ApiProperty({ type: [TaskDto] })\n  tasks: TaskDto[];\n\n  @ApiProperty({\n    example: {\n      PENDING: 2,\n      IN_PROGRESS: 3,\n      COMPLETED: 5,\n    },\n  })\n  taskStatusCounts: {\n    PENDING: number;\n    IN_PROGRESS: number;\n    COMPLETED: number;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TaskInput.html":{"url":"classes/TaskInput.html","title":"class - TaskInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TaskInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/assign-task.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Fix bugs in module'})@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/assign-task.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsNotEmpty,\n  IsUUID,\n  IsArray,\n  ValidateNested,\n  IsOptional,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\n\nclass TaskInput {\n  @ApiProperty({ example: 'Fix bugs in module' })\n  @IsNotEmpty()\n  name: string;\n}\n\nexport class AssignTaskDto {\n  @ApiProperty({ example: 'user-uuid-string' })\n  @IsUUID()\n  @IsNotEmpty()\n  employeeId: string;\n\n  @ApiProperty({ type: [TaskInput] })\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => TaskInput)\n  tasks: TaskInput[];\n\n  @ApiProperty({ example: 'project-uuid-string', required: false })\n  @IsUUID()\n  @IsOptional()\n  projectId?: string;\n}\n\nexport class AssignTaskResponseDto {\n  @ApiProperty({ example: 'Tasks assigned successfully' })\n  message: string;\n\n  @ApiProperty({ example: 3 })\n  count: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TaskNameDto.html":{"url":"classes/TaskNameDto.html","title":"class - TaskNameDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TaskNameDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/task-dto.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Fix UI bugs'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/task-dto.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport {\n  ArrayNotEmpty,\n  IsArray,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  ValidateNested,\n  IsIn,\n} from 'class-validator';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class TaskNameDto {\n  @ApiProperty({ example: 'Fix UI bugs' })\n  @IsString()\n  name: string;\n}\n\nexport class AssignTaskDto {\n  @ApiProperty({ example: 'employee-uuid-123' })\n  @IsString()\n  employeeId: string;\n\n  @ApiProperty({ type: [TaskNameDto], description: 'Array of tasks to assign' })\n  @IsArray()\n  @ArrayNotEmpty()\n  @ValidateNested({ each: true })\n  @Type(() => TaskNameDto)\n  tasks: TaskNameDto[];\n\n  @ApiPropertyOptional({ example: 'project-uuid-456' })\n  @IsOptional()\n  @IsString()\n  projectId?: string;\n}\n\nexport enum TaskStatus {\n  PENDING = 'PENDING',\n  IN_PROGRESS = 'IN_PROGRESS',\n  COMPLETED = 'COMPLETED',\n}\n\nexport class UpdateTaskStatusDto {\n  @ApiProperty({ example: 'task-uuid-789' })\n  @IsString()\n  @IsNotEmpty()\n  taskId: string;\n\n  @ApiProperty({ example: 'PENDING', enum: TaskStatus })\n  @IsString()\n  @IsIn(Object.values(TaskStatus))\n  status: TaskStatus;\n}\n\nexport class TaskStatusCountDto {\n  @ApiProperty({ example: 5 })\n  PENDING: number;\n\n  @ApiProperty({ example: 3 })\n  IN_PROGRESS: number;\n\n  @ApiProperty({ example: 7 })\n  COMPLETED: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TaskProjectDto.html":{"url":"classes/TaskProjectDto.html","title":"class - TaskProjectDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TaskProjectDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/view-task.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Project Apollo'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/view-task.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class TaskProjectDto {\n  @ApiProperty({ example: 'Project Apollo' })\n  name: string;\n}\n\nexport class TaskDto {\n  @ApiProperty({ example: 'task-uuid' })\n  id: string;\n\n  @ApiProperty({ example: 'Fix bugs in UI' })\n  name: string;\n\n  @ApiProperty({\n    example: 'PENDING',\n    enum: ['PENDING', 'IN_PROGRESS', 'COMPLETED'],\n  })\n  status: string;\n\n  @ApiProperty({ type: TaskProjectDto, description: 'Project details' })\n  project: TaskProjectDto | null;\n}\n\nexport class ViewAssignedTaskResponseDto {\n  @ApiProperty({ type: [TaskDto] })\n  tasks: TaskDto[];\n\n  @ApiProperty({\n    example: {\n      PENDING: 2,\n      IN_PROGRESS: 3,\n      COMPLETED: 5,\n    },\n  })\n  taskStatusCounts: {\n    PENDING: number;\n    IN_PROGRESS: number;\n    COMPLETED: number;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TaskStatusCountDto.html":{"url":"classes/TaskStatusCountDto.html","title":"class - TaskStatusCountDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TaskStatusCountDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/task-dto.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                COMPLETED\n                            \n                            \n                                    \n                                IN_PROGRESS\n                            \n                            \n                                    \n                                PENDING\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        COMPLETED\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 7})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/task-dto.dto.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        IN_PROGRESS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 3})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/task-dto.dto.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        PENDING\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 5})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/task-dto.dto.ts:57\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport {\n  ArrayNotEmpty,\n  IsArray,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  ValidateNested,\n  IsIn,\n} from 'class-validator';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class TaskNameDto {\n  @ApiProperty({ example: 'Fix UI bugs' })\n  @IsString()\n  name: string;\n}\n\nexport class AssignTaskDto {\n  @ApiProperty({ example: 'employee-uuid-123' })\n  @IsString()\n  employeeId: string;\n\n  @ApiProperty({ type: [TaskNameDto], description: 'Array of tasks to assign' })\n  @IsArray()\n  @ArrayNotEmpty()\n  @ValidateNested({ each: true })\n  @Type(() => TaskNameDto)\n  tasks: TaskNameDto[];\n\n  @ApiPropertyOptional({ example: 'project-uuid-456' })\n  @IsOptional()\n  @IsString()\n  projectId?: string;\n}\n\nexport enum TaskStatus {\n  PENDING = 'PENDING',\n  IN_PROGRESS = 'IN_PROGRESS',\n  COMPLETED = 'COMPLETED',\n}\n\nexport class UpdateTaskStatusDto {\n  @ApiProperty({ example: 'task-uuid-789' })\n  @IsString()\n  @IsNotEmpty()\n  taskId: string;\n\n  @ApiProperty({ example: 'PENDING', enum: TaskStatus })\n  @IsString()\n  @IsIn(Object.values(TaskStatus))\n  status: TaskStatus;\n}\n\nexport class TaskStatusCountDto {\n  @ApiProperty({ example: 5 })\n  PENDING: number;\n\n  @ApiProperty({ example: 3 })\n  IN_PROGRESS: number;\n\n  @ApiProperty({ example: 7 })\n  COMPLETED: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TaskStatusCountsDto.html":{"url":"classes/TaskStatusCountsDto.html","title":"class - TaskStatusCountsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TaskStatusCountsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/all-counts.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                COMPLETED\n                            \n                            \n                                    \n                                IN_PROGRESS\n                            \n                            \n                                    \n                                PENDING\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        COMPLETED\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 15})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/all-counts.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        IN_PROGRESS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 5})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/all-counts.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        PENDING\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 10})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/all-counts.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nclass TaskStatusCountsDto {\n  @ApiProperty({ example: 10 })\n  PENDING: number;\n\n  @ApiProperty({ example: 5 })\n  IN_PROGRESS: number;\n\n  @ApiProperty({ example: 15 })\n  COMPLETED: number;\n}\n\nexport class DashboardCountsDto {\n  @ApiProperty({ example: 100 })\n  totalEmployees: number;\n\n  @ApiProperty({ example: 80 })\n  activeEmployees: number;\n\n  @ApiProperty({ example: 20 })\n  inactiveEmployees: number;\n\n  @ApiProperty({ type: TaskStatusCountsDto })\n  taskStatusCounts: TaskStatusCountsDto;\n\n  @ApiProperty({ example: 500000 })\n  totalAnnualRevenue: number;\n\n  @ApiProperty({ example: 12 })\n  totalProjects: number;\n\n  @ApiProperty({ example: 4 })\n  totalDepartments: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateExpenseDto.html":{"url":"classes/UpdateExpenseDto.html","title":"class - UpdateExpenseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateExpenseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/expenses/dto/expense.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                amount\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                date\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                departmentId\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                employeeId\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                expenseCatId\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                notes\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                productId\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                productName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                projectId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                quantity\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                receiptUrl\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                total\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        amount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNumber()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/expenses/dto/expense.dto.ts:95\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/expenses/dto/expense.dto.ts:109\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        departmentId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/expenses/dto/expense.dto.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        employeeId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/expenses/dto/expense.dto.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        expenseCatId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/expenses/dto/expense.dto.ts:82\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        notes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/expenses/dto/expense.dto.ts:113\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        productId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/expenses/dto/expense.dto.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        productName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/expenses/dto/expense.dto.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        projectId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/expenses/dto/expense.dto.ts:125\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/expenses/dto/expense.dto.ts:100\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        receiptUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsUrl()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/expenses/dto/expense.dto.ts:117\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ExpenseStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEnum(ExpenseStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/expenses/dto/expense.dto.ts:121\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        total\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNumber()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/expenses/dto/expense.dto.ts:105\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  IsOptional,\n  IsNumber,\n  IsInt,\n  IsDateString,\n  IsEnum,\n  IsUrl,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\n\nenum ExpenseStatus {\n  PENDING = 'PENDING',\n  APPROVED = 'APPROVED',\n  REJECTED = 'REJECTED',\n}\n\nexport class CreateExpenseDto {\n  @IsString()\n  departmentId: string;\n\n  @IsString()\n  employeeId: string;\n\n  @IsOptional()\n  @IsString()\n  expenseCatId?: string;\n\n  @IsOptional()\n  @IsString()\n  productId?: string;\n\n  @IsOptional()\n  @IsString()\n  productName?: string;\n\n  @IsNumber({}, { message: 'amount must be a valid number' })\n  @Type(() => Number)\n  amount: number;\n\n  @IsInt()\n  @Type(() => Number)\n  quantity: number;\n\n  @IsNumber({}, { message: 'total must be a valid number' })\n  @Type(() => Number)\n  total: number;\n\n  @IsDateString()\n  date: string;\n\n  @IsOptional()\n  @IsString()\n  notes?: string;\n\n  @IsOptional()\n  @IsUrl({}, { message: 'receiptUrl must be a valid URL' })\n  receiptUrl?: string;\n\n  @IsOptional()\n  @IsEnum(ExpenseStatus)\n  status?: ExpenseStatus;\n\n  @IsOptional()\n  @IsString()\n  projectId?: string;\n}\n\nexport class UpdateExpenseDto {\n  @IsOptional()\n  @IsString()\n  departmentId?: string;\n\n  @IsOptional()\n  @IsString()\n  employeeId?: string;\n\n  @IsOptional()\n  @IsString()\n  expenseCatId?: string;\n\n  @IsOptional()\n  @IsString()\n  productId?: string;\n\n  @IsOptional()\n  @IsString()\n  productName?: string;\n\n  @IsOptional()\n  @IsNumber()\n  @Type(() => Number)\n  amount?: number;\n\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  quantity?: number;\n\n  @IsOptional()\n  @IsNumber()\n  @Type(() => Number)\n  total?: number;\n\n  @IsOptional()\n  @IsDateString()\n  date?: string;\n\n  @IsOptional()\n  @IsString()\n  notes?: string;\n\n  @IsOptional()\n  @IsUrl()\n  receiptUrl?: string;\n\n  @IsOptional()\n  @IsEnum(ExpenseStatus)\n  status?: ExpenseStatus;\n\n  @IsOptional()\n  @IsString()\n  projectId?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateMilestoneDto.html":{"url":"classes/UpdateMilestoneDto.html","title":"class - UpdateMilestoneDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateMilestoneDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/milestones/dto/milestone.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                achievedDate\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                percentage\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                projectId\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                targetDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        achievedDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/milestones/dto/milestone.dto.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/milestones/dto/milestone.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/milestones/dto/milestone.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        percentage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/milestones/dto/milestone.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        projectId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/milestones/dto/milestone.dto.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        targetDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/milestones/dto/milestone.dto.ts:41\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsInt, IsDateString, IsOptional } from 'class-validator';\n\nexport class CreateMilestoneDto {\n  @IsString()\n  name: string;\n\n  @IsInt()\n  percentage: number;\n\n  @IsString()\n  description: string;\n\n  @IsDateString()\n  targetDate: string; // ISO format string\n\n  @IsOptional()\n  @IsDateString()\n  achievedDate?: string;\n\n  @IsString()\n  projectId: string;\n}\n\nexport class UpdateMilestoneDto {\n  @IsOptional()\n  @IsString()\n  name?: string;\n\n  @IsOptional()\n  @IsInt()\n  percentage?: number;\n\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  @IsOptional()\n  @IsDateString()\n  targetDate?: string;\n\n  @IsOptional()\n  @IsDateString()\n  achievedDate?: string;\n\n  @IsOptional()\n  @IsString()\n  projectId?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateProductDto.html":{"url":"classes/UpdateProductDto.html","title":"class - UpdateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/dto/products.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateProductDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsOptional, IsNumber } from 'class-validator';\nimport { PartialType } from '@nestjs/mapped-types';\n\nexport class CreateProductDto {\n  @IsString()\n  name: string;\n\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  @IsOptional()\n  @IsNumber({}, { message: 'basePrice must be a valid number' })\n  basePrice?: number;\n\n  @IsString()\n  categoryId: string;\n}\n\nexport class UpdateProductDto extends PartialType(CreateProductDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateProjectDto.html":{"url":"classes/UpdateProjectDto.html","title":"class - UpdateProjectDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateProjectDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/projects/dto/project.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                budget\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                clientName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                costAllocations\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                employeeIds\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                endDate\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                startDate\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        budget\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNumber({}, {message: 'Budget must be a valid number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/projects/dto/project.dto.ts:87\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        clientName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/projects/dto/project.dto.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        costAllocations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CostAllocationDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/projects/dto/project.dto.ts:102\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/projects/dto/project.dto.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        employeeIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/projects/dto/project.dto.ts:96\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        endDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/projects/dto/project.dto.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/projects/dto/project.dto.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        startDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/projects/dto/project.dto.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/projects/dto/project.dto.ts:91\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  IsOptional,\n  IsDateString,\n  IsNumber,\n  IsArray,\n  ArrayMinSize,\n  ValidateNested,\n} from 'class-validator';\n\nimport { Type } from 'class-transformer';\n\nclass CostAllocationDto {\n  @IsString()\n  categoryId: string;\n\n  @IsNumber({}, { message: 'allocatedAmount must be a valid number' })\n  allocatedAmount: number;\n\n  @IsOptional()\n  @IsString()\n  description?: string;\n}\n\nexport class CreateProjectWithAllocationsDto {\n  @IsString()\n  name: string;\n\n  @IsOptional()\n  @IsString()\n  clientName?: string;\n\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  @IsDateString()\n  startDate: string;\n\n  @IsDateString()\n  endDate: string;\n\n  @IsNumber({}, { message: 'Budget must be a valid number' })\n  budget: number;\n\n  @IsOptional()\n  @IsString()\n  status?: string;\n\n  @IsArray()\n  @ArrayMinSize(1, { message: 'At least one employee must be assigned' })\n  @IsString({ each: true })\n  employeeIds: string[];\n\n  @IsArray()\n  @ArrayMinSize(1, { message: 'At least one cost allocation must be assigned' })\n  @ValidateNested({ each: true })\n  @Type(() => CostAllocationDto)\n  costAllocations: CostAllocationDto[];\n}\n\nexport class UpdateProjectDto {\n  @IsOptional()\n  @IsString()\n  name?: string;\n\n  @IsOptional()\n  @IsString()\n  clientName?: string;\n\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  @IsOptional()\n  @IsDateString()\n  startDate?: string;\n\n  @IsOptional()\n  @IsDateString()\n  endDate?: string;\n\n  @IsOptional()\n  @IsNumber({}, { message: 'Budget must be a valid number' })\n  budget?: number;\n\n  @IsOptional()\n  @IsString()\n  status?: string;\n\n  @IsOptional()\n  @IsArray()\n  @IsString({ each: true })\n  employeeIds?: string[];\n\n  @IsOptional()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => CostAllocationDto)\n  costAllocations?: CostAllocationDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTaskStatusDto.html":{"url":"classes/UpdateTaskStatusDto.html","title":"class - UpdateTaskStatusDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTaskStatusDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/task-dto.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                taskId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TaskStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'PENDING', enum: TaskStatus})@IsString()@IsIn(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/task-dto.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        taskId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'task-uuid-789'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/task-dto.dto.ts:47\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport {\n  ArrayNotEmpty,\n  IsArray,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  ValidateNested,\n  IsIn,\n} from 'class-validator';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class TaskNameDto {\n  @ApiProperty({ example: 'Fix UI bugs' })\n  @IsString()\n  name: string;\n}\n\nexport class AssignTaskDto {\n  @ApiProperty({ example: 'employee-uuid-123' })\n  @IsString()\n  employeeId: string;\n\n  @ApiProperty({ type: [TaskNameDto], description: 'Array of tasks to assign' })\n  @IsArray()\n  @ArrayNotEmpty()\n  @ValidateNested({ each: true })\n  @Type(() => TaskNameDto)\n  tasks: TaskNameDto[];\n\n  @ApiPropertyOptional({ example: 'project-uuid-456' })\n  @IsOptional()\n  @IsString()\n  projectId?: string;\n}\n\nexport enum TaskStatus {\n  PENDING = 'PENDING',\n  IN_PROGRESS = 'IN_PROGRESS',\n  COMPLETED = 'COMPLETED',\n}\n\nexport class UpdateTaskStatusDto {\n  @ApiProperty({ example: 'task-uuid-789' })\n  @IsString()\n  @IsNotEmpty()\n  taskId: string;\n\n  @ApiProperty({ example: 'PENDING', enum: TaskStatus })\n  @IsString()\n  @IsIn(Object.values(TaskStatus))\n  status: TaskStatus;\n}\n\nexport class TaskStatusCountDto {\n  @ApiProperty({ example: 5 })\n  PENDING: number;\n\n  @ApiProperty({ example: 3 })\n  IN_PROGRESS: number;\n\n  @ApiProperty({ example: 7 })\n  COMPLETED: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                city\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                departmentId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                dob\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                hireDate\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                jobTitle\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                phone\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                pincode\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                profileImage\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                role\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                salary\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                state\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: '123 Street, Area'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.dto.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'Nashik'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.dto.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        departmentId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({format: 'uuid', example: 'a65fa2c0-5c63-4d2f-a649-b9e3ad74f874'})@IsOptional()@IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.dto.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        dob\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: '2000-01-01'})@IsOptional()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'samarth@example.com'})@IsOptional()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'Samarth'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        hireDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: '2023-10-01'})@IsOptional()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.dto.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        jobTitle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'Software Developer'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.dto.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'Shinde'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'newStrongPassword123'})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: '9898989898'})@IsOptional()@IsString()@IsPhoneNumber('IN')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        pincode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: '422101'})@IsOptional()@IsPostalCode('IN')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.dto.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        profileImage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'https://example.com/profile.jpg'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.dto.ts:96\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"USER\" | \"ADMIN\"\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: undefined, example: 'USER'})@IsOptional()@IsIn(['USER', 'ADMIN'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.dto.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        salary\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 50000})@IsOptional()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.dto.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'Maharashtra'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.dto.ts:68\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsOptional,\n  IsString,\n  IsEmail,\n  IsPhoneNumber,\n  IsDateString,\n  IsNumber,\n  IsUUID,\n  IsIn,\n  IsPostalCode,\n} from 'class-validator';\n\nexport class UpdateUserDto {\n  @ApiPropertyOptional({ example: 'Samarth' })\n  @IsOptional()\n  @IsString()\n  firstName?: string;\n\n  @ApiPropertyOptional({ example: 'Shinde' })\n  @IsOptional()\n  @IsString()\n  lastName?: string;\n\n  @ApiPropertyOptional({ example: 'samarth@example.com' })\n  @IsOptional()\n  @IsEmail()\n  email?: string;\n\n  @ApiPropertyOptional({ example: 'newStrongPassword123' })\n  @IsOptional()\n  password?: string;\n\n  @ApiPropertyOptional({ example: '9898989898' })\n  @IsOptional()\n  @IsString()\n  @IsPhoneNumber('IN')\n  phone?: string;\n\n  @ApiPropertyOptional({ example: '2000-01-01' })\n  @IsOptional()\n  @IsDateString()\n  dob?: string;\n\n  @ApiPropertyOptional({ example: 'Software Developer' })\n  @IsOptional()\n  @IsString()\n  jobTitle?: string;\n\n  @ApiPropertyOptional({ example: 50000 })\n  @IsOptional()\n  @IsNumber()\n  salary?: number;\n\n  @ApiPropertyOptional({ example: '2023-10-01' })\n  @IsOptional()\n  @IsDateString()\n  hireDate?: string;\n\n  @ApiPropertyOptional({ example: '123 Street, Area' })\n  @IsOptional()\n  @IsString()\n  address?: string;\n\n  @ApiPropertyOptional({ example: 'Maharashtra' })\n  @IsOptional()\n  @IsString()\n  state?: string;\n\n  @ApiPropertyOptional({ example: 'Nashik' })\n  @IsOptional()\n  @IsString()\n  city?: string;\n\n  @ApiPropertyOptional({ example: '422101' })\n  @IsOptional()\n  @IsPostalCode('IN')\n  pincode?: string;\n\n  @ApiPropertyOptional({ enum: ['USER', 'ADMIN'], example: 'USER' })\n  @IsOptional()\n  @IsIn(['USER', 'ADMIN'])\n  role?: 'USER' | 'ADMIN';\n\n  @ApiPropertyOptional({\n    format: 'uuid',\n    example: 'a65fa2c0-5c63-4d2f-a649-b9e3ad74f874',\n  })\n  @IsOptional()\n  @IsUUID()\n  departmentId?: string;\n\n  @ApiPropertyOptional({ example: 'https://example.com/profile.jpg' })\n  @IsOptional()\n  @IsString()\n  profileImage?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserResponseDto.html":{"url":"classes/UserResponseDto.html","title":"class - UserResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/user-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                address\n                            \n                            \n                                    \n                                city\n                            \n                            \n                                    \n                                    Optional\n                                departmentId\n                            \n                            \n                                    \n                                dob\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                hireDate\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                jobTitle\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                phone\n                            \n                            \n                                    \n                                pincode\n                            \n                            \n                                    \n                                    Optional\n                                profileImage\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    \n                                salary\n                            \n                            \n                                    \n                                state\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        departmentId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        dob\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        hireDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        jobTitle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        pincode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        profileImage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"USER\" | \"ADMIN\"\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        salary\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class UserResponseDto {\n  @ApiProperty()\n  id: string;\n\n  @ApiProperty()\n  firstName: string;\n\n  @ApiProperty()\n  lastName: string;\n\n  @ApiProperty()\n  email: string;\n\n  @ApiProperty()\n  phone: string;\n\n  @ApiProperty()\n  dob: string;\n\n  @ApiProperty()\n  jobTitle: string;\n\n  @ApiProperty()\n  salary: number;\n\n  @ApiProperty()\n  hireDate: string;\n\n  @ApiProperty()\n  address: string;\n\n  @ApiProperty()\n  state: string;\n\n  @ApiProperty()\n  city: string;\n\n  @ApiProperty()\n  pincode: string;\n\n  @ApiProperty({ enum: ['USER', 'ADMIN'] })\n  role: 'USER' | 'ADMIN';\n\n  @ApiProperty({ required: false })\n  departmentId?: string;\n\n  @ApiProperty({ required: false })\n  profileImage?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                api/users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                allCounts\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                assignTask\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getTaskStatusCount\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    \n                                    Async\n                                update\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                updateTaskStatus\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                viewAssignedTasks\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        allCounts\n                        \n                    \n                \n            \n            \n                \n                        \n                    allCounts()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/all-counts')@ApiOperation({summary: 'get all counts'})@ApiOkResponse({description: 'Dashboard summary counts', type: DashboardCountsDto})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:77\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        assignTask\n                        \n                    \n                \n            \n            \n                \n                        \n                    assignTask(body: AssignTaskDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('assign-task')@ApiOperation({summary: 'Assign task'})@ApiBody({type: AssignTaskDto})@ApiOkResponse({type: AssignTaskResponseDto, description: 'Tasks assigned successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:125\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AssignTaskDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(file: Express.Multer.File, createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create a new user'})@ApiResponse({status: 201, description: 'User created successfully'})@ApiResponse({status: 400, description: 'Validation failed'})@UseInterceptors(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'get all users'})@ApiOkResponse({description: 'List of all users', type: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:87\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'get user by id'})@ApiParam({name: 'id', type: 'string', description: 'User ID'})@ApiOkResponse({type: UserResponseDto, description: 'User found'})@ApiNotFoundResponse({description: 'User not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:96\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getTaskStatusCount\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTaskStatusCount(employeeId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/task-counts/:employeeId')@ApiOperation({summary: 'tasks count'})@ApiOkResponse({type: TaskStatusCountDto, description: 'Tasks count fetched successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:163\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                employeeId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({summary: 'delete user'})@ApiParam({name: 'id', type: 'string', description: 'User ID to delete'})@ApiOkResponse({type: DeleteUserResponseDto, description: 'User deleted successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:113\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/update/:id')@ApiOperation({summary: 'Update the user'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:102\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        updateTaskStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateTaskStatus(employeeId: string, data: UpdateTaskStatusDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/update-status/:employeeId')@ApiOperation({summary: 'Update task status'})@ApiResponse({status: 201, description: 'Task updated successfully'})@ApiOperation({summary: 'udpate task status'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:150\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                employeeId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            UpdateTaskStatusDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        viewAssignedTasks\n                        \n                    \n                \n            \n            \n                \n                        \n                    viewAssignedTasks(employeeId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/view-task/:employeeId')@ApiOperation({summary: 'View assigned tasks'})@ApiParam({name: 'employeeId', type: 'string', description: 'Employee ID to fetch tasks'})@ApiOkResponse({type: ViewAssignedTaskResponseDto, description: 'Tasks fetched successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:140\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                employeeId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Patch,\n  Delete,\n  Param,\n  Body,\n  Put,\n  UseInterceptors,\n  UploadedFile,\n} from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport {\n  AssignTaskDto,\n  TaskStatusCountDto,\n  UpdateTaskStatusDto,\n} from './dto/task-dto.dto';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { diskStorage } from 'multer';\nimport { basename, extname } from 'path';\nimport { Express } from 'express';\nimport {\n  ApiBody,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiResponse,\n} from '@nestjs/swagger';\nimport { UserResponseDto } from './dto/user-response.dto';\nimport { DashboardCountsDto } from './dto/all-counts.dto';\nimport { User } from '@prisma/client';\nimport { DeleteUserResponseDto } from './dto/delete-user.dto';\nimport { AssignTaskResponseDto } from './dto/assign-task.dto';\nimport { ViewAssignedTaskResponseDto } from './dto/view-task.dto';\n\n@Controller('api/users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Create a new user' })\n  @ApiResponse({ status: 201, description: 'User created successfully' })\n  @ApiResponse({ status: 400, description: 'Validation failed' })\n  @UseInterceptors(\n    FileInterceptor('profileImage', {\n      storage: diskStorage({\n        destination: './uploads/images',\n        filename: (req, file, cb) => {\n          const uniqueSuffix =\n            Date.now() + '-' + Math.round(Math.random() * 1e9);\n          cb(null, `${uniqueSuffix}${extname(file.originalname)}`);\n        },\n      }),\n    }),\n  )\n  async create(\n    @UploadedFile() file: Express.Multer.File,\n    @Body() createUserDto: CreateUserDto,\n  ) {\n    const imagePath = file?.path ? basename(file.path) : undefined;\n    return this.usersService.createUser({\n      ...createUserDto,\n      profileImage: imagePath ?? undefined,\n    });\n  }\n\n  @Get('/all-counts')\n  @ApiOperation({ summary: 'get all counts' })\n  @ApiOkResponse({\n    description: 'Dashboard summary counts',\n    type: DashboardCountsDto,\n  })\n  async allCounts(): Promise {\n    return this.usersService.getAllCounts();\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'get all users' })\n  @ApiOkResponse({\n    description: 'List of all users',\n    type: [UserResponseDto],\n  })\n  async findAll() {\n    return this.usersService.findAll();\n  }\n\n  @Get(':id')\n  @ApiOperation({ summary: 'get user by id' })\n  @ApiParam({ name: 'id', type: 'string', description: 'User ID' })\n  @ApiOkResponse({ type: UserResponseDto, description: 'User found' })\n  @ApiNotFoundResponse({ description: 'User not found' })\n  async findOne(@Param('id') id: string): Promise {\n    return this.usersService.findById(id);\n  }\n\n  @Put('/update/:id')\n  @ApiOperation({ summary: 'Update the user' })\n  async update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto) {\n    return this.usersService.updateUser(id, updateUserDto);\n  }\n\n  @Delete(':id')\n  @ApiOperation({ summary: 'delete user' })\n  @ApiParam({ name: 'id', type: 'string', description: 'User ID to delete' })\n  @ApiOkResponse({\n    type: DeleteUserResponseDto,\n    description: 'User deleted successfully',\n  })\n  async remove(@Param('id') id: string): Promise {\n    return this.usersService.deleteUser(id);\n  }\n\n  //Task assign controllers\n  @Post('assign-task')\n  @ApiOperation({ summary: 'Assign task' })\n  @ApiBody({ type: AssignTaskDto })\n  @ApiOkResponse({\n    type: AssignTaskResponseDto,\n    description: 'Tasks assigned successfully',\n  })\n  async assignTask(@Body() body: AssignTaskDto) {\n    return this.usersService.assignTask(body);\n  }\n\n  @Get('/view-task/:employeeId')\n  @ApiOperation({ summary: 'View assigned tasks' })\n  @ApiParam({\n    name: 'employeeId',\n    type: 'string',\n    description: 'Employee ID to fetch tasks',\n  })\n  @ApiOkResponse({\n    type: ViewAssignedTaskResponseDto,\n    description: 'Tasks fetched successfully',\n  })\n  async viewAssignedTasks(\n    @Param('employeeId') employeeId: string,\n  ): Promise {\n    return this.usersService.viewAssignedTask(employeeId);\n  }\n\n  @Put('/update-status/:employeeId')\n  @ApiOperation({ summary: 'Update task status' })\n  @ApiResponse({ status: 201, description: 'Task updated successfully' })\n  @ApiOperation({ summary: 'udpate task status' })\n  async updateTaskStatus(\n    @Param('employeeId') employeeId: string,\n    @Body() data: UpdateTaskStatusDto,\n  ) {\n    return this.usersService.updateTaskStatus(employeeId, data);\n  }\n\n  @Get('/task-counts/:employeeId')\n  @ApiOperation({ summary: 'tasks count' })\n  @ApiOkResponse({\n    type: TaskStatusCountDto,\n    description: 'Tasks count fetched successfully',\n  })\n  async getTaskStatusCount(@Param('employeeId') employeeId: string) {\n    return this.usersService.taskStatusCount(employeeId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\n\n@Module({\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                assignTask\n                            \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                getAllCounts\n                            \n                            \n                                    Async\n                                taskStatusCount\n                            \n                            \n                                    Async\n                                updateTaskStatus\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                            \n                                    Async\n                                viewAssignedTask\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        assignTask\n                        \n                    \n                \n            \n            \n                \n                        \n                    assignTask(data: AssignTaskDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:148\n                        \n                    \n\n\n            \n                \n                        Assign task services ******\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            AssignTaskDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(data: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteUser(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:126\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:63\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:80\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAllCounts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllCounts()\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:294\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        taskStatusCount\n                        \n                    \n                \n            \n            \n                \n                        \n                    taskStatusCount(employeeId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:272\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                employeeId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateTaskStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateTaskStatus(employeeId: string, data: UpdateTaskStatusDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:228\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                employeeId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            UpdateTaskStatusDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUser(id: string, data: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:89\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        viewAssignedTask\n                        \n                    \n                \n            \n            \n                \n                        \n                    viewAssignedTask(employeeId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:180\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                employeeId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { User, Role, TaskStatus } from '@prisma/client';\nimport * as bcrypt from 'bcrypt';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport {\n  AssignTaskDto,\n  TaskStatusCountDto,\n  UpdateTaskStatusDto,\n} from './dto/task-dto.dto';\nimport { DashboardCountsDto } from './dto/all-counts.dto';\nimport { UserResponseDto } from './dto/user-response.dto';\nimport { DeleteUserResponseDto } from './dto/delete-user.dto';\n\n@Injectable()\nexport class UsersService {\n  constructor(private prisma: PrismaService) {}\n\n  async createUser(data: CreateUserDto): Promise {\n    const existingUser = await this.prisma.user.findUnique({\n      where: { email: data.email },\n    });\n    if (existingUser) throw new Error('User already exists');\n\n    const hashedPassword = await bcrypt.hash(data.password, 10);\n    const count = await this.prisma.user.count({\n      where: {\n        empId: {\n          not: null,\n        },\n      },\n    });\n    const newEmpId = `EMP-${1111 + count}`;\n\n    return this.prisma.user.create({\n      data: {\n        empId: newEmpId,\n        firstName: data.firstName,\n        lastName: data.lastName,\n        email: data.email,\n        phone: data.phone,\n        dob: new Date(data.dob),\n        jobTitle: data.jobTitle,\n        salary: data.salary,\n        hireDate: new Date(data.hireDate),\n        address: data.address,\n        state: data.state,\n        city: data.city,\n        pincode: data.pincode,\n        password: hashedPassword,\n        profileImage: data.profileImage || undefined,\n        departmentId: data.departmentId || undefined,\n        role: data.role || Role.USER,\n      },\n    });\n  }\n\n  async findAll(): Promise {\n    const users = await this.prisma.user.findMany({\n      where: { isDeleted: false, role: 'USER' },\n      include: {\n        department: {\n          select: { name: true },\n        },\n        projectAssignments: {\n          select: {\n            projectId: true,\n          },\n        },\n      },\n    });\n    return users;\n  }\n\n  async findById(id: string): Promise {\n    const user = await this.prisma.user.findUnique({\n      where: { isDeleted: false, id },\n    });\n\n    if (!user) throw new NotFoundException('User not found');\n    return user;\n  }\n\n  async updateUser(id: string, data: UpdateUserDto): Promise {\n    const existingUser = await this.prisma.user.findFirst({\n      where: { id, isDeleted: false },\n    });\n\n    if (!existingUser) {\n      throw new NotFoundException('User not found');\n    }\n\n    // Handle field updates with fallback to existing values\n    const updatedData: any = {\n      empId: existingUser.empId,\n      firstName: data.firstName ?? existingUser.firstName,\n      lastName: data.lastName ?? existingUser.lastName,\n      email: data.email ?? existingUser.email,\n      phone: data.phone ?? existingUser.phone,\n      dob: data.dob ? new Date(data.dob) : existingUser.dob,\n      departmentId: data.departmentId ?? existingUser.departmentId,\n      jobTitle: data.jobTitle ?? existingUser.jobTitle,\n      salary: data.salary ?? existingUser.salary,\n      hireDate: data.hireDate ? new Date(data.hireDate) : existingUser.hireDate,\n      address: data.address ?? existingUser.address,\n      state: data.state ?? existingUser.state,\n      city: data.city ?? existingUser.city,\n      pincode: data.pincode ?? existingUser.pincode,\n      role: data.role ?? existingUser.role,\n      password: data.password\n        ? await bcrypt.hash(data.password, 10)\n        : existingUser.password,\n    };\n\n    return this.prisma.user.update({\n      where: { id },\n      data: updatedData,\n    });\n  }\n\n  async deleteUser(id: string): Promise {\n    const user = await this.prisma.user.findFirst({\n      where: { id, isDeleted: false },\n    });\n\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    await this.prisma.user.update({\n      where: { id },\n      data: {\n        isDeleted: true,\n        deletedAt: new Date(),\n      },\n    });\n\n    return { message: 'User deleted successfully' };\n  }\n\n  /****** Assign task services ****** */\n\n  async assignTask(data: AssignTaskDto) {\n    const { employeeId, tasks, projectId } = data;\n\n    if (!employeeId || !Array.isArray(tasks) || tasks.length === 0) {\n      throw new BadRequestException('employeeId and tasks are required');\n    }\n\n    const user = await this.prisma.user.findFirst({\n      where: { id: employeeId, isDeleted: false },\n    });\n\n    if (!user) {\n      throw new NotFoundException('User does not exist');\n    }\n\n    const taskData = tasks.map((task) => ({\n      employeeId,\n      name: task.name,\n      status: TaskStatus.PENDING,\n      projectId: projectId || null,\n    }));\n\n    const createdTasks = await this.prisma.task.createMany({\n      data: taskData,\n    });\n\n    return {\n      message: 'Tasks assigned successfully',\n      count: createdTasks.count,\n    };\n  }\n\n  async viewAssignedTask(employeeId: string): Promise {\n    const tasks = await this.prisma.task.findMany({\n      where: { isDeleted: false, employeeId },\n      include: {\n        project: {\n          select: { name: true },\n        },\n      },\n    });\n\n    if (!tasks) {\n      throw new NotFoundException('tasks for this user does not exist');\n    }\n\n    const [pendingCount, inProgressCount, completedCount] = await Promise.all([\n      this.prisma.task.count({\n        where: {\n          isDeleted: false,\n          employeeId,\n          status: 'PENDING',\n        },\n      }),\n      this.prisma.task.count({\n        where: {\n          isDeleted: false,\n          employeeId,\n          status: 'IN_PROGRESS',\n        },\n      }),\n      this.prisma.task.count({\n        where: {\n          isDeleted: false,\n          employeeId,\n          status: 'COMPLETED',\n        },\n      }),\n    ]);\n\n    return {\n      tasks,\n      taskStatusCounts: {\n        PENDING: pendingCount,\n        IN_PROGRESS: inProgressCount,\n        COMPLETED: completedCount,\n      },\n    };\n  }\n\n  async updateTaskStatus(\n    employeeId: string,\n    data: UpdateTaskStatusDto,\n  ): Promise {\n    const { taskId, status } = data;\n\n    const user = await this.prisma.user.findUnique({\n      where: { isDeleted: false, id: employeeId },\n    });\n\n    if (!user) {\n      throw new NotFoundException('User does not exist');\n    }\n\n    const existingTask = await this.prisma.task.findFirst({\n      where: {\n        isDeleted: false,\n        id: taskId,\n        employeeId,\n      },\n    });\n\n    if (!existingTask) {\n      throw new NotFoundException('Task not found for the employee');\n    }\n\n    const statusEnum = status as any;\n    const statusUpdated = await this.prisma.task.update({\n      where: { id: taskId, isDeleted: false },\n      data:\n        status === TaskStatus.COMPLETED\n          ? {\n              status: statusEnum,\n              completedAt: new Date(),\n            }\n          : {\n              status: statusEnum,\n              completedAt: null,\n            },\n    });\n\n    return statusUpdated;\n  }\n\n  async taskStatusCount(employeeId: string): Promise {\n    const grouped = await this.prisma.task.groupBy({\n      by: ['status'],\n      where: { isDeleted: false, employeeId },\n      _count: {\n        status: true,\n      },\n    });\n\n    const statusCounts = {\n      PENDING: 0,\n      IN_PROGRESS: 0,\n      COMPLETED: 0,\n    };\n\n    grouped.forEach((item: any) => {\n      statusCounts[item.status] = item._count.status;\n    });\n\n    return statusCounts;\n  }\n\n  async getAllCounts(): Promise {\n    const currentYear = new Date().getFullYear();\n    const startOfYear = new Date(`${currentYear}-01-01T00:00:00.000Z`);\n    const endOfYear = new Date(`${currentYear}-12-31T23:59:59.999Z`);\n\n    const [\n      taskGrouped,\n      totalEmployees,\n      activeEmployees,\n      inactiveEmployees,\n      annualRevenueResult,\n      totalProjects,\n      totalDepartments,\n    ] = await Promise.all([\n      this.prisma.task.groupBy({\n        by: ['status'],\n        _count: {\n          status: true,\n        },\n        where: {\n          isDeleted: false,\n        },\n      }),\n      this.prisma.user.count({ where: { isDeleted: false, role: 'USER' } }),\n      this.prisma.user.count({\n        where: { isDeleted: false, role: 'USER', status: 'ACTIVE' },\n      }),\n      this.prisma.user.count({\n        where: { isDeleted: false, role: 'USER', status: 'INACTIVE' },\n      }),\n      this.prisma.expense.aggregate({\n        _sum: {\n          amount: true,\n        },\n        where: {\n          createdAt: {\n            gte: startOfYear,\n            lte: endOfYear,\n          },\n        },\n      }),\n      this.prisma.project.count({ where: { isDeleted: false } }),\n      this.prisma.department.count({ where: { isDeleted: false } }),\n    ]);\n\n    // Initialize with 0 in case any status is missing\n    const statusCounts: Record = {\n      PENDING: 0,\n      IN_PROGRESS: 0,\n      COMPLETED: 0,\n    };\n\n    taskGrouped.forEach(\n      ({\n        status,\n        _count,\n      }: {\n        status: TaskStatus;\n        _count: { status: number };\n      }) => {\n        if (status in statusCounts) {\n          statusCounts[status] = _count.status;\n        }\n      },\n    );\n\n    return {\n      totalEmployees,\n      activeEmployees,\n      inactiveEmployees,\n      taskStatusCounts: statusCounts,\n      // @ts-expect-error: allocatedAmount is validated to always exist\n      totalAnnualRevenue: annualRevenueResult._sum.amount ?? 0,\n      totalProjects,\n      totalDepartments,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ViewAssignedTaskResponseDto.html":{"url":"classes/ViewAssignedTaskResponseDto.html","title":"class - ViewAssignedTaskResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ViewAssignedTaskResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/view-task.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                tasks\n                            \n                            \n                                    \n                                taskStatusCounts\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tasks\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TaskDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/view-task.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        taskStatusCounts\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/view-task.dto.ts:36\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class TaskProjectDto {\n  @ApiProperty({ example: 'Project Apollo' })\n  name: string;\n}\n\nexport class TaskDto {\n  @ApiProperty({ example: 'task-uuid' })\n  id: string;\n\n  @ApiProperty({ example: 'Fix bugs in UI' })\n  name: string;\n\n  @ApiProperty({\n    example: 'PENDING',\n    enum: ['PENDING', 'IN_PROGRESS', 'COMPLETED'],\n  })\n  status: string;\n\n  @ApiProperty({ type: TaskProjectDto, description: 'Project details' })\n  project: TaskProjectDto | null;\n}\n\nexport class ViewAssignedTaskResponseDto {\n  @ApiProperty({ type: [TaskDto] })\n  tasks: TaskDto[];\n\n  @ApiProperty({\n    example: {\n      PENDING: 2,\n      IN_PROGRESS: 3,\n      COMPLETED: 5,\n    },\n  })\n  taskStatusCounts: {\n    PENDING: number;\n    IN_PROGRESS: number;\n    COMPLETED: number;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.guard.ts\n            \n            guard\n            AuthGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/dto/auth.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/auth.dto.ts\n            \n            class\n            RegisterDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/departments/departments.controller.ts\n            \n            controller\n            DepartmentsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/departments/departments.service.ts\n            \n            injectable\n            DepartmentsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/expense-category/expense-category.controller.ts\n            \n            controller\n            ExpenseCategoryController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/expense-category/expense-category.service.ts\n            \n            injectable\n            ExpenseCategoryService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/expenses/dto/expense.dto.ts\n            \n            class\n            CreateExpenseDto\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/expenses/dto/expense.dto.ts\n            \n            class\n            UpdateExpenseDto\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/expenses/expenses.controller.ts\n            \n            controller\n            ExpensesController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/expenses/expenses.service.ts\n            \n            injectable\n            ExpensesService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/milestones/dto/milestone.dto.ts\n            \n            class\n            CreateMilestoneDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/milestones/dto/milestone.dto.ts\n            \n            class\n            UpdateMilestoneDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/milestones/milestones.controller.ts\n            \n            controller\n            MilestonesController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/milestones/milestones.service.ts\n            \n            injectable\n            MilestonesService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/products/dto/products.dto.ts\n            \n            class\n            CreateProductDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/products/dto/products.dto.ts\n            \n            class\n            UpdateProductDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/products/products.controller.ts\n            \n            controller\n            ProductsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/products/products.service.ts\n            \n            injectable\n            ProductsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/projects/dto/project.dto.ts\n            \n            class\n            CostAllocationDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/projects/dto/project.dto.ts\n            \n            class\n            CreateProjectWithAllocationsDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/projects/dto/project.dto.ts\n            \n            class\n            UpdateProjectDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/projects/projects.controller.ts\n            \n            controller\n            ProjectsController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/projects/projects.service.ts\n            \n            injectable\n            ProjectsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/users/dto/all-counts.dto.ts\n            \n            class\n            DashboardCountsDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/users/dto/all-counts.dto.ts\n            \n            class\n            TaskStatusCountsDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/dto/assign-task.dto.ts\n            \n            class\n            AssignTaskDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/dto/assign-task.dto.ts\n            \n            class\n            AssignTaskResponseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dto/assign-task.dto.ts\n            \n            class\n            TaskInput\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/users/dto/delete-user.dto.ts\n            \n            class\n            DeleteUserResponseDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dto/task-dto.dto.ts\n            \n            class\n            AssignTaskDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/dto/task-dto.dto.ts\n            \n            class\n            TaskNameDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dto/task-dto.dto.ts\n            \n            class\n            TaskStatusCountDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/dto/task-dto.dto.ts\n            \n            class\n            UpdateTaskStatusDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/users/dto/user-response.dto.ts\n            \n            class\n            UserResponseDto\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/users/dto/view-task.dto.ts\n            \n            class\n            TaskDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dto/view-task.dto.ts\n            \n            class\n            TaskProjectDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dto/view-task.dto.ts\n            \n            class\n            ViewAssignedTaskResponseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                8 %\n                (1/12)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^11.0.1\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^11.0.1\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/mapped-types : ^2.1.0\n        \n            @nestjs/passport : ^11.0.5\n        \n            @nestjs/platform-express : ^11.1.1\n        \n            @nestjs/swagger : ^11.2.0\n        \n            @prisma/client : ^6.8.2\n        \n            bcrypt : ^6.0.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.2\n        \n            cookie-parser : ^1.4.7\n        \n            date-fns : ^4.1.0\n        \n            multer : ^2.0.0\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            prisma : ^6.8.2\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n        \n            swagger-ui-express : ^5.0.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ExpenseStatus   (src/.../expense.dto.ts)\n                        \n                        \n                            TaskStatus   (src/.../task-dto.dto.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/expenses/dto/expense.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        ExpenseStatus\n                    \n                \n                        \n                            \n                                 PENDING\n                            \n                        \n                        \n                            \n                                Value : PENDING\n                            \n                        \n                        \n                            \n                                 APPROVED\n                            \n                        \n                        \n                            \n                                Value : APPROVED\n                            \n                        \n                        \n                            \n                                 REJECTED\n                            \n                        \n                        \n                            \n                                Value : REJECTED\n                            \n                        \n            \n        \n\n    src/users/dto/task-dto.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        TaskStatus\n                    \n                \n                        \n                            \n                                 PENDING\n                            \n                        \n                        \n                            \n                                Value : PENDING\n                            \n                        \n                        \n                            \n                                 IN_PROGRESS\n                            \n                        \n                        \n                            \n                                Value : IN_PROGRESS\n                            \n                        \n                        \n                            \n                                 COMPLETED\n                            \n                        \n                        \n                            \n                                Value : COMPLETED\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g @nestjs/mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Samarth\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DepartmentsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ExpenseCategoryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ExpensesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MilestonesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProductsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProjectsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_DepartmentsModule\n\n\n\ncluster_DepartmentsModule_providers\n\n\n\ncluster_ExpenseCategoryModule\n\n\n\ncluster_ExpenseCategoryModule_providers\n\n\n\ncluster_ExpensesModule\n\n\n\ncluster_ExpensesModule_providers\n\n\n\ncluster_MilestonesModule\n\n\n\ncluster_MilestonesModule_providers\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_ProductsModule\n\n\n\ncluster_ProductsModule_providers\n\n\n\ncluster_ProjectsModule\n\n\n\ncluster_ProjectsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nDepartmentsModule\n\nDepartmentsModule\n\nAppModule -->\n\nDepartmentsModule->AppModule\n\n\n\n\n\nExpenseCategoryModule\n\nExpenseCategoryModule\n\nAppModule -->\n\nExpenseCategoryModule->AppModule\n\n\n\n\n\nExpensesModule\n\nExpensesModule\n\nAppModule -->\n\nExpensesModule->AppModule\n\n\n\n\n\nMilestonesModule\n\nMilestonesModule\n\nAppModule -->\n\nMilestonesModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nProductsModule\n\nProductsModule\n\nAppModule -->\n\nProductsModule->AppModule\n\n\n\n\n\nProjectsModule\n\nProjectsModule\n\nAppModule -->\n\nProjectsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nDepartmentsService\n\nDepartmentsService\n\nDepartmentsModule -->\n\nDepartmentsService->DepartmentsModule\n\n\n\n\n\nExpenseCategoryService\n\nExpenseCategoryService\n\nExpenseCategoryModule -->\n\nExpenseCategoryService->ExpenseCategoryModule\n\n\n\n\n\nExpensesService\n\nExpensesService\n\nExpensesModule -->\n\nExpensesService->ExpensesModule\n\n\n\n\n\nMilestonesService\n\nMilestonesService\n\nMilestonesModule -->\n\nMilestonesService->MilestonesModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\nProductsService\n\nProductsService\n\nProductsModule -->\n\nProductsService->ProductsModule\n\n\n\n\n\nProjectsService\n\nProjectsService\n\nProjectsModule -->\n\nProjectsService->ProjectsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        10 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    9 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    12 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    27 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
