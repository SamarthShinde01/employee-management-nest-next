generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum Role {
  ADMIN
  USER
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum ExpenseStatus {
  PENDING
  APPROVED
  REJECTED
}

model Department {
  id         String     @id @default(cuid())
  name       String     @unique
  isDeleted  Boolean    @default(false)
  deletedAt  DateTime?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  employees  User[]
  expenses   Expense[]
}

model User {
  id           String     @id @default(cuid())
  empId        String?    @unique
  firstName    String
  lastName     String
  email        String     @unique
  phone        String
  dob          DateTime
  jobTitle     String
  salary       Decimal    @db.Decimal(10, 2)
  hireDate     DateTime
  address      String
  state        String
  city         String
  pincode      String
  password     String
  profileImage String?
  status       UserStatus @default(ACTIVE)
  role         Role       @default(USER)
  isDeleted    Boolean    @default(false)
  deletedAt    DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  department   Department? @relation(fields: [departmentId], references: [id])
  departmentId String?

  tasks              Task[]
  expenses           Expense[]
  projectAssignments ProjectAssignment[]
}

model Task {
  id          String      @id @default(cuid())
  name        String
  status      TaskStatus? @default(PENDING)
  completedAt DateTime?
  isDeleted   Boolean     @default(false)
  deletedAt   DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  employee   User   @relation(fields: [employeeId], references: [id])
  employeeId String

  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?
}

model ExpenseCategory {
  id            String           @id @default(cuid())
  name          String           @unique
  isDeleted     Boolean          @default(false)
  deletedAt     DateTime?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  expenses      Expense[]
  products      Product[]
  CostAllocation CostAllocation[]
}

model Product {
  id             String           @id @default(cuid())
  name           String           @unique
  description    String?
  basePrice      Decimal?         @db.Decimal(10, 2)
  category       ExpenseCategory  @relation(fields: [categoryId], references: [id])
  categoryId     String
  isDeleted      Boolean          @default(false)
  deletedAt      DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  costAllocations CostAllocation[]
  expenses       Expense[]
}

model Expense {
  id             String         @id @default(cuid())
  department     Department     @relation(fields: [departmentId], references: [id])
  departmentId   String
  employee       User           @relation(fields: [employeeId], references: [id])
  employeeId     String
  expenseCategory ExpenseCategory? @relation(fields: [expenseCatId], references: [id])
  expenseCatId   String?
  product        Product?       @relation(fields: [productId], references: [id])
  productId      String?
  productName    String?
  amount         Decimal        @db.Decimal(10, 2)
  quantity       Int            @default(1)
  total          Decimal        @db.Decimal(12, 2)
  date           DateTime
  notes          String?
  receiptUrl     String?
  status         ExpenseStatus  @default(PENDING)
  project        Project?       @relation(fields: [projectId], references: [id])
  projectId      String?
  isDeleted      Boolean        @default(false)
  deletedAt      DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Project {
  id                String            @id @default(cuid())
  name              String
  clientName        String?
  description       String?
  startDate         DateTime
  endDate           DateTime
  budget            Decimal           @db.Decimal(12, 2)
  status            String            @default("ACTIVE")
  isDeleted         Boolean           @default(false)
  deletedAt         DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  projectAssignments ProjectAssignment[]
  costAllocations   CostAllocation[]
  events            Event[]
  milestones        Milestone[]
  tasks             Task[]
  expenses          Expense[]
}

model ProjectAssignment {
  id          String   @id @default(cuid())
  project     Project  @relation(fields: [projectId], references: [id])
  projectId   String
  employee    User     @relation(fields: [employeeId], references: [id])
  employeeId  String
  role        String?
  assignedAt  DateTime @default(now())
  isDeleted   Boolean  @default(false)
  deletedAt   DateTime?
  createdAt   DateTime @default(now())
}

model CostAllocation {
  id              String          @id @default(cuid())
  project         Project         @relation(fields: [projectId], references: [id])
  projectId       String
  categoryId      String
  category        ExpenseCategory @relation(fields: [categoryId], references: [id])
  allocatedAmount Decimal         @db.Decimal(12, 2)
  description     String?
  isDeleted       Boolean         @default(false)
  deletedAt       DateTime?
  createdAt       DateTime        @default(now())
  Product         Product?        @relation(fields: [productId], references: [id])
  productId       String?
}

model Event {
  id          String   @id @default(cuid())
  project     Project  @relation(fields: [projectId], references: [id])
  projectId   String
  name        String
  description String
  percentage  Int
  date        DateTime
  isDeleted   Boolean   @default(false)
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
}

model Milestone {
  id           String   @id @default(cuid())
  project      Project  @relation(fields: [projectId], references: [id])
  projectId    String
  name         String
  percentage   Int
  description  String
  targetDate   DateTime
  achievedDate DateTime?
  isDeleted    Boolean   @default(false)
  deletedAt    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}
